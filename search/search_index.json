{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#diffraction-data-analysis-library","title":"Diffraction data analysis library","text":"<p>Here is a brief overview of the main documentation sections:</p> <ul> <li> Introduction \u2013   Provides an overview of EasyDiffraction, including its purpose, licensing,   latest release details, and contact information.</li> <li> Installation &amp; Setup \u2013   Guides users through system requirements, environment configuration, and the   installation process.</li> <li> User Guide \u2013 Covers core   concepts, key terminology, workflow steps, and essential parameters for   effective use of EasyDiffraction.</li> <li> Tutorials \u2013 Offers practical,   step-by-step examples demonstrating common workflows and data analysis tasks.</li> <li> API Reference \u2013 An   auto-generated reference detailing the available functions and modules in   EasyDiffraction.</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>This section contains the reference detailing the functions and modules available in EasyDiffraction:</p> <ul> <li>core \u2013 Contains core utilities and foundational objects used across   the package.</li> <li>crystallography \u2013 Handles crystallographic calculations,   space groups, and symmetry operations.</li> <li>utils \u2013 Miscellaneous utility functions for formatting,   decorators, and general helpers.</li> <li>plotting \u2013 Tools for visualizing data and fitting results.</li> <li>project \u2013 Defines the project and manages its state.</li> <li>sample_models \u2013 Defines sample models, such as   crystallographic structures, and manages their properties.</li> <li>experiments \u2013 Manages experimental setups and instrument   parameters, as well as the associated diffraction data.</li> <li>analysis \u2013 Provides tools for analyzing diffraction data,   including fitting and minimization.</li> <li>summary \u2013 Provides a summary of the project.</li> </ul>"},{"location":"api-reference/analysis/","title":"analysis","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis","title":"<code>analysis</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.analysis","title":"<code>analysis</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.analysis.Analysis","title":"<code>Analysis</code>","text":"Source code in <code>src/easydiffraction/analysis/analysis.py</code> <pre><code>class Analysis:\n    _calculator = CalculatorFactory.create_calculator('cryspy')\n\n    def __init__(self, project) -&gt; None:\n        self.project = project\n        self.aliases = Aliases()\n        self.constraints = Constraints()\n        self.constraints_handler = ConstraintsHandler.get()\n        self.calculator = Analysis._calculator  # Default calculator shared by project\n        self._calculator_key: str = 'cryspy'  # Added to track the current calculator\n        self._fit_mode: str = 'single'\n        self.fitter = DiffractionMinimizer('lmfit (leastsq)')\n\n    def _get_params_as_dataframe(\n        self,\n        params: List[Union[Descriptor, Parameter]],\n    ) -&gt; pd.DataFrame:\n        \"\"\"\n        Convert a list of parameters to a DataFrame.\n\n        Args:\n            params: List of Descriptor or Parameter objects.\n\n        Returns:\n            A pandas DataFrame containing parameter information.\n        \"\"\"\n        rows = []\n        for param in params:\n            common_attrs = {}\n            if isinstance(param, (Descriptor, Parameter)):\n                common_attrs = {\n                    'datablock': param.datablock_id,\n                    'category': param.category_key,\n                    'entry': param.collection_entry_id,\n                    'parameter': param.name,\n                    'value': param.value,\n                    'units': param.units,\n                    'fittable': False,\n                }\n            param_attrs = {}\n            if isinstance(param, Parameter):\n                param_attrs = {\n                    'fittable': True,\n                    'free': param.free,\n                    'min': param.min,\n                    'max': param.max,\n                    'uncertainty': f'{param.uncertainty:.4f}' if param.uncertainty else '',\n                    'value': f'{param.value:.4f}',\n                    'units': param.units,\n                }\n            row = common_attrs | param_attrs\n            rows.append(row)\n\n        dataframe = pd.DataFrame(rows)\n        return dataframe\n\n    def show_all_params(self) -&gt; None:\n        sample_models_params = self.project.sample_models.get_all_params()\n        experiments_params = self.project.experiments.get_all_params()\n\n        if not sample_models_params and not experiments_params:\n            print(warning('No parameters found.'))\n            return\n\n        columns_headers = [\n            'datablock',\n            'category',\n            'entry',\n            'parameter',\n            'value',\n            'fittable',\n        ]\n        columns_alignment = [\n            'left',\n            'left',\n            'left',\n            'left',\n            'right',\n            'left',\n        ]\n\n        sample_models_dataframe = self._get_params_as_dataframe(sample_models_params)\n        sample_models_dataframe = sample_models_dataframe[columns_headers]\n\n        print(paragraph('All parameters for all sample models (\ud83e\udde9 data blocks)'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=sample_models_dataframe,\n            show_index=True,\n        )\n\n        experiments_dataframe = self._get_params_as_dataframe(experiments_params)\n        experiments_dataframe = experiments_dataframe[columns_headers]\n\n        print(paragraph('All parameters for all experiments (\ud83d\udd2c data blocks)'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=experiments_dataframe,\n            show_index=True,\n        )\n\n    def show_fittable_params(self) -&gt; None:\n        sample_models_params = self.project.sample_models.get_fittable_params()\n        experiments_params = self.project.experiments.get_fittable_params()\n\n        if not sample_models_params and not experiments_params:\n            print(warning('No fittable parameters found.'))\n            return\n\n        columns_headers = [\n            'datablock',\n            'category',\n            'entry',\n            'parameter',\n            'value',\n            'uncertainty',\n            'units',\n            'free',\n        ]\n        columns_alignment = [\n            'left',\n            'left',\n            'left',\n            'left',\n            'right',\n            'right',\n            'left',\n            'left',\n        ]\n\n        sample_models_dataframe = self._get_params_as_dataframe(sample_models_params)\n        sample_models_dataframe = sample_models_dataframe[columns_headers]\n\n        print(paragraph('Fittable parameters for all sample models (\ud83e\udde9 data blocks)'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=sample_models_dataframe,\n            show_index=True,\n        )\n\n        experiments_dataframe = self._get_params_as_dataframe(experiments_params)\n        experiments_dataframe = experiments_dataframe[columns_headers]\n\n        print(paragraph('Fittable parameters for all experiments (\ud83d\udd2c data blocks)'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=experiments_dataframe,\n            show_index=True,\n        )\n\n    def show_free_params(self) -&gt; None:\n        sample_models_params = self.project.sample_models.get_free_params()\n        experiments_params = self.project.experiments.get_free_params()\n        free_params = sample_models_params + experiments_params\n\n        if not free_params:\n            print(warning('No free parameters found.'))\n            return\n\n        columns_headers = [\n            'datablock',\n            'category',\n            'entry',\n            'parameter',\n            'value',\n            'uncertainty',\n            'min',\n            'max',\n            'units',\n        ]\n        columns_alignment = [\n            'left',\n            'left',\n            'left',\n            'left',\n            'right',\n            'right',\n            'right',\n            'right',\n            'left',\n        ]\n\n        dataframe = self._get_params_as_dataframe(free_params)\n        dataframe = dataframe[columns_headers]\n\n        print(paragraph('Free parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)'))\n        render_table(\n            columns_headers=columns_headers, columns_alignment=columns_alignment, columns_data=dataframe, show_index=True\n        )\n\n    def how_to_access_parameters(self) -&gt; None:\n        sample_models_params = self.project.sample_models.get_all_params()\n        experiments_params = self.project.experiments.get_all_params()\n        params = {'sample_models': sample_models_params, 'experiments': experiments_params}\n\n        if not params:\n            print(warning('No parameters found.'))\n            return\n\n        columns_headers = [\n            'datablock',\n            'category',\n            'entry',\n            'parameter',\n            'How to Access in Python Code',\n            'Unique Identifier for CIF Constraints',\n        ]\n\n        columns_alignment = [\n            'left',\n            'left',\n            'left',\n            'left',\n            'left',\n            'left',\n        ]\n\n        columns_data = []\n        project_varname = self.project._varname\n        for datablock_type, params in params.items():\n            for param in params:\n                if isinstance(param, (Descriptor, Parameter)):\n                    datablock_id = param.datablock_id\n                    category_key = param.category_key\n                    entry_id = param.collection_entry_id\n                    param_key = param.name\n                    code_variable = f\"{project_varname}.{datablock_type}['{datablock_id}'].{category_key}\"\n                    if entry_id:\n                        code_variable += f\"['{entry_id}']\"\n                    code_variable += f'.{param_key}'\n                    cif_uid = param._generate_human_readable_unique_id()\n                    columns_data.append([datablock_id, category_key, entry_id, param_key, code_variable, cif_uid])\n\n        print(paragraph('How to access parameters'))\n        render_table(\n            columns_headers=columns_headers, columns_alignment=columns_alignment, columns_data=columns_data, show_index=True\n        )\n\n    def show_current_calculator(self) -&gt; None:\n        print(paragraph('Current calculator'))\n        print(self.current_calculator)\n\n    @staticmethod\n    def show_supported_calculators() -&gt; None:\n        CalculatorFactory.show_supported_calculators()\n\n    @property\n    def current_calculator(self) -&gt; str:\n        return self._calculator_key\n\n    @current_calculator.setter\n    def current_calculator(self, calculator_name: str) -&gt; None:\n        calculator = CalculatorFactory.create_calculator(calculator_name)\n        if calculator is None:\n            return\n        self.calculator = calculator\n        self._calculator_key = calculator_name\n        print(paragraph('Current calculator changed to'))\n        print(self.current_calculator)\n\n    def show_current_minimizer(self) -&gt; None:\n        print(paragraph('Current minimizer'))\n        print(self.current_minimizer)\n\n    @staticmethod\n    def show_available_minimizers() -&gt; None:\n        MinimizerFactory.show_available_minimizers()\n\n    @property\n    def current_minimizer(self) -&gt; Optional[str]:\n        return self.fitter.selection if self.fitter else None\n\n    @current_minimizer.setter\n    def current_minimizer(self, selection: str) -&gt; None:\n        self.fitter = DiffractionMinimizer(selection)\n        print(paragraph('Current minimizer changed to'))\n        print(self.current_minimizer)\n\n    @property\n    def fit_mode(self) -&gt; str:\n        return self._fit_mode\n\n    @fit_mode.setter\n    def fit_mode(self, strategy: str) -&gt; None:\n        if strategy not in ['single', 'joint']:\n            raise ValueError(\"Fit mode must be either 'single' or 'joint'\")\n        self._fit_mode = strategy\n        if strategy == 'joint':\n            if not hasattr(self, 'joint_fit_experiments'):\n                # Pre-populate all experiments with weight 0.5\n                self.joint_fit_experiments = JointFitExperiments()\n                for id in self.project.experiments.ids:\n                    self.joint_fit_experiments.add(id, weight=0.5)\n        print(paragraph('Current fit mode changed to'))\n        print(self._fit_mode)\n\n    def show_available_fit_modes(self) -&gt; None:\n        strategies = [\n            {\n                'Strategy': 'single',\n                'Description': 'Independent fitting of each experiment; no shared parameters',\n            },\n            {\n                'Strategy': 'joint',\n                'Description': 'Simultaneous fitting of all experiments; some parameters are shared',\n            },\n        ]\n\n        columns_headers = ['Strategy', 'Description']\n        columns_alignment = ['left', 'left']\n        columns_data = []\n        for item in strategies:\n            strategy = item['Strategy']\n            description = item['Description']\n            columns_data.append([strategy, description])\n\n        print(paragraph('Available fit modes'))\n        render_table(columns_headers=columns_headers, columns_alignment=columns_alignment, columns_data=columns_data)\n\n    def show_current_fit_mode(self) -&gt; None:\n        print(paragraph('Current fit mode'))\n        print(self.fit_mode)\n\n    def calculate_pattern(self, expt_name: str) -&gt; Optional[np.ndarray]:\n        \"\"\"\n        Calculate the diffraction pattern for a given experiment.\n\n        Args:\n            expt_name: The name of the experiment.\n\n        Returns:\n            The calculated pattern as a pandas DataFrame.\n        \"\"\"\n        experiment = self.project.experiments[expt_name]\n        sample_models = self.project.sample_models\n        calculated_pattern = self.calculator.calculate_pattern(sample_models, experiment)\n        return calculated_pattern\n\n    def show_constraints(self) -&gt; None:\n        constraints_dict = self.constraints._items\n\n        if not self.constraints._items:\n            print(warning('No constraints defined.'))\n            return\n\n        rows = []\n        for constraint in constraints_dict.values():\n            row = {\n                'lhs_alias': constraint.lhs_alias.value,\n                'rhs_expr': constraint.rhs_expr.value,\n                'full expression': f'{constraint.lhs_alias.value} = {constraint.rhs_expr.value}',\n            }\n            rows.append(row)\n\n        headers = ['lhs_alias', 'rhs_expr', 'full expression']\n        alignments = ['left', 'left', 'left']\n        rows = [[row[header] for header in headers] for row in rows]\n\n        print(paragraph('User defined constraints'))\n        render_table(columns_headers=headers, columns_alignment=alignments, columns_data=rows)\n\n    def apply_constraints(self):\n        if not self.constraints._items:\n            print(warning('No constraints defined.'))\n            return\n\n        self.constraints_handler.set_aliases(self.aliases)\n        self.constraints_handler.set_constraints(self.constraints)\n        self.constraints_handler.apply()\n\n    def fit(self):\n        sample_models = self.project.sample_models\n        if not sample_models:\n            print('No sample models found in the project. Cannot run fit.')\n            return\n\n        experiments = self.project.experiments\n        if not experiments:\n            print('No experiments found in the project. Cannot run fit.')\n            return\n\n        calculator = self.calculator\n        if not calculator:\n            print('No calculator is set. Cannot run fit.')\n            return\n\n        # Run the fitting process\n        experiment_ids = experiments.ids\n\n        if self.fit_mode == 'joint':\n            print(paragraph(f\"Using all experiments \ud83d\udd2c {experiment_ids} for '{self.fit_mode}' fitting\"))\n            self.fitter.fit(sample_models, experiments, calculator, weights=self.joint_fit_experiments)\n        elif self.fit_mode == 'single':\n            for expt_name in experiments.ids:\n                print(paragraph(f\"Using experiment \ud83d\udd2c '{expt_name}' for '{self.fit_mode}' fitting\"))\n                experiment = experiments[expt_name]\n                dummy_experiments = Experiments()  # TODO: Find a better name\n                dummy_experiments.add(experiment)\n                self.fitter.fit(sample_models, dummy_experiments, calculator)\n        else:\n            raise NotImplementedError(f'Fit mode {self.fit_mode} not implemented yet.')\n\n        # After fitting, get the results\n        self.fit_results = self.fitter.results\n\n    def as_cif(self):\n        current_minimizer = self.current_minimizer\n        if ' ' in current_minimizer:\n            current_minimizer = f'\"{current_minimizer}\"'\n\n        lines = []\n        lines.append(f'_analysis.calculator_engine  {self.current_calculator}')\n        lines.append(f'_analysis.fitting_engine  {current_minimizer}')\n        lines.append(f'_analysis.fit_mode  {self.fit_mode}')\n\n        lines.append('')\n        lines.append(self.aliases.as_cif())\n\n        lines.append('')\n        lines.append(self.constraints.as_cif())\n\n        return '\\n'.join(lines)\n\n    def show_as_cif(self) -&gt; None:\n        cif_text: str = self.as_cif()\n        paragraph_title: str = paragraph('Analysis \ud83e\uddee info as cif')\n        render_cif(cif_text, paragraph_title)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.analysis.Analysis.calculate_pattern","title":"<code>calculate_pattern(expt_name)</code>","text":"<p>Calculate the diffraction pattern for a given experiment.</p> <p>Parameters:</p> Name Type Description Default <code>expt_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:</p> Type Description <code>Optional[ndarray]</code> <p>The calculated pattern as a pandas DataFrame.</p> Source code in <code>src/easydiffraction/analysis/analysis.py</code> <pre><code>def calculate_pattern(self, expt_name: str) -&gt; Optional[np.ndarray]:\n    \"\"\"\n    Calculate the diffraction pattern for a given experiment.\n\n    Args:\n        expt_name: The name of the experiment.\n\n    Returns:\n        The calculated pattern as a pandas DataFrame.\n    \"\"\"\n    experiment = self.project.experiments[expt_name]\n    sample_models = self.project.sample_models\n    calculated_pattern = self.calculator.calculate_pattern(sample_models, experiment)\n    return calculated_pattern\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculation","title":"<code>calculation</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.calculation.DiffractionCalculator","title":"<code>DiffractionCalculator</code>","text":"<p>Invokes calculation engines for pattern generation.</p> Source code in <code>src/easydiffraction/analysis/calculation.py</code> <pre><code>class DiffractionCalculator:\n    \"\"\"\n    Invokes calculation engines for pattern generation.\n    \"\"\"\n\n    def __init__(self, engine: str = 'cryspy') -&gt; None:\n        \"\"\"\n        Initialize the DiffractionCalculator with a specified backend engine.\n\n        Args:\n            engine: Type of the calculation engine to use.\n                    Supported types: 'crysfml', 'cryspy', 'pdffit'.\n                    Default is 'cryspy'.\n        \"\"\"\n        self.calculator_factory = CalculatorFactory()\n        self._calculator = self.calculator_factory.create_calculator(engine)\n\n    def set_calculator(self, engine: str) -&gt; None:\n        \"\"\"\n        Switch to a different calculator engine at runtime.\n\n        Args:\n            engine: New calculation engine type to use.\n        \"\"\"\n        self._calculator = self.calculator_factory.create_calculator(engine)\n\n    def calculate_structure_factors(\n        self,\n        sample_models: SampleModels,\n        experiments: Experiments,\n    ) -&gt; Optional[List[Any]]:\n        \"\"\"\n        Calculate HKL intensities (structure factors) for sample models and experiments.\n\n        Args:\n            sample_models: Collection of sample models.\n            experiments: Collection of experiments.\n\n        Returns:\n            HKL intensities calculated by the backend calculator.\n        \"\"\"\n        return self._calculator.calculate_structure_factors(sample_models, experiments)\n\n    def calculate_pattern(\n        self,\n        sample_models: SampleModels,\n        experiment: Experiment,\n    ) -&gt; np.ndarray:\n        \"\"\"\n        Calculate diffraction pattern based on sample models and experiment.\n\n        Args:\n            sample_models: Collection of sample models.\n            experiment: A single experiment object.\n\n        Returns:\n            Diffraction pattern calculated by the backend calculator.\n        \"\"\"\n        return self._calculator.calculate_pattern(sample_models, experiment)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculation.DiffractionCalculator.__init__","title":"<code>__init__(engine='cryspy')</code>","text":"<p>Initialize the DiffractionCalculator with a specified backend engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>str</code> <p>Type of the calculation engine to use.     Supported types: 'crysfml', 'cryspy', 'pdffit'.     Default is 'cryspy'.</p> <code>'cryspy'</code> Source code in <code>src/easydiffraction/analysis/calculation.py</code> <pre><code>def __init__(self, engine: str = 'cryspy') -&gt; None:\n    \"\"\"\n    Initialize the DiffractionCalculator with a specified backend engine.\n\n    Args:\n        engine: Type of the calculation engine to use.\n                Supported types: 'crysfml', 'cryspy', 'pdffit'.\n                Default is 'cryspy'.\n    \"\"\"\n    self.calculator_factory = CalculatorFactory()\n    self._calculator = self.calculator_factory.create_calculator(engine)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculation.DiffractionCalculator.calculate_pattern","title":"<code>calculate_pattern(sample_models, experiment)</code>","text":"<p>Calculate diffraction pattern based on sample models and experiment.</p> <p>Parameters:</p> Name Type Description Default <code>sample_models</code> <code>SampleModels</code> <p>Collection of sample models.</p> required <code>experiment</code> <code>Experiment</code> <p>A single experiment object.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Diffraction pattern calculated by the backend calculator.</p> Source code in <code>src/easydiffraction/analysis/calculation.py</code> <pre><code>def calculate_pattern(\n    self,\n    sample_models: SampleModels,\n    experiment: Experiment,\n) -&gt; np.ndarray:\n    \"\"\"\n    Calculate diffraction pattern based on sample models and experiment.\n\n    Args:\n        sample_models: Collection of sample models.\n        experiment: A single experiment object.\n\n    Returns:\n        Diffraction pattern calculated by the backend calculator.\n    \"\"\"\n    return self._calculator.calculate_pattern(sample_models, experiment)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculation.DiffractionCalculator.calculate_structure_factors","title":"<code>calculate_structure_factors(sample_models, experiments)</code>","text":"<p>Calculate HKL intensities (structure factors) for sample models and experiments.</p> <p>Parameters:</p> Name Type Description Default <code>sample_models</code> <code>SampleModels</code> <p>Collection of sample models.</p> required <code>experiments</code> <code>Experiments</code> <p>Collection of experiments.</p> required <p>Returns:</p> Type Description <code>Optional[List[Any]]</code> <p>HKL intensities calculated by the backend calculator.</p> Source code in <code>src/easydiffraction/analysis/calculation.py</code> <pre><code>def calculate_structure_factors(\n    self,\n    sample_models: SampleModels,\n    experiments: Experiments,\n) -&gt; Optional[List[Any]]:\n    \"\"\"\n    Calculate HKL intensities (structure factors) for sample models and experiments.\n\n    Args:\n        sample_models: Collection of sample models.\n        experiments: Collection of experiments.\n\n    Returns:\n        HKL intensities calculated by the backend calculator.\n    \"\"\"\n    return self._calculator.calculate_structure_factors(sample_models, experiments)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculation.DiffractionCalculator.set_calculator","title":"<code>set_calculator(engine)</code>","text":"<p>Switch to a different calculator engine at runtime.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>str</code> <p>New calculation engine type to use.</p> required Source code in <code>src/easydiffraction/analysis/calculation.py</code> <pre><code>def set_calculator(self, engine: str) -&gt; None:\n    \"\"\"\n    Switch to a different calculator engine at runtime.\n\n    Args:\n        engine: New calculation engine type to use.\n    \"\"\"\n    self._calculator = self.calculator_factory.create_calculator(engine)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators","title":"<code>calculators</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_base","title":"<code>calculator_base</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_base.CalculatorBase","title":"<code>CalculatorBase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base API for diffraction calculation engines.</p> Source code in <code>src/easydiffraction/analysis/calculators/calculator_base.py</code> <pre><code>class CalculatorBase(ABC):\n    \"\"\"\n    Base API for diffraction calculation engines.\n    \"\"\"\n\n    @property\n    @abstractmethod\n    def name(self) -&gt; str:\n        pass\n\n    @property\n    @abstractmethod\n    def engine_imported(self) -&gt; bool:\n        pass\n\n    @abstractmethod\n    def calculate_structure_factors(\n        self,\n        sample_model: SampleModel,\n        experiment: Experiment,\n    ) -&gt; None:\n        \"\"\"\n        Calculate structure factors for a single sample model and experiment.\n        \"\"\"\n        pass\n\n    def calculate_pattern(\n        self,\n        sample_models: SampleModels,\n        experiment: Experiment,\n        called_by_minimizer: bool = False,\n    ) -&gt; np.ndarray:\n        \"\"\"\n        Calculate the diffraction pattern for multiple sample models and a single experiment.\n\n        Args:\n            sample_models: Collection of sample models.\n            experiment: The experiment object.\n            called_by_minimizer: Whether the calculation is called by a minimizer.\n\n        Returns:\n            The calculated diffraction pattern as a NumPy array.\n        \"\"\"\n        x_data = experiment.datastore.pattern.x\n        y_calc_zeros = np.zeros_like(x_data)\n\n        valid_linked_phases = self._get_valid_linked_phases(sample_models, experiment)\n\n        # Apply user constraints to all sample models\n        constraints = ConstraintsHandler.get()\n        constraints.apply()\n\n        # Calculate contributions from valid linked sample models\n        y_calc_scaled = y_calc_zeros\n        for linked_phase in valid_linked_phases:\n            sample_model_id = linked_phase._entry_id\n            sample_model_scale = linked_phase.scale.value\n            sample_model = sample_models[sample_model_id]\n\n            # Apply symmetry constraints\n            sample_model.apply_symmetry_constraints()\n\n            sample_model_y_calc = self._calculate_single_model_pattern(\n                sample_model,\n                experiment,\n                called_by_minimizer=called_by_minimizer,\n            )\n\n            sample_model_y_calc_scaled = sample_model_scale * sample_model_y_calc\n            y_calc_scaled += sample_model_y_calc_scaled\n\n        # Calculate background contribution\n        y_bkg = np.zeros_like(x_data)\n        if hasattr(experiment, 'background'):\n            y_bkg = experiment.background.calculate(x_data)\n        experiment.datastore.pattern.bkg = y_bkg\n\n        # Calculate total pattern\n        y_calc_total = y_calc_scaled + y_bkg\n        experiment.datastore.pattern.calc = y_calc_total\n\n        return y_calc_total\n\n    @abstractmethod\n    def _calculate_single_model_pattern(\n        self,\n        sample_model: SampleModels,\n        experiment: Experiment,\n        called_by_minimizer: bool,\n    ) -&gt; np.ndarray:\n        \"\"\"\n        Calculate the diffraction pattern for a single sample model and experiment.\n\n        Args:\n            sample_model: The sample model object.\n            experiment: The experiment object.\n            called_by_minimizer: Whether the calculation is called by a minimizer.\n\n        Returns:\n            The calculated diffraction pattern as a NumPy array.\n        \"\"\"\n        pass\n\n    def _get_valid_linked_phases(\n        self,\n        sample_models: SampleModels,\n        experiment: Experiment,\n    ) -&gt; List[Any]:\n        \"\"\"\n        Get valid linked phases from the experiment.\n\n        Args:\n            sample_models: Collection of sample models.\n            experiment: The experiment object.\n\n        Returns:\n            A list of valid linked phases.\n        \"\"\"\n        if not experiment.linked_phases:\n            print('Warning: No linked phases found. Returning empty pattern.')\n            return []\n\n        valid_linked_phases = []\n        for linked_phase in experiment.linked_phases:\n            if linked_phase._entry_id not in sample_models.get_ids():\n                print(f\"Warning: Linked phase '{linked_phase.id.value}' not found in Sample Models {sample_models.get_ids()}\")\n                continue\n            valid_linked_phases.append(linked_phase)\n\n        if not valid_linked_phases:\n            print('Warning: None of the linked phases found in Sample Models. Returning empty pattern.')\n\n        return valid_linked_phases\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_base.CalculatorBase.calculate_pattern","title":"<code>calculate_pattern(sample_models, experiment, called_by_minimizer=False)</code>","text":"<p>Calculate the diffraction pattern for multiple sample models and a single experiment.</p> <p>Parameters:</p> Name Type Description Default <code>sample_models</code> <code>SampleModels</code> <p>Collection of sample models.</p> required <code>experiment</code> <code>Experiment</code> <p>The experiment object.</p> required <code>called_by_minimizer</code> <code>bool</code> <p>Whether the calculation is called by a minimizer.</p> <code>False</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>The calculated diffraction pattern as a NumPy array.</p> Source code in <code>src/easydiffraction/analysis/calculators/calculator_base.py</code> <pre><code>def calculate_pattern(\n    self,\n    sample_models: SampleModels,\n    experiment: Experiment,\n    called_by_minimizer: bool = False,\n) -&gt; np.ndarray:\n    \"\"\"\n    Calculate the diffraction pattern for multiple sample models and a single experiment.\n\n    Args:\n        sample_models: Collection of sample models.\n        experiment: The experiment object.\n        called_by_minimizer: Whether the calculation is called by a minimizer.\n\n    Returns:\n        The calculated diffraction pattern as a NumPy array.\n    \"\"\"\n    x_data = experiment.datastore.pattern.x\n    y_calc_zeros = np.zeros_like(x_data)\n\n    valid_linked_phases = self._get_valid_linked_phases(sample_models, experiment)\n\n    # Apply user constraints to all sample models\n    constraints = ConstraintsHandler.get()\n    constraints.apply()\n\n    # Calculate contributions from valid linked sample models\n    y_calc_scaled = y_calc_zeros\n    for linked_phase in valid_linked_phases:\n        sample_model_id = linked_phase._entry_id\n        sample_model_scale = linked_phase.scale.value\n        sample_model = sample_models[sample_model_id]\n\n        # Apply symmetry constraints\n        sample_model.apply_symmetry_constraints()\n\n        sample_model_y_calc = self._calculate_single_model_pattern(\n            sample_model,\n            experiment,\n            called_by_minimizer=called_by_minimizer,\n        )\n\n        sample_model_y_calc_scaled = sample_model_scale * sample_model_y_calc\n        y_calc_scaled += sample_model_y_calc_scaled\n\n    # Calculate background contribution\n    y_bkg = np.zeros_like(x_data)\n    if hasattr(experiment, 'background'):\n        y_bkg = experiment.background.calculate(x_data)\n    experiment.datastore.pattern.bkg = y_bkg\n\n    # Calculate total pattern\n    y_calc_total = y_calc_scaled + y_bkg\n    experiment.datastore.pattern.calc = y_calc_total\n\n    return y_calc_total\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_base.CalculatorBase.calculate_structure_factors","title":"<code>calculate_structure_factors(sample_model, experiment)</code>  <code>abstractmethod</code>","text":"<p>Calculate structure factors for a single sample model and experiment.</p> Source code in <code>src/easydiffraction/analysis/calculators/calculator_base.py</code> <pre><code>@abstractmethod\ndef calculate_structure_factors(\n    self,\n    sample_model: SampleModel,\n    experiment: Experiment,\n) -&gt; None:\n    \"\"\"\n    Calculate structure factors for a single sample model and experiment.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_crysfml","title":"<code>calculator_crysfml</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_crysfml.CrysfmlCalculator","title":"<code>CrysfmlCalculator</code>","text":"<p>               Bases: <code>CalculatorBase</code></p> <p>Wrapper for Crysfml library.</p> Source code in <code>src/easydiffraction/analysis/calculators/calculator_crysfml.py</code> <pre><code>class CrysfmlCalculator(CalculatorBase):\n    \"\"\"\n    Wrapper for Crysfml library.\n    \"\"\"\n\n    engine_imported: bool = cfml_py_utilities is not None\n\n    @property\n    def name(self) -&gt; str:\n        return 'crysfml'\n\n    def calculate_structure_factors(\n        self,\n        sample_models: SampleModels,\n        experiments: Experiments,\n    ) -&gt; None:\n        \"\"\"\n        Call Crysfml to calculate structure factors.\n\n        Args:\n            sample_models: The sample models to calculate structure factors for.\n            experiments: The experiments associated with the sample models.\n        \"\"\"\n        raise NotImplementedError('HKL calculation is not implemented for CrysfmlCalculator.')\n\n    def _calculate_single_model_pattern(\n        self,\n        sample_model: SampleModels,\n        experiment: Experiment,\n        called_by_minimizer: bool = False,\n    ) -&gt; Union[np.ndarray, List[float]]:\n        \"\"\"\n        Calculates the diffraction pattern using Crysfml for the given sample model and experiment.\n\n        Args:\n            sample_model: The sample model to calculate the pattern for.\n            experiment: The experiment associated with the sample model.\n            called_by_minimizer: Whether the calculation is called by a minimizer.\n\n        Returns:\n            The calculated diffraction pattern as a NumPy array or a list of floats.\n        \"\"\"\n        crysfml_dict = self._crysfml_dict(sample_model, experiment)\n        try:\n            _, y = cfml_py_utilities.cw_powder_pattern_from_dict(crysfml_dict)\n            y = self._adjust_pattern_length(y, len(experiment.datastore.pattern.x))\n        except KeyError:\n            print('[CrysfmlCalculator] Error: No calculated data')\n            y = []\n        return y\n\n    def _adjust_pattern_length(\n        self,\n        pattern: List[float],\n        target_length: int,\n    ) -&gt; List[float]:\n        \"\"\"\n        Adjusts the length of the pattern to match the target length.\n\n        Args:\n            pattern: The pattern to adjust.\n            target_length: The desired length of the pattern.\n\n        Returns:\n            The adjusted pattern.\n        \"\"\"\n        # TODO: Check the origin of this discrepancy coming from PyCrysFML\n        if len(pattern) &gt; target_length:\n            return pattern[:target_length]\n        return pattern\n\n    def _crysfml_dict(\n        self,\n        sample_model: SampleModels,\n        experiment: Experiment,\n    ) -&gt; Dict[str, Union[Experiment, SampleModel]]:\n        \"\"\"\n        Converts the sample model and experiment into a dictionary format for Crysfml.\n\n        Args:\n            sample_model: The sample model to convert.\n            experiment: The experiment to convert.\n\n        Returns:\n            A dictionary representation of the sample model and experiment.\n        \"\"\"\n        sample_model_dict = self._convert_sample_model_to_dict(sample_model)\n        experiment_dict = self._convert_experiment_to_dict(experiment)\n        return {\n            'phases': [sample_model_dict],\n            'experiments': [experiment_dict],\n        }\n\n    def _convert_sample_model_to_dict(\n        self,\n        sample_model: SampleModel,\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Converts a sample model into a dictionary format.\n\n        Args:\n            sample_model: The sample model to convert.\n\n        Returns:\n            A dictionary representation of the sample model.\n        \"\"\"\n        sample_model_dict = {\n            sample_model.name: {\n                '_space_group_name_H-M_alt': sample_model.space_group.name_h_m.value,\n                '_cell_length_a': sample_model.cell.length_a.value,\n                '_cell_length_b': sample_model.cell.length_b.value,\n                '_cell_length_c': sample_model.cell.length_c.value,\n                '_cell_angle_alpha': sample_model.cell.angle_alpha.value,\n                '_cell_angle_beta': sample_model.cell.angle_beta.value,\n                '_cell_angle_gamma': sample_model.cell.angle_gamma.value,\n                '_atom_site': [],\n            }\n        }\n\n        for atom in sample_model.atom_sites:\n            atom_site = {\n                '_label': atom.label.value,\n                '_type_symbol': atom.type_symbol.value,\n                '_fract_x': atom.fract_x.value,\n                '_fract_y': atom.fract_y.value,\n                '_fract_z': atom.fract_z.value,\n                '_occupancy': atom.occupancy.value,\n                '_adp_type': 'Biso',  # Assuming Biso for simplicity\n                '_B_iso_or_equiv': atom.b_iso.value,\n            }\n            sample_model_dict[sample_model.name]['_atom_site'].append(atom_site)\n\n        return sample_model_dict\n\n    def _convert_experiment_to_dict(\n        self,\n        experiment: Experiment,\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Converts an experiment into a dictionary format.\n\n        Args:\n            experiment: The experiment to convert.\n\n        Returns:\n            A dictionary representation of the experiment.\n        \"\"\"\n        expt_type = getattr(experiment, 'type', None)\n        instrument = getattr(experiment, 'instrument', None)\n        peak = getattr(experiment, 'peak', None)\n\n        x_data = experiment.datastore.pattern.x\n        twotheta_min = float(x_data.min())\n        twotheta_max = float(x_data.max())\n\n        exp_dict = {\n            'NPD': {\n                '_diffrn_radiation_probe': expt_type.radiation_probe.value if expt_type else 'neutron',\n                '_diffrn_radiation_wavelength': instrument.setup_wavelength.value if instrument else 1.0,\n                '_pd_instr_resolution_u': peak.broad_gauss_u.value if peak else 0.0,\n                '_pd_instr_resolution_v': peak.broad_gauss_v.value if peak else 0.0,\n                '_pd_instr_resolution_w': peak.broad_gauss_w.value if peak else 0.0,\n                '_pd_instr_resolution_x': peak.broad_lorentz_x.value if peak else 0.0,\n                '_pd_instr_resolution_y': peak.broad_lorentz_y.value if peak else 0.0,\n                # \"_pd_instr_reflex_s_l\": peak_asymm.s_l.value if peak_asymm else 0.0,\n                # \"_pd_instr_reflex_d_l\": peak_asymm.d_l.value if peak_asymm else 0.0,\n                '_pd_meas_2theta_offset': instrument.calib_twotheta_offset.value if instrument else 0.0,\n                '_pd_meas_2theta_range_min': twotheta_min,\n                '_pd_meas_2theta_range_max': twotheta_max,\n                '_pd_meas_2theta_range_inc': (twotheta_max - twotheta_min) / len(x_data),\n            }\n        }\n\n        return exp_dict\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_crysfml.CrysfmlCalculator.calculate_structure_factors","title":"<code>calculate_structure_factors(sample_models, experiments)</code>","text":"<p>Call Crysfml to calculate structure factors.</p> <p>Parameters:</p> Name Type Description Default <code>sample_models</code> <code>SampleModels</code> <p>The sample models to calculate structure factors for.</p> required <code>experiments</code> <code>Experiments</code> <p>The experiments associated with the sample models.</p> required Source code in <code>src/easydiffraction/analysis/calculators/calculator_crysfml.py</code> <pre><code>def calculate_structure_factors(\n    self,\n    sample_models: SampleModels,\n    experiments: Experiments,\n) -&gt; None:\n    \"\"\"\n    Call Crysfml to calculate structure factors.\n\n    Args:\n        sample_models: The sample models to calculate structure factors for.\n        experiments: The experiments associated with the sample models.\n    \"\"\"\n    raise NotImplementedError('HKL calculation is not implemented for CrysfmlCalculator.')\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_cryspy","title":"<code>calculator_cryspy</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_cryspy.CryspyCalculator","title":"<code>CryspyCalculator</code>","text":"<p>               Bases: <code>CalculatorBase</code></p> <p>Cryspy-based diffraction calculator. Converts EasyDiffraction models into Cryspy objects and computes patterns.</p> Source code in <code>src/easydiffraction/analysis/calculators/calculator_cryspy.py</code> <pre><code>class CryspyCalculator(CalculatorBase):\n    \"\"\"\n    Cryspy-based diffraction calculator.\n    Converts EasyDiffraction models into Cryspy objects and computes patterns.\n    \"\"\"\n\n    engine_imported: bool = cryspy is not None\n\n    @property\n    def name(self) -&gt; str:\n        return 'cryspy'\n\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self._cryspy_dicts: Dict[str, Dict[str, Any]] = {}\n\n    def calculate_structure_factors(\n        self,\n        sample_model: SampleModel,\n        experiment: Experiment,\n    ) -&gt; None:\n        \"\"\"\n        Raises a NotImplementedError as HKL calculation is not implemented.\n\n        Args:\n            sample_model: The sample model to calculate structure factors for.\n            experiment: The experiment associated with the sample models.\n        \"\"\"\n        raise NotImplementedError('HKL calculation is not implemented for CryspyCalculator.')\n\n    def _calculate_single_model_pattern(\n        self,\n        sample_model: SampleModel,\n        experiment: Experiment,\n        called_by_minimizer: bool = False,\n    ) -&gt; Union[np.ndarray, List[float]]:\n        \"\"\"\n        Calculates the diffraction pattern using Cryspy for the given sample model and experiment.\n        We only recreate the cryspy_obj if this method is\n         - NOT called by the minimizer, or\n         - the cryspy_dict is NOT yet created.\n        In other cases, we are modifying the existing cryspy_dict\n        This allows significantly speeding up the calculation\n\n        Args:\n            sample_model: The sample model to calculate the pattern for.\n            experiment: The experiment associated with the sample model.\n            called_by_minimizer: Whether the calculation is called by a minimizer.\n\n        Returns:\n            The calculated diffraction pattern as a NumPy array or a list of floats.\n        \"\"\"\n        combined_name = f'{sample_model.name}_{experiment.name}'\n\n        if called_by_minimizer:\n            if self._cryspy_dicts and combined_name in self._cryspy_dicts:\n                cryspy_dict = self._recreate_cryspy_dict(sample_model, experiment)\n            else:\n                cryspy_obj = self._recreate_cryspy_obj(sample_model, experiment)\n                cryspy_dict = cryspy_obj.get_dictionary()\n        else:\n            cryspy_obj = self._recreate_cryspy_obj(sample_model, experiment)\n            cryspy_dict = cryspy_obj.get_dictionary()\n\n        self._cryspy_dicts[combined_name] = copy.deepcopy(cryspy_dict)\n\n        cryspy_in_out_dict: Dict[str, Any] = {}\n\n        # Calculate the pattern using Cryspy\n        # TODO: Redirect stderr to suppress Cryspy warnings.\n        #  This is a temporary solution to avoid cluttering the output.\n        #  E.g. cryspy/A_functions_base/powder_diffraction_tof.py:106:\n        #  RuntimeWarning: overflow encountered in exp\n        #  Remove this when Cryspy is updated to handle warnings better.\n        with contextlib.redirect_stderr(io.StringIO()):\n            rhochi_calc_chi_sq_by_dictionary(\n                cryspy_dict,\n                dict_in_out=cryspy_in_out_dict,\n                flag_use_precalculated_data=False,\n                flag_calc_analytical_derivatives=False,\n            )\n\n        prefixes = {'constant wavelength': 'pd', 'time-of-flight': 'tof'}\n        beam_mode = experiment.type.beam_mode.value\n        if beam_mode in prefixes.keys():\n            cryspy_block_name = f'{prefixes[beam_mode]}_{experiment.name}'\n        else:\n            print(f'[CryspyCalculator] Error: Unknown beam mode {experiment.type.beam_mode.value}')\n            return []\n\n        try:\n            signal_plus = cryspy_in_out_dict[cryspy_block_name]['signal_plus']\n            signal_minus = cryspy_in_out_dict[cryspy_block_name]['signal_minus']\n            y_calc = signal_plus + signal_minus\n        except KeyError:\n            print(f'[CryspyCalculator] Error: No calculated data for {cryspy_block_name}')\n            return []\n\n        return y_calc\n\n    def _recreate_cryspy_dict(\n        self,\n        sample_model: SampleModel,\n        experiment: Experiment,\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Recreates the Cryspy dictionary for the given sample model and experiment.\n\n        Args:\n            sample_model: The sample model to update.\n            experiment: The experiment to update.\n\n        Returns:\n            The updated Cryspy dictionary.\n        \"\"\"\n        combined_name = f'{sample_model.name}_{experiment.name}'\n        cryspy_dict = copy.deepcopy(self._cryspy_dicts[combined_name])\n\n        cryspy_model_id = f'crystal_{sample_model.name}'\n        cryspy_model_dict = cryspy_dict[cryspy_model_id]\n\n        # Cell\n        cryspy_cell = cryspy_model_dict['unit_cell_parameters']\n        cryspy_cell[0] = sample_model.cell.length_a.value\n        cryspy_cell[1] = sample_model.cell.length_b.value\n        cryspy_cell[2] = sample_model.cell.length_c.value\n        cryspy_cell[3] = np.deg2rad(sample_model.cell.angle_alpha.value)\n        cryspy_cell[4] = np.deg2rad(sample_model.cell.angle_beta.value)\n        cryspy_cell[5] = np.deg2rad(sample_model.cell.angle_gamma.value)\n\n        # Atomic coordinates\n        cryspy_xyz = cryspy_model_dict['atom_fract_xyz']\n        for idx, atom_site in enumerate(sample_model.atom_sites):\n            cryspy_xyz[0][idx] = atom_site.fract_x.value\n            cryspy_xyz[1][idx] = atom_site.fract_y.value\n            cryspy_xyz[2][idx] = atom_site.fract_z.value\n\n        # Atomic occupancies\n        cryspy_occ = cryspy_model_dict['atom_occupancy']\n        for idx, atom_site in enumerate(sample_model.atom_sites):\n            cryspy_occ[idx] = atom_site.occupancy.value\n\n        # Atomic ADPs - Biso only for now\n        cryspy_biso = cryspy_model_dict['atom_b_iso']\n        for idx, atom_site in enumerate(sample_model.atom_sites):\n            cryspy_biso[idx] = atom_site.b_iso.value\n\n        # ---------- Update experiment parameters ----------\n        if experiment.type.beam_mode.value == 'constant wavelength':\n            cryspy_expt_name = f'pd_{experiment.name}'\n            cryspy_expt_dict = cryspy_dict[cryspy_expt_name]\n            # Instrument\n            cryspy_expt_dict['offset_ttheta'][0] = np.deg2rad(experiment.instrument.calib_twotheta_offset.value)\n            cryspy_expt_dict['wavelength'][0] = experiment.instrument.setup_wavelength.value\n            # Peak\n            cryspy_resolution = cryspy_expt_dict['resolution_parameters']\n            cryspy_resolution[0] = experiment.peak.broad_gauss_u.value\n            cryspy_resolution[1] = experiment.peak.broad_gauss_v.value\n            cryspy_resolution[2] = experiment.peak.broad_gauss_w.value\n            cryspy_resolution[3] = experiment.peak.broad_lorentz_x.value\n            cryspy_resolution[4] = experiment.peak.broad_lorentz_y.value\n\n        elif experiment.type.beam_mode.value == 'time-of-flight':\n            cryspy_expt_name = f'tof_{experiment.name}'\n            cryspy_expt_dict = cryspy_dict[cryspy_expt_name]\n            # Instrument\n            cryspy_expt_dict['zero'][0] = experiment.instrument.calib_d_to_tof_offset.value\n            cryspy_expt_dict['dtt1'][0] = experiment.instrument.calib_d_to_tof_linear.value\n            cryspy_expt_dict['dtt2'][0] = experiment.instrument.calib_d_to_tof_quad.value\n            cryspy_expt_dict['ttheta_bank'] = np.deg2rad(experiment.instrument.setup_twotheta_bank.value)\n            # Peak\n            cryspy_sigma = cryspy_expt_dict['profile_sigmas']\n            cryspy_sigma[0] = experiment.peak.broad_gauss_sigma_0.value\n            cryspy_sigma[1] = experiment.peak.broad_gauss_sigma_1.value\n            cryspy_sigma[2] = experiment.peak.broad_gauss_sigma_2.value\n\n            cryspy_beta = cryspy_expt_dict['profile_betas']\n            cryspy_beta[0] = experiment.peak.broad_mix_beta_0.value\n            cryspy_beta[1] = experiment.peak.broad_mix_beta_1.value\n\n            cryspy_alpha = cryspy_expt_dict['profile_alphas']\n            cryspy_alpha[0] = experiment.peak.asym_alpha_0.value\n            cryspy_alpha[1] = experiment.peak.asym_alpha_1.value\n\n        return cryspy_dict\n\n    def _recreate_cryspy_obj(\n        self,\n        sample_model: SampleModel,\n        experiment: Experiment,\n    ) -&gt; Any:\n        \"\"\"\n        Recreates the Cryspy object for the given sample model and experiment.\n\n        Args:\n            sample_model: The sample model to recreate.\n            experiment: The experiment to recreate.\n\n        Returns:\n            The recreated Cryspy object.\n        \"\"\"\n        cryspy_obj = str_to_globaln('')\n\n        cryspy_sample_model_cif = self._convert_sample_model_to_cryspy_cif(sample_model)\n        cryspy_sample_model_obj = str_to_globaln(cryspy_sample_model_cif)\n        cryspy_obj.add_items(cryspy_sample_model_obj.items)\n\n        # Add single experiment to cryspy_obj\n        cryspy_experiment_cif = self._convert_experiment_to_cryspy_cif(\n            experiment,\n            linked_phase=sample_model,\n        )\n\n        cryspy_experiment_obj = str_to_globaln(cryspy_experiment_cif)\n        cryspy_obj.add_items(cryspy_experiment_obj.items)\n\n        return cryspy_obj\n\n    def _convert_sample_model_to_cryspy_cif(\n        self,\n        sample_model: SampleModel,\n    ) -&gt; str:\n        \"\"\"\n        Converts a sample model to a Cryspy CIF string.\n\n        Args:\n            sample_model: The sample model to convert.\n\n        Returns:\n            The Cryspy CIF string representation of the sample model.\n        \"\"\"\n        return sample_model.as_cif()\n\n    def _convert_experiment_to_cryspy_cif(\n        self,\n        experiment: Experiment,\n        linked_phase: Any,\n    ) -&gt; str:\n        \"\"\"\n        Converts an experiment to a Cryspy CIF string.\n\n        Args:\n            experiment: The experiment to convert.\n            linked_phase: The linked phase associated with the experiment.\n\n        Returns:\n            The Cryspy CIF string representation of the experiment.\n        \"\"\"\n        expt_type = getattr(experiment, 'type', None)\n        instrument = getattr(experiment, 'instrument', None)\n        peak = getattr(experiment, 'peak', None)\n\n        cif_lines = [f'data_{experiment.name}']\n\n        if expt_type is not None:\n            cif_lines.append('')\n            radiation_probe = expt_type.radiation_probe.value\n            radiation_probe = radiation_probe.replace('neutron', 'neutrons')\n            radiation_probe = radiation_probe.replace('xray', 'X-rays')\n            cif_lines.append(f'_setup_radiation {radiation_probe}')\n\n        if instrument:\n            instrument_mapping = {\n                'setup_wavelength': '_setup_wavelength',\n                'calib_twotheta_offset': '_setup_offset_2theta',\n                'setup_twotheta_bank': '_tof_parameters_2theta_bank',\n                'calib_d_to_tof_offset': '_tof_parameters_Zero',\n                'calib_d_to_tof_linear': '_tof_parameters_Dtt1',\n                'calib_d_to_tof_quad': '_tof_parameters_dtt2',\n            }\n            cif_lines.append('')\n            for local_attr_name, engine_key_name in instrument_mapping.items():\n                if hasattr(instrument, local_attr_name):\n                    attr_value = getattr(instrument, local_attr_name).value\n                    cif_lines.append(f'{engine_key_name} {attr_value}')\n\n        if peak:\n            peak_mapping = {\n                'broad_gauss_u': '_pd_instr_resolution_U',\n                'broad_gauss_v': '_pd_instr_resolution_V',\n                'broad_gauss_w': '_pd_instr_resolution_W',\n                'broad_lorentz_x': '_pd_instr_resolution_X',\n                'broad_lorentz_y': '_pd_instr_resolution_Y',\n                'broad_gauss_sigma_0': '_tof_profile_sigma0',\n                'broad_gauss_sigma_1': '_tof_profile_sigma1',\n                'broad_gauss_sigma_2': '_tof_profile_sigma2',\n                'broad_mix_beta_0': '_tof_profile_beta0',\n                'broad_mix_beta_1': '_tof_profile_beta1',\n                'asym_alpha_0': '_tof_profile_alpha0',\n                'asym_alpha_1': '_tof_profile_alpha1',\n            }\n            cif_lines.append('')\n            if expt_type.beam_mode.value == 'time-of-flight':\n                cif_lines.append('_tof_profile_peak_shape Gauss')\n            for local_attr_name, engine_key_name in peak_mapping.items():\n                if hasattr(peak, local_attr_name):\n                    attr_value = getattr(peak, local_attr_name).value\n                    cif_lines.append(f'{engine_key_name} {attr_value}')\n\n        x_data = experiment.datastore.pattern.x\n        twotheta_min = float(x_data.min())\n        twotheta_max = float(x_data.max())\n        cif_lines.append('')\n        if expt_type.beam_mode.value == 'constant wavelength':\n            cif_lines.append(f'_range_2theta_min {twotheta_min}')\n            cif_lines.append(f'_range_2theta_max {twotheta_max}')\n        elif expt_type.beam_mode.value == 'time-of-flight':\n            cif_lines.append(f'_range_time_min {twotheta_min}')\n            cif_lines.append(f'_range_time_max {twotheta_max}')\n\n        cif_lines.append('')\n        cif_lines.append('loop_')\n        cif_lines.append('_phase_label')\n        cif_lines.append('_phase_scale')\n        cif_lines.append(f'{linked_phase.name} 1.0')\n\n        if expt_type.beam_mode.value == 'constant wavelength':\n            cif_lines.append('')\n            cif_lines.append('loop_')\n            cif_lines.append('_pd_background_2theta')\n            cif_lines.append('_pd_background_intensity')\n            cif_lines.append(f'{twotheta_min} 0.0')\n            cif_lines.append(f'{twotheta_max} 0.0')\n        elif expt_type.beam_mode.value == 'time-of-flight':\n            cif_lines.append('')\n            cif_lines.append('loop_')\n            cif_lines.append('_tof_backgroundpoint_time')\n            cif_lines.append('_tof_backgroundpoint_intensity')\n            cif_lines.append(f'{twotheta_min} 0.0')\n            cif_lines.append(f'{twotheta_max} 0.0')\n\n        if expt_type.beam_mode.value == 'constant wavelength':\n            cif_lines.append('')\n            cif_lines.append('loop_')\n            cif_lines.append('_pd_meas_2theta')\n            cif_lines.append('_pd_meas_intensity')\n            cif_lines.append('_pd_meas_intensity_sigma')\n        elif expt_type.beam_mode.value == 'time-of-flight':\n            cif_lines.append('')\n            cif_lines.append('loop_')\n            cif_lines.append('_tof_meas_time')\n            cif_lines.append('_tof_meas_intensity')\n            cif_lines.append('_tof_meas_intensity_sigma')\n\n        y_data = experiment.datastore.pattern.meas\n        sy_data = experiment.datastore.pattern.meas_su\n        for x_val, y_val, sy_val in zip(x_data, y_data, sy_data):\n            cif_lines.append(f'  {x_val:.5f}   {y_val:.5f}   {sy_val:.5f}')\n\n        cryspy_experiment_cif = '\\n'.join(cif_lines)\n\n        return cryspy_experiment_cif\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_cryspy.CryspyCalculator.calculate_structure_factors","title":"<code>calculate_structure_factors(sample_model, experiment)</code>","text":"<p>Raises a NotImplementedError as HKL calculation is not implemented.</p> <p>Parameters:</p> Name Type Description Default <code>sample_model</code> <code>SampleModel</code> <p>The sample model to calculate structure factors for.</p> required <code>experiment</code> <code>Experiment</code> <p>The experiment associated with the sample models.</p> required Source code in <code>src/easydiffraction/analysis/calculators/calculator_cryspy.py</code> <pre><code>def calculate_structure_factors(\n    self,\n    sample_model: SampleModel,\n    experiment: Experiment,\n) -&gt; None:\n    \"\"\"\n    Raises a NotImplementedError as HKL calculation is not implemented.\n\n    Args:\n        sample_model: The sample model to calculate structure factors for.\n        experiment: The experiment associated with the sample models.\n    \"\"\"\n    raise NotImplementedError('HKL calculation is not implemented for CryspyCalculator.')\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_pdffit","title":"<code>calculator_pdffit</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.calculators.calculator_pdffit.PdffitCalculator","title":"<code>PdffitCalculator</code>","text":"<p>               Bases: <code>CalculatorBase</code></p> <p>Wrapper for Pdffit library.</p> Source code in <code>src/easydiffraction/analysis/calculators/calculator_pdffit.py</code> <pre><code>class PdffitCalculator(CalculatorBase):\n    \"\"\"\n    Wrapper for Pdffit library.\n    \"\"\"\n\n    engine_imported: bool = pdffit is not None\n\n    @property\n    def name(self):\n        return 'pdffit'\n\n    def calculate_structure_factors(self, sample_models, experiments):\n        # PDF doesn't compute HKL but we keep interface consistent\n        print('[pdffit] Calculating HKLs (not applicable)...')\n        return []\n\n    def _calculate_single_model_pattern(\n        self,\n        sample_model: SampleModel,\n        experiment: Experiment,\n        called_by_minimizer: bool = False,\n    ):\n        # Create PDF calculator object\n        calculator = pdffit()\n\n        # ---------------------------\n        # Set sample model parameters\n        # ---------------------------\n\n        # TODO: move CIF v2 -&gt; CIF v1 conversion to a separate module\n        # Convert the sample model to CIF supported by PDFfit\n        cif_string_v2 = sample_model.as_cif()\n        # convert to version 1 of CIF format\n        # this means: replace all dots with underscores for\n        # cases where the dot is surrounded by letters on both sides.\n        pattern = r'(?&lt;=[a-zA-Z])\\.(?=[a-zA-Z])'\n        cif_string_v1 = re.sub(pattern, '_', cif_string_v2)\n\n        # Create the PDFit structure\n        structure = pdffit_cif_parser().parse(cif_string_v1)\n\n        # Set all model parameters:\n        # space group, cell parameters, and atom sites (including ADPs)\n        calculator.add_structure(structure)\n\n        # -------------------------\n        # Set experiment parameters\n        # -------------------------\n\n        # Set some peak-related parameters\n        calculator.setvar('pscale', experiment.linked_phases[sample_model.name].scale.value)\n        calculator.setvar('delta1', experiment.peak.sharp_delta_1.value)\n        calculator.setvar('delta2', experiment.peak.sharp_delta_2.value)\n        calculator.setvar('spdiameter', experiment.peak.damp_particle_diameter.value)\n\n        # Data\n        pattern = experiment.datastore.pattern\n        x = list(pattern.x)\n        y_noise = list(np.zeros_like(pattern.x))\n\n        # Assign the data to the PDFfit calculator\n        calculator.read_data_lists(\n            stype=experiment.type.radiation_probe.value[0].upper(),\n            qmax=experiment.peak.cutoff_q.value,\n            qdamp=experiment.peak.damp_q.value,\n            r_data=x,\n            Gr_data=y_noise,\n        )\n\n        # qbroad must be set after read_data_lists\n        calculator.setvar('qbroad', experiment.peak.broad_q.value)\n\n        # -----------------\n        # Calculate pattern\n        # -----------------\n\n        # Calculate the PDF pattern\n        calculator.calc()\n\n        # Get the calculated PDF pattern\n        pattern = calculator.getpdf_fit()\n        pattern = np.array(pattern)\n\n        return pattern\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.collections","title":"<code>collections</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.collections.joint_fit_experiments","title":"<code>joint_fit_experiments</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.collections.joint_fit_experiments.JointFitExperiments","title":"<code>JointFitExperiments</code>","text":"<p>               Bases: <code>Collection</code></p> <p>Collection manager for experiments that are fitted together in a <code>joint</code> fit.</p> Source code in <code>src/easydiffraction/analysis/collections/joint_fit_experiments.py</code> <pre><code>class JointFitExperiments(Collection):\n    \"\"\"\n    Collection manager for experiments that are fitted together\n    in a `joint` fit.\n    \"\"\"\n\n    @property\n    def _type(self) -&gt; str:\n        return 'category'  # datablock or category\n\n    @property\n    def _child_class(self) -&gt; Type[JointFitExperiment]:\n        return JointFitExperiment\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimization","title":"<code>minimization</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.minimization.DiffractionMinimizer","title":"<code>DiffractionMinimizer</code>","text":"<p>Handles the fitting workflow using a pluggable minimizer.</p> Source code in <code>src/easydiffraction/analysis/minimization.py</code> <pre><code>class DiffractionMinimizer:\n    \"\"\"\n    Handles the fitting workflow using a pluggable minimizer.\n    \"\"\"\n\n    def __init__(self, selection: str = 'lmfit (leastsq)') -&gt; None:\n        self.selection: str = selection\n        self.engine: str = selection.split(' ')[0]  # Extracts 'lmfit' or 'dfols'\n        self.minimizer = MinimizerFactory.create_minimizer(selection)\n        self.results: Optional[FitResults] = None\n\n    def fit(\n        self,\n        sample_models: SampleModels,\n        experiments: Experiments,\n        calculator: Any,\n        weights: Optional[np.array] = None,\n    ) -&gt; None:\n        \"\"\"\n        Run the fitting process.\n\n        Args:\n            sample_models: Collection of sample models.\n            experiments: Collection of experiments.\n            calculator: The calculator to use for pattern generation.\n            weights: Optional weights for joint fitting.\n\n        \"\"\"\n        params = sample_models.get_free_params() + experiments.get_free_params()\n\n        if not params:\n            print('\u26a0\ufe0f No parameters selected for fitting.')\n            return None\n\n        for param in params:\n            param.start_value = param.value\n\n        def objective_function(engine_params: Dict[str, Any]) -&gt; np.ndarray:\n            return self._residual_function(\n                engine_params=engine_params,\n                parameters=params,\n                sample_models=sample_models,\n                experiments=experiments,\n                calculator=calculator,\n                weights=weights,\n            )\n\n        # Perform fitting\n        self.results = self.minimizer.fit(params, objective_function)\n\n        # Post-fit processing\n        self._process_fit_results(sample_models, experiments, calculator)\n\n    def _process_fit_results(\n        self,\n        sample_models: SampleModels,\n        experiments: Experiments,\n        calculator: CalculatorBase,\n    ) -&gt; None:\n        \"\"\"\n        Collect reliability inputs and display results after fitting.\n\n        Args:\n            sample_models: Collection of sample models.\n            experiments: Collection of experiments.\n            calculator: The calculator used for pattern generation.\n        \"\"\"\n        y_obs, y_calc, y_err = get_reliability_inputs(\n            sample_models,\n            experiments,\n            calculator,\n        )\n\n        # Placeholder for future f_obs / f_calc retrieval\n        f_obs, f_calc = None, None\n\n        if self.results:\n            self.results.display_results(\n                y_obs=y_obs,\n                y_calc=y_calc,\n                y_err=y_err,\n                f_obs=f_obs,\n                f_calc=f_calc,\n            )\n\n    def _collect_free_parameters(\n        self,\n        sample_models: SampleModels,\n        experiments: Experiments,\n    ) -&gt; List[Parameter]:\n        \"\"\"\n        Collect free parameters from sample models and experiments.\n\n        Args:\n            sample_models: Collection of sample models.\n            experiments: Collection of experiments.\n\n        Returns:\n            List of free parameters.\n        \"\"\"\n        free_params: List[Parameter] = sample_models.get_free_params() + experiments.get_free_params()\n        return free_params\n\n    def _residual_function(\n        self,\n        engine_params: Dict[str, Any],\n        parameters: List[Parameter],\n        sample_models: SampleModels,\n        experiments: Experiments,\n        calculator: CalculatorBase,\n        weights: Optional[np.array] = None,\n    ) -&gt; np.ndarray:\n        \"\"\"\n        Residual function computes the difference between measured and calculated patterns.\n        It updates the parameter values according to the optimizer-provided engine_params.\n\n        Args:\n            engine_params: Engine-specific parameter dict.\n            parameters: List of parameters being optimized.\n            sample_models: Collection of sample models.\n            experiments: Collection of experiments.\n            calculator: The calculator to use for pattern generation.\n            weights: Optional weights for joint fitting.\n\n        Returns:\n            Array of weighted residuals.\n        \"\"\"\n        # Sync parameters back to objects\n        self.minimizer._sync_result_to_parameters(parameters, engine_params)\n\n        # Prepare weights for joint fitting\n        num_expts: int = len(experiments.ids)\n        if weights is None:\n            _weights = np.ones(num_expts)\n        else:\n            _weights_list: List[float] = []\n            for id in experiments.ids:\n                _weight = weights._items[id].weight.value\n                _weights_list.append(_weight)\n            _weights = np.array(_weights_list, dtype=np.float64)\n\n        # Normalize weights so they sum to num_expts\n        # We should obtain the same reduced chi_squared when a single dataset is split into\n        # two parts and fit together. If weights sum to one, then reduced chi_squared\n        # will be half as large as expected.\n        _weights *= num_expts / np.sum(_weights)\n        residuals: List[float] = []\n\n        for (expt_id, experiment), weight in zip(experiments._items.items(), _weights):\n            # Calculate the difference between measured and calculated patterns\n            y_calc: np.ndarray = calculator.calculate_pattern(\n                sample_models,\n                experiment,\n                called_by_minimizer=True,\n            )\n            y_meas: np.ndarray = experiment.datastore.pattern.meas\n            y_meas_su: np.ndarray = experiment.datastore.pattern.meas_su\n            diff = (y_meas - y_calc) / y_meas_su\n\n            # Residuals are squared before going into reduced chi-squared\n            diff *= np.sqrt(weight)\n\n            # Append the residuals for this experiment\n            residuals.extend(diff)\n\n        return self.minimizer.tracker.track(np.array(residuals), parameters)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimization.DiffractionMinimizer.fit","title":"<code>fit(sample_models, experiments, calculator, weights=None)</code>","text":"<p>Run the fitting process.</p> <p>Parameters:</p> Name Type Description Default <code>sample_models</code> <code>SampleModels</code> <p>Collection of sample models.</p> required <code>experiments</code> <code>Experiments</code> <p>Collection of experiments.</p> required <code>calculator</code> <code>Any</code> <p>The calculator to use for pattern generation.</p> required <code>weights</code> <code>Optional[array]</code> <p>Optional weights for joint fitting.</p> <code>None</code> Source code in <code>src/easydiffraction/analysis/minimization.py</code> <pre><code>def fit(\n    self,\n    sample_models: SampleModels,\n    experiments: Experiments,\n    calculator: Any,\n    weights: Optional[np.array] = None,\n) -&gt; None:\n    \"\"\"\n    Run the fitting process.\n\n    Args:\n        sample_models: Collection of sample models.\n        experiments: Collection of experiments.\n        calculator: The calculator to use for pattern generation.\n        weights: Optional weights for joint fitting.\n\n    \"\"\"\n    params = sample_models.get_free_params() + experiments.get_free_params()\n\n    if not params:\n        print('\u26a0\ufe0f No parameters selected for fitting.')\n        return None\n\n    for param in params:\n        param.start_value = param.value\n\n    def objective_function(engine_params: Dict[str, Any]) -&gt; np.ndarray:\n        return self._residual_function(\n            engine_params=engine_params,\n            parameters=params,\n            sample_models=sample_models,\n            experiments=experiments,\n            calculator=calculator,\n            weights=weights,\n        )\n\n    # Perform fitting\n    self.results = self.minimizer.fit(params, objective_function)\n\n    # Post-fit processing\n    self._process_fit_results(sample_models, experiments, calculator)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers","title":"<code>minimizers</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.fitting_progress_tracker","title":"<code>fitting_progress_tracker</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.fitting_progress_tracker.FittingProgressTracker","title":"<code>FittingProgressTracker</code>","text":"<p>Tracks and reports the reduced chi-square during the optimization process.</p> Source code in <code>src/easydiffraction/analysis/minimizers/fitting_progress_tracker.py</code> <pre><code>class FittingProgressTracker:\n    \"\"\"\n    Tracks and reports the reduced chi-square during the optimization process.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self._iteration: int = 0\n        self._previous_chi2: Optional[float] = None\n        self._last_chi2: Optional[float] = None\n        self._last_iteration: Optional[int] = None\n        self._best_chi2: Optional[float] = None\n        self._best_iteration: Optional[int] = None\n        self._fitting_time: Optional[float] = None\n\n        self._df_rows: List[List[str]] = []\n        self._display_handle: Optional[DisplayHandle] = None\n\n    def reset(self) -&gt; None:\n        self._iteration = 0\n        self._previous_chi2 = None\n        self._last_chi2 = None\n        self._last_iteration = None\n        self._best_chi2 = None\n        self._best_iteration = None\n        self._fitting_time = None\n\n    def track(\n        self,\n        residuals: np.ndarray,\n        parameters: List[float],\n    ) -&gt; np.ndarray:\n        \"\"\"\n        Track chi-square progress during the optimization process.\n\n        Parameters:\n            residuals (np.ndarray): Array of residuals between measured and calculated data.\n            parameters (list): List of free parameters being fitted.\n\n        Returns:\n            np.ndarray: Residuals unchanged, for optimizer consumption.\n        \"\"\"\n        self._iteration += 1\n\n        reduced_chi2 = calculate_reduced_chi_square(residuals, len(parameters))\n\n        row: List[str] = []\n\n        # First iteration, initialize tracking\n        if self._previous_chi2 is None:\n            self._previous_chi2 = reduced_chi2\n            self._best_chi2 = reduced_chi2\n            self._best_iteration = self._iteration\n\n            row = [\n                str(self._iteration),\n                f'{reduced_chi2:.2f}',\n                '',\n            ]\n\n        # Improvement check\n        elif (self._previous_chi2 - reduced_chi2) / self._previous_chi2 &gt; SIGNIFICANT_CHANGE_THRESHOLD:\n            change_percent = (self._previous_chi2 - reduced_chi2) / self._previous_chi2 * 100\n\n            row = [\n                str(self._iteration),\n                f'{reduced_chi2:.2f}',\n                f'{change_percent:.1f}% \u2193',\n            ]\n\n            self._previous_chi2 = reduced_chi2\n\n        # Output if there is something new to display\n        if row:\n            self.add_tracking_info(row)\n\n        # Update best chi-square if better\n        if reduced_chi2 &lt; self._best_chi2:\n            self._best_chi2 = reduced_chi2\n            self._best_iteration = self._iteration\n\n        # Store last chi-square and iteration\n        self._last_chi2 = reduced_chi2\n        self._last_iteration = self._iteration\n\n        return residuals\n\n    @property\n    def best_chi2(self) -&gt; Optional[float]:\n        return self._best_chi2\n\n    @property\n    def best_iteration(self) -&gt; Optional[int]:\n        return self._best_iteration\n\n    @property\n    def iteration(self) -&gt; int:\n        return self._iteration\n\n    @property\n    def fitting_time(self) -&gt; Optional[float]:\n        return self._fitting_time\n\n    def start_timer(self) -&gt; None:\n        self._start_time = time.perf_counter()\n\n    def stop_timer(self) -&gt; None:\n        self._end_time = time.perf_counter()\n        self._fitting_time = self._end_time - self._start_time\n\n    def start_tracking(self, minimizer_name: str) -&gt; None:\n        print(f\"\ud83d\ude80 Starting fit process with '{minimizer_name}'...\")\n        print('\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:')\n\n        if is_notebook() and display is not None:\n            # Reset the DataFrame rows\n            self._df_rows = []\n\n            # Recreate display handle for updating the table\n            self._display_handle = DisplayHandle()\n\n            # Create placeholder for display\n            self._display_handle.display(HTML(''))\n\n            # Show empty table with headers\n            render_table(\n                columns_data=self._df_rows,\n                columns_alignment=DEFAULT_ALIGNMENTS,\n                columns_headers=DEFAULT_HEADERS,\n                display_handle=self._display_handle,\n            )\n        else:\n            # Top border\n            print('\u2552' + '\u2564'.join(['\u2550' * FIXED_WIDTH for _ in DEFAULT_HEADERS]) + '\u2555')\n\n            # Header row (all centered)\n            header_row = '\u2502' + '\u2502'.join([format_cell(h, align='center') for h in DEFAULT_HEADERS]) + '\u2502'\n            print(header_row)\n\n            # Separator\n            print('\u255e' + '\u256a'.join(['\u2550' * FIXED_WIDTH for _ in DEFAULT_HEADERS]) + '\u2561')\n\n    def add_tracking_info(self, row: List[str]) -&gt; None:\n        if is_notebook() and display is not None:\n            # Add row to DataFrame\n            self._df_rows.append(row)\n\n            # Show fully updated table\n            render_table(\n                columns_data=self._df_rows,\n                columns_alignment=DEFAULT_ALIGNMENTS,\n                columns_headers=DEFAULT_HEADERS,\n                display_handle=self._display_handle,\n            )\n        else:\n            # Alignments for each column\n            formatted_row = (\n                '\u2502' + '\u2502'.join([format_cell(cell, align=DEFAULT_ALIGNMENTS[i]) for i, cell in enumerate(row)]) + '\u2502'\n            )\n\n            # Print the new row\n            print(formatted_row)\n\n    def finish_tracking(self) -&gt; None:\n        # Add last iteration as last row\n        row: List[str] = [\n            str(self._last_iteration),\n            f'{self._last_chi2:.2f}' if self._last_chi2 is not None else '',\n            '',\n        ]\n        self.add_tracking_info(row)\n\n        # Bottom border for terminal only\n        if not is_notebook() or display is None:\n            # Bottom border for terminal only\n            print('\u2558' + '\u2567'.join(['\u2550' * FIXED_WIDTH for _ in range(len(row))]) + '\u255b')\n\n        # Print best result\n        print(f'\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is {self._best_chi2:.2f} at iteration {self._best_iteration}')\n        print('\u2705 Fitting complete.')\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.fitting_progress_tracker.FittingProgressTracker.track","title":"<code>track(residuals, parameters)</code>","text":"<p>Track chi-square progress during the optimization process.</p> <p>Parameters:</p> Name Type Description Default <code>residuals</code> <code>ndarray</code> <p>Array of residuals between measured and calculated data.</p> required <code>parameters</code> <code>list</code> <p>List of free parameters being fitted.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Residuals unchanged, for optimizer consumption.</p> Source code in <code>src/easydiffraction/analysis/minimizers/fitting_progress_tracker.py</code> <pre><code>def track(\n    self,\n    residuals: np.ndarray,\n    parameters: List[float],\n) -&gt; np.ndarray:\n    \"\"\"\n    Track chi-square progress during the optimization process.\n\n    Parameters:\n        residuals (np.ndarray): Array of residuals between measured and calculated data.\n        parameters (list): List of free parameters being fitted.\n\n    Returns:\n        np.ndarray: Residuals unchanged, for optimizer consumption.\n    \"\"\"\n    self._iteration += 1\n\n    reduced_chi2 = calculate_reduced_chi_square(residuals, len(parameters))\n\n    row: List[str] = []\n\n    # First iteration, initialize tracking\n    if self._previous_chi2 is None:\n        self._previous_chi2 = reduced_chi2\n        self._best_chi2 = reduced_chi2\n        self._best_iteration = self._iteration\n\n        row = [\n            str(self._iteration),\n            f'{reduced_chi2:.2f}',\n            '',\n        ]\n\n    # Improvement check\n    elif (self._previous_chi2 - reduced_chi2) / self._previous_chi2 &gt; SIGNIFICANT_CHANGE_THRESHOLD:\n        change_percent = (self._previous_chi2 - reduced_chi2) / self._previous_chi2 * 100\n\n        row = [\n            str(self._iteration),\n            f'{reduced_chi2:.2f}',\n            f'{change_percent:.1f}% \u2193',\n        ]\n\n        self._previous_chi2 = reduced_chi2\n\n    # Output if there is something new to display\n    if row:\n        self.add_tracking_info(row)\n\n    # Update best chi-square if better\n    if reduced_chi2 &lt; self._best_chi2:\n        self._best_chi2 = reduced_chi2\n        self._best_iteration = self._iteration\n\n    # Store last chi-square and iteration\n    self._last_chi2 = reduced_chi2\n    self._last_iteration = self._iteration\n\n    return residuals\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_base","title":"<code>minimizer_base</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_base.MinimizerBase","title":"<code>MinimizerBase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for minimizer implementations. Provides shared logic and structure for concrete minimizers.</p> Source code in <code>src/easydiffraction/analysis/minimizers/minimizer_base.py</code> <pre><code>class MinimizerBase(ABC):\n    \"\"\"\n    Abstract base class for minimizer implementations.\n    Provides shared logic and structure for concrete minimizers.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Optional[str] = None,\n        method: Optional[str] = None,\n        max_iterations: Optional[int] = None,\n    ) -&gt; None:\n        self.name: Optional[str] = name\n        self.method: Optional[str] = method\n        self.max_iterations: Optional[int] = max_iterations\n        self.result: Optional[FitResults] = None\n        self._previous_chi2: Optional[float] = None\n        self._iteration: Optional[int] = None\n        self._best_chi2: Optional[float] = None\n        self._best_iteration: Optional[int] = None\n        self._fitting_time: Optional[float] = None\n        self.tracker: FittingProgressTracker = FittingProgressTracker()\n\n    def _start_tracking(self, minimizer_name: str) -&gt; None:\n        self.tracker.reset()\n        self.tracker.start_tracking(minimizer_name)\n        self.tracker.start_timer()\n\n    def _stop_tracking(self) -&gt; None:\n        self.tracker.stop_timer()\n        self.tracker.finish_tracking()\n\n    @abstractmethod\n    def _prepare_solver_args(self, parameters: List[Any]) -&gt; Dict[str, Any]:\n        \"\"\"\n        Prepare the solver arguments directly from the list of free parameters.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def _run_solver(\n        self,\n        objective_function: Callable[..., Any],\n        engine_parameters: Dict[str, Any],\n    ) -&gt; Any:\n        pass\n\n    @abstractmethod\n    def _sync_result_to_parameters(\n        self,\n        raw_result: Any,\n        parameters: List[Any],\n    ) -&gt; None:\n        pass\n\n    def _finalize_fit(\n        self,\n        parameters: List[Any],\n        raw_result: Any,\n    ) -&gt; FitResults:\n        self._sync_result_to_parameters(parameters, raw_result)\n        success = self._check_success(raw_result)\n        self.result = FitResults(\n            success=success,\n            parameters=parameters,\n            reduced_chi_square=self.tracker.best_chi2,\n            engine_result=raw_result,\n            starting_parameters=parameters,\n            fitting_time=self.tracker.fitting_time,\n        )\n        return self.result\n\n    @abstractmethod\n    def _check_success(self, raw_result: Any) -&gt; bool:\n        \"\"\"\n        Determine whether the fit was successful.\n        This must be implemented by concrete minimizers.\n        \"\"\"\n        pass\n\n    def fit(\n        self,\n        parameters: List[Any],\n        objective_function: Callable[..., Any],\n    ) -&gt; FitResults:\n        minimizer_name = self.name or 'Unnamed Minimizer'\n        if self.method is not None:\n            minimizer_name += f' ({self.method})'\n\n        self._start_tracking(minimizer_name)\n\n        solver_args = self._prepare_solver_args(parameters)\n        raw_result = self._run_solver(objective_function, **solver_args)\n\n        self._stop_tracking()\n\n        result = self._finalize_fit(parameters, raw_result)\n\n        return result\n\n    def _objective_function(\n        self,\n        engine_params: Dict[str, Any],\n        parameters: List[Any],\n        sample_models: Any,\n        experiments: Any,\n        calculator: Any,\n    ) -&gt; np.ndarray:\n        return self._compute_residuals(\n            engine_params,\n            parameters,\n            sample_models,\n            experiments,\n            calculator,\n        )\n\n    def _create_objective_function(\n        self,\n        parameters: List[Any],\n        sample_models: Any,\n        experiments: Any,\n        calculator: Any,\n    ) -&gt; Callable[[Dict[str, Any]], np.ndarray]:\n        return lambda engine_params: self._objective_function(\n            engine_params,\n            parameters,\n            sample_models,\n            experiments,\n            calculator,\n        )\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_dfols","title":"<code>minimizer_dfols</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_dfols.DfolsMinimizer","title":"<code>DfolsMinimizer</code>","text":"<p>               Bases: <code>MinimizerBase</code></p> <p>Minimizer using the DFO-LS package (Derivative-Free Optimization for Least-Squares).</p> Source code in <code>src/easydiffraction/analysis/minimizers/minimizer_dfols.py</code> <pre><code>class DfolsMinimizer(MinimizerBase):\n    \"\"\"\n    Minimizer using the DFO-LS package (Derivative-Free Optimization for Least-Squares).\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str = 'dfols',\n        max_iterations: int = DEFAULT_MAX_ITERATIONS,\n        **kwargs: Any,\n    ) -&gt; None:\n        super().__init__(name=name, method=None, max_iterations=max_iterations)\n\n    def _prepare_solver_args(self, parameters: List[Any]) -&gt; Dict[str, Any]:\n        x0 = []\n        bounds_lower = []\n        bounds_upper = []\n        for param in parameters:\n            x0.append(param.value)\n            bounds_lower.append(param.min if param.min is not None else -np.inf)\n            bounds_upper.append(param.max if param.max is not None else np.inf)\n        bounds = (np.array(bounds_lower), np.array(bounds_upper))\n        return {'x0': np.array(x0), 'bounds': bounds}\n\n    def _run_solver(self, objective_function: Any, **kwargs: Any) -&gt; Any:\n        x0 = kwargs.get('x0')\n        bounds = kwargs.get('bounds')\n        return solve(objective_function, x0=x0, bounds=bounds, maxfun=self.max_iterations)\n\n    def _sync_result_to_parameters(\n        self,\n        parameters: List[Any],\n        raw_result: Any,\n    ) -&gt; None:\n        \"\"\"\n        Synchronizes the result from the solver to the parameters.\n\n        Args:\n            parameters: List of parameters being optimized.\n            raw_result: The result object returned by the solver.\n        \"\"\"\n        # Ensure compatibility with raw_result coming from dfols.solve()\n        if hasattr(raw_result, 'x'):\n            result_values = raw_result.x\n        else:\n            result_values = raw_result  # fallback for raw_result being directly a list/array\n\n        for i, param in enumerate(parameters):\n            param.value = result_values[i]\n            # DFO-LS doesn't provide uncertainties; set to None or calculate later if needed\n            param.uncertainty = None\n\n    def _check_success(self, raw_result: Any) -&gt; bool:\n        \"\"\"\n        Determines success from DFO-LS result dictionary.\n\n        Args:\n            raw_result: The result object returned by the solver.\n\n        Returns:\n            True if the optimization was successful, False otherwise.\n        \"\"\"\n        return raw_result.flag == raw_result.EXIT_SUCCESS\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_factory","title":"<code>minimizer_factory</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_factory.MinimizerFactory","title":"<code>MinimizerFactory</code>","text":"Source code in <code>src/easydiffraction/analysis/minimizers/minimizer_factory.py</code> <pre><code>class MinimizerFactory:\n    _available_minimizers: Dict[str, Dict[str, Any]] = {\n        'lmfit': {\n            'engine': 'lmfit',\n            'method': 'leastsq',\n            'description': 'LMFIT library using the default Levenberg-Marquardt least squares method',\n            'class': LmfitMinimizer,\n        },\n        'lmfit (leastsq)': {\n            'engine': 'lmfit',\n            'method': 'leastsq',\n            'description': 'LMFIT library with Levenberg-Marquardt least squares method',\n            'class': LmfitMinimizer,\n        },\n        'lmfit (least_squares)': {\n            'engine': 'lmfit',\n            'method': 'least_squares',\n            'description': 'LMFIT library with SciPy\u2019s trust region reflective algorithm',\n            'class': LmfitMinimizer,\n        },\n        'dfols': {\n            'engine': 'dfols',\n            'method': None,\n            'description': 'DFO-LS library for derivative-free least-squares optimization',\n            'class': DfolsMinimizer,\n        },\n    }\n\n    @classmethod\n    def list_available_minimizers(cls) -&gt; List[str]:\n        \"\"\"\n        List all available minimizers.\n\n        Returns:\n            A list of minimizer names.\n        \"\"\"\n        return list(cls._available_minimizers.keys())\n\n    @classmethod\n    def show_available_minimizers(cls) -&gt; None:\n        \"\"\"\n        Display a table of available minimizers and their descriptions.\n        \"\"\"\n        columns_headers: List[str] = ['Minimizer', 'Description']\n        columns_alignment = ['left', 'left']\n        columns_data: List[List[str]] = []\n        for name, config in cls._available_minimizers.items():\n            description: str = config.get('description', 'No description provided.')\n            columns_data.append([name, description])\n\n        print(paragraph('Supported minimizers'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=columns_data,\n        )\n\n    @classmethod\n    def create_minimizer(cls, selection: str) -&gt; MinimizerBase:\n        \"\"\"\n        Create a minimizer instance based on the selection.\n\n        Args:\n            selection: The name of the minimizer to create.\n\n        Returns:\n            An instance of the selected minimizer.\n\n        Raises:\n            ValueError: If the selection is not a valid minimizer.\n        \"\"\"\n        config = cls._available_minimizers.get(selection)\n        if not config:\n            raise ValueError(f\"Unknown minimizer '{selection}'. Use one of {cls.list_available_minimizers()}\")\n\n        minimizer_class: Type[MinimizerBase] = config.get('class')\n        method: Optional[str] = config.get('method')\n\n        kwargs: Dict[str, Any] = {}\n        if method is not None:\n            kwargs['method'] = method\n\n        return minimizer_class(**kwargs)\n\n    @classmethod\n    def register_minimizer(\n        cls,\n        name: str,\n        minimizer_cls: Type[MinimizerBase],\n        method: Optional[str] = None,\n        description: str = 'No description provided.',\n    ) -&gt; None:\n        \"\"\"\n        Register a new minimizer.\n\n        Args:\n            name: The name of the minimizer.\n            minimizer_cls: The class of the minimizer.\n            method: The method used by the minimizer (optional).\n            description: A description of the minimizer.\n        \"\"\"\n        cls._available_minimizers[name] = {\n            'engine': name,\n            'method': method,\n            'description': description,\n            'class': minimizer_cls,\n        }\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_factory.MinimizerFactory.create_minimizer","title":"<code>create_minimizer(selection)</code>  <code>classmethod</code>","text":"<p>Create a minimizer instance based on the selection.</p> <p>Parameters:</p> Name Type Description Default <code>selection</code> <code>str</code> <p>The name of the minimizer to create.</p> required <p>Returns:</p> Type Description <code>MinimizerBase</code> <p>An instance of the selected minimizer.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the selection is not a valid minimizer.</p> Source code in <code>src/easydiffraction/analysis/minimizers/minimizer_factory.py</code> <pre><code>@classmethod\ndef create_minimizer(cls, selection: str) -&gt; MinimizerBase:\n    \"\"\"\n    Create a minimizer instance based on the selection.\n\n    Args:\n        selection: The name of the minimizer to create.\n\n    Returns:\n        An instance of the selected minimizer.\n\n    Raises:\n        ValueError: If the selection is not a valid minimizer.\n    \"\"\"\n    config = cls._available_minimizers.get(selection)\n    if not config:\n        raise ValueError(f\"Unknown minimizer '{selection}'. Use one of {cls.list_available_minimizers()}\")\n\n    minimizer_class: Type[MinimizerBase] = config.get('class')\n    method: Optional[str] = config.get('method')\n\n    kwargs: Dict[str, Any] = {}\n    if method is not None:\n        kwargs['method'] = method\n\n    return minimizer_class(**kwargs)\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_factory.MinimizerFactory.list_available_minimizers","title":"<code>list_available_minimizers()</code>  <code>classmethod</code>","text":"<p>List all available minimizers.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>A list of minimizer names.</p> Source code in <code>src/easydiffraction/analysis/minimizers/minimizer_factory.py</code> <pre><code>@classmethod\ndef list_available_minimizers(cls) -&gt; List[str]:\n    \"\"\"\n    List all available minimizers.\n\n    Returns:\n        A list of minimizer names.\n    \"\"\"\n    return list(cls._available_minimizers.keys())\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_factory.MinimizerFactory.register_minimizer","title":"<code>register_minimizer(name, minimizer_cls, method=None, description='No description provided.')</code>  <code>classmethod</code>","text":"<p>Register a new minimizer.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the minimizer.</p> required <code>minimizer_cls</code> <code>Type[MinimizerBase]</code> <p>The class of the minimizer.</p> required <code>method</code> <code>Optional[str]</code> <p>The method used by the minimizer (optional).</p> <code>None</code> <code>description</code> <code>str</code> <p>A description of the minimizer.</p> <code>'No description provided.'</code> Source code in <code>src/easydiffraction/analysis/minimizers/minimizer_factory.py</code> <pre><code>@classmethod\ndef register_minimizer(\n    cls,\n    name: str,\n    minimizer_cls: Type[MinimizerBase],\n    method: Optional[str] = None,\n    description: str = 'No description provided.',\n) -&gt; None:\n    \"\"\"\n    Register a new minimizer.\n\n    Args:\n        name: The name of the minimizer.\n        minimizer_cls: The class of the minimizer.\n        method: The method used by the minimizer (optional).\n        description: A description of the minimizer.\n    \"\"\"\n    cls._available_minimizers[name] = {\n        'engine': name,\n        'method': method,\n        'description': description,\n        'class': minimizer_cls,\n    }\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_factory.MinimizerFactory.show_available_minimizers","title":"<code>show_available_minimizers()</code>  <code>classmethod</code>","text":"<p>Display a table of available minimizers and their descriptions.</p> Source code in <code>src/easydiffraction/analysis/minimizers/minimizer_factory.py</code> <pre><code>@classmethod\ndef show_available_minimizers(cls) -&gt; None:\n    \"\"\"\n    Display a table of available minimizers and their descriptions.\n    \"\"\"\n    columns_headers: List[str] = ['Minimizer', 'Description']\n    columns_alignment = ['left', 'left']\n    columns_data: List[List[str]] = []\n    for name, config in cls._available_minimizers.items():\n        description: str = config.get('description', 'No description provided.')\n        columns_data.append([name, description])\n\n    print(paragraph('Supported minimizers'))\n    render_table(\n        columns_headers=columns_headers,\n        columns_alignment=columns_alignment,\n        columns_data=columns_data,\n    )\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_lmfit","title":"<code>minimizer_lmfit</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.minimizers.minimizer_lmfit.LmfitMinimizer","title":"<code>LmfitMinimizer</code>","text":"<p>               Bases: <code>MinimizerBase</code></p> <p>Minimizer using the lmfit package.</p> Source code in <code>src/easydiffraction/analysis/minimizers/minimizer_lmfit.py</code> <pre><code>class LmfitMinimizer(MinimizerBase):\n    \"\"\"\n    Minimizer using the lmfit package.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str = 'lmfit',\n        method: str = DEFAULT_METHOD,\n        max_iterations: int = DEFAULT_MAX_ITERATIONS,\n    ) -&gt; None:\n        super().__init__(\n            name=name,\n            method=method,\n            max_iterations=max_iterations,\n        )\n\n    def _prepare_solver_args(\n        self,\n        parameters: List[Any],\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Prepares the solver arguments for the lmfit minimizer.\n\n        Args:\n            parameters: List of parameters to be optimized.\n\n        Returns:\n            A dictionary containing the prepared lmfit.Parameters object.\n        \"\"\"\n        engine_parameters = lmfit.Parameters()\n        for param in parameters:\n            engine_parameters.add(\n                name=param.minimizer_uid,\n                value=param.value,\n                vary=param.free,\n                min=param.min,\n                max=param.max,\n            )\n        return {'engine_parameters': engine_parameters}\n\n    def _run_solver(self, objective_function: Any, **kwargs: Any) -&gt; Any:\n        \"\"\"\n        Runs the lmfit solver.\n\n        Args:\n            objective_function: The objective function to minimize.\n            **kwargs: Additional arguments for the solver.\n\n        Returns:\n            The result of the lmfit minimization.\n        \"\"\"\n        engine_parameters = kwargs.get('engine_parameters')\n\n        return lmfit.minimize(\n            objective_function,\n            params=engine_parameters,\n            method=self.method,\n            nan_policy='propagate',\n            max_nfev=self.max_iterations,\n        )\n\n    def _sync_result_to_parameters(\n        self,\n        parameters: List[Any],\n        raw_result: Any,\n    ) -&gt; None:\n        \"\"\"\n        Synchronizes the result from the solver to the parameters.\n\n        Args:\n            parameters: List of parameters being optimized.\n            raw_result: The result object returned by the solver.\n        \"\"\"\n        if hasattr(raw_result, 'params'):\n            param_values = raw_result.params\n        else:\n            param_values = raw_result  # fallback if params attribute is not present\n\n        for param in parameters:\n            param_result = param_values.get(param.minimizer_uid)\n            if param_result is not None:\n                param.value = param_result.value\n                param.uncertainty = getattr(param_result, 'stderr', None)\n\n    def _check_success(self, raw_result: Any) -&gt; bool:\n        \"\"\"\n        Determines success from lmfit MinimizerResult.\n\n        Args:\n            raw_result: The result object returned by the solver.\n\n        Returns:\n            True if the optimization was successful, False otherwise.\n        \"\"\"\n        return getattr(raw_result, 'success', False)\n\n    def _iteration_callback(\n        self,\n        params: lmfit.Parameters,\n        iter: int,\n        resid: Any,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Callback function for each iteration of the minimizer.\n\n        Args:\n            params: The current parameters.\n            iter: The current iteration number.\n            resid: The residuals.\n            *args: Additional positional arguments.\n            **kwargs: Additional keyword arguments.\n        \"\"\"\n        self._iteration = iter\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.reliability_factors","title":"<code>reliability_factors</code>","text":""},{"location":"api-reference/analysis/#easydiffraction.analysis.reliability_factors.calculate_r_factor","title":"<code>calculate_r_factor(y_obs, y_calc)</code>","text":"<p>Calculate the R-factor (reliability factor) between observed and calculated data.</p> <p>Parameters:</p> Name Type Description Default <code>y_obs</code> <code>ndarray</code> <p>Observed data points.</p> required <code>y_calc</code> <code>ndarray</code> <p>Calculated data points.</p> required <p>Returns:</p> Type Description <code>float</code> <p>R-factor value.</p> Source code in <code>src/easydiffraction/analysis/reliability_factors.py</code> <pre><code>def calculate_r_factor(\n    y_obs: np.ndarray,\n    y_calc: np.ndarray,\n) -&gt; float:\n    \"\"\"\n    Calculate the R-factor (reliability factor) between observed and calculated data.\n\n    Args:\n        y_obs: Observed data points.\n        y_calc: Calculated data points.\n\n    Returns:\n        R-factor value.\n    \"\"\"\n    y_obs = np.asarray(y_obs)\n    y_calc = np.asarray(y_calc)\n    numerator = np.sum(np.abs(y_obs - y_calc))\n    denominator = np.sum(np.abs(y_obs))\n    return numerator / denominator if denominator != 0 else np.nan\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.reliability_factors.calculate_r_factor_squared","title":"<code>calculate_r_factor_squared(y_obs, y_calc)</code>","text":"<p>Calculate the R-factor squared between observed and calculated data.</p> <p>Parameters:</p> Name Type Description Default <code>y_obs</code> <code>ndarray</code> <p>Observed data points.</p> required <code>y_calc</code> <code>ndarray</code> <p>Calculated data points.</p> required <p>Returns:</p> Type Description <code>float</code> <p>R-factor squared value.</p> Source code in <code>src/easydiffraction/analysis/reliability_factors.py</code> <pre><code>def calculate_r_factor_squared(\n    y_obs: np.ndarray,\n    y_calc: np.ndarray,\n) -&gt; float:\n    \"\"\"\n    Calculate the R-factor squared between observed and calculated data.\n\n    Args:\n        y_obs: Observed data points.\n        y_calc: Calculated data points.\n\n    Returns:\n        R-factor squared value.\n    \"\"\"\n    y_obs = np.asarray(y_obs)\n    y_calc = np.asarray(y_calc)\n    numerator = np.sum((y_obs - y_calc) ** 2)\n    denominator = np.sum(y_obs**2)\n    return np.sqrt(numerator / denominator) if denominator != 0 else np.nan\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.reliability_factors.calculate_rb_factor","title":"<code>calculate_rb_factor(y_obs, y_calc)</code>","text":"<p>Calculate the Bragg R-factor between observed and calculated data.</p> <p>Parameters:</p> Name Type Description Default <code>y_obs</code> <code>ndarray</code> <p>Observed data points.</p> required <code>y_calc</code> <code>ndarray</code> <p>Calculated data points.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Bragg R-factor value.</p> Source code in <code>src/easydiffraction/analysis/reliability_factors.py</code> <pre><code>def calculate_rb_factor(\n    y_obs: np.ndarray,\n    y_calc: np.ndarray,\n) -&gt; float:\n    \"\"\"\n    Calculate the Bragg R-factor between observed and calculated data.\n\n    Args:\n        y_obs: Observed data points.\n        y_calc: Calculated data points.\n\n    Returns:\n        Bragg R-factor value.\n    \"\"\"\n    y_obs = np.asarray(y_obs)\n    y_calc = np.asarray(y_calc)\n    numerator = np.sum(np.abs(y_obs - y_calc))\n    denominator = np.sum(y_obs)\n    return numerator / denominator if denominator != 0 else np.nan\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.reliability_factors.calculate_reduced_chi_square","title":"<code>calculate_reduced_chi_square(residuals, num_parameters)</code>","text":"<p>Calculate the reduced chi-square statistic.</p> <p>Parameters:</p> Name Type Description Default <code>residuals</code> <code>ndarray</code> <p>Residuals between observed and calculated data.</p> required <code>num_parameters</code> <code>int</code> <p>Number of free parameters used in the model.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Reduced chi-square value.</p> Source code in <code>src/easydiffraction/analysis/reliability_factors.py</code> <pre><code>def calculate_reduced_chi_square(\n    residuals: np.ndarray,\n    num_parameters: int,\n) -&gt; float:\n    \"\"\"\n    Calculate the reduced chi-square statistic.\n\n    Args:\n        residuals: Residuals between observed and calculated data.\n        num_parameters: Number of free parameters used in the model.\n\n    Returns:\n        Reduced chi-square value.\n    \"\"\"\n    residuals = np.asarray(residuals)\n    chi_square = np.sum(residuals**2)\n    n_points = len(residuals)\n    dof = n_points - num_parameters\n    if dof &gt; 0:\n        return chi_square / dof\n    else:\n        return np.nan\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.reliability_factors.calculate_weighted_r_factor","title":"<code>calculate_weighted_r_factor(y_obs, y_calc, weights)</code>","text":"<p>Calculate the weighted R-factor between observed and calculated data.</p> <p>Parameters:</p> Name Type Description Default <code>y_obs</code> <code>ndarray</code> <p>Observed data points.</p> required <code>y_calc</code> <code>ndarray</code> <p>Calculated data points.</p> required <code>weights</code> <code>ndarray</code> <p>Weights for each data point.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Weighted R-factor value.</p> Source code in <code>src/easydiffraction/analysis/reliability_factors.py</code> <pre><code>def calculate_weighted_r_factor(\n    y_obs: np.ndarray,\n    y_calc: np.ndarray,\n    weights: np.ndarray,\n) -&gt; float:\n    \"\"\"\n    Calculate the weighted R-factor between observed and calculated data.\n\n    Args:\n        y_obs: Observed data points.\n        y_calc: Calculated data points.\n        weights: Weights for each data point.\n\n    Returns:\n        Weighted R-factor value.\n    \"\"\"\n    y_obs = np.asarray(y_obs)\n    y_calc = np.asarray(y_calc)\n    weights = np.asarray(weights)\n    numerator = np.sum(weights * (y_obs - y_calc) ** 2)\n    denominator = np.sum(weights * y_obs**2)\n    return np.sqrt(numerator / denominator) if denominator != 0 else np.nan\n</code></pre>"},{"location":"api-reference/analysis/#easydiffraction.analysis.reliability_factors.get_reliability_inputs","title":"<code>get_reliability_inputs(sample_models, experiments, calculator)</code>","text":"<p>Collect observed and calculated data points for reliability calculations.</p> <p>Parameters:</p> Name Type Description Default <code>sample_models</code> <code>SampleModels</code> <p>Collection of sample models.</p> required <code>experiments</code> <code>Experiments</code> <p>Collection of experiments.</p> required <code>calculator</code> <code>CalculatorBase</code> <p>The calculator to use for pattern generation.</p> required <p>Returns:</p> Type Description <code>Tuple[ndarray, ndarray, Optional[ndarray]]</code> <p>Tuple containing arrays of (observed values, calculated values, error values)</p> Source code in <code>src/easydiffraction/analysis/reliability_factors.py</code> <pre><code>def get_reliability_inputs(\n    sample_models: SampleModels,\n    experiments: Experiments,\n    calculator: CalculatorBase,\n) -&gt; Tuple[np.ndarray, np.ndarray, Optional[np.ndarray]]:\n    \"\"\"\n    Collect observed and calculated data points for reliability calculations.\n\n    Args:\n        sample_models: Collection of sample models.\n        experiments: Collection of experiments.\n        calculator: The calculator to use for pattern generation.\n\n    Returns:\n        Tuple containing arrays of (observed values, calculated values, error values)\n    \"\"\"\n    y_obs_all = []\n    y_calc_all = []\n    y_err_all = []\n    for expt_name, experiment in experiments._items.items():\n        y_calc = calculator.calculate_pattern(sample_models, experiment)\n        y_meas = experiment.datastore.pattern.meas\n        y_meas_su = experiment.datastore.pattern.meas_su\n\n        if y_meas is not None and y_calc is not None:\n            # If standard uncertainty is not provided, use ones\n            if y_meas_su is None:\n                y_meas_su = np.ones_like(y_meas)\n\n            y_obs_all.extend(y_meas)\n            y_calc_all.extend(y_calc)\n            y_err_all.extend(y_meas_su)\n\n    return (\n        np.array(y_obs_all),\n        np.array(y_calc_all),\n        np.array(y_err_all) if y_err_all else None,\n    )\n</code></pre>"},{"location":"api-reference/core/","title":"core","text":""},{"location":"api-reference/core/#easydiffraction.core","title":"<code>core</code>","text":""},{"location":"api-reference/core/#easydiffraction.core.objects","title":"<code>objects</code>","text":""},{"location":"api-reference/core/#easydiffraction.core.objects.Collection","title":"<code>Collection</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for collections like AtomSites, LinkedPhases, SampleModels, Experiments, etc.</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>class Collection(ABC):\n    \"\"\"\n    Base class for collections like AtomSites, LinkedPhases, SampleModels,\n    Experiments, etc.\n    \"\"\"\n\n    @property\n    @abstractmethod\n    def _child_class(self):\n        return None\n\n    def __init__(self, parent=None):\n        self._parent = parent  # Parent datablock\n        self._datablock_id = None  # Parent datablock name to be set by the parent\n        self._items = {}\n\n    def __getitem__(self, key: str) -&gt; Union[Component, 'Collection']:\n        return self._items[key]\n\n    def __iter__(self) -&gt; Iterator[Union[Component, 'Collection']]:\n        return iter(self._items.values())\n\n    @property\n    def datablock_id(self):\n        return self._datablock_id\n\n    @datablock_id.setter\n    def datablock_id(self, new_id):\n        self._datablock_id = new_id\n        for param in self.get_all_params():\n            param.datablock_id = new_id\n\n    def add(self, *args, **kwargs):\n        \"\"\"\n        Add a new item to the collection. The item must be a subclass of\n        Component.\n        \"\"\"\n        if self._child_class is None:\n            raise ValueError('Child class is not defined.')\n        child_obj = self._child_class(*args, **kwargs)\n        child_obj.datablock_id = self.datablock_id  # Setting the datablock_id to update its child parameters\n        child_obj.entry_id = child_obj.entry_id  # Forcing the entry_id to be reset to update its child parameters\n        self._items[child_obj._entry_id] = child_obj\n\n        # Call on_item_added if it exists, i.e. defined in the derived class\n        if hasattr(self, 'on_item_added'):\n            self.on_item_added(child_obj)\n\n    def get_all_params(self):\n        params = []\n        for item in self._items.values():\n            if isinstance(item, Datablock):\n                datablock = item\n                for datablock_item in datablock.items():\n                    if isinstance(datablock_item, Component):\n                        component = datablock_item\n                        for param in component.get_all_params():\n                            params.append(param)\n                    elif isinstance(datablock_item, Collection):\n                        collection = datablock_item\n                        for component in collection:\n                            for param in component.get_all_params():\n                                params.append(param)\n            elif isinstance(item, Component):\n                component = item\n                for param in component.get_all_params():\n                    params.append(param)\n            else:\n                raise TypeError(f'Expected a Component or Datablock, got {type(item)}')\n        return params\n\n    def get_fittable_params(self) -&gt; List[Parameter]:\n        all_params = self.get_all_params()\n        params = []\n        for param in all_params:\n            if hasattr(param, 'free') and not param.constrained:\n                params.append(param)\n        return params\n\n    def get_free_params(self) -&gt; List[Parameter]:\n        fittable_params = self.get_fittable_params()\n        params = []\n        for param in fittable_params:\n            if param.free:\n                params.append(param)\n        return params\n\n    def as_cif(self) -&gt; str:\n        lines = []\n        if self._type == 'category':\n            for idx, item in enumerate(self._items.values()):\n                params = item.as_dict()\n                category_key = item.cif_category_key\n                # Keys\n                keys = [f'_{category_key}.{param_key}' for param_key in params.keys()]\n                # Values. If the value is a string and contains spaces, add quotes\n                values = []\n                for value in params.values():\n                    value = f'{value}'\n                    if ' ' in value:\n                        value = f'\"{value}\"'\n                    values.append(value)\n                # Header is added only for the first item\n                if idx == 0:\n                    lines.append('loop_')\n                    header = '\\n'.join(keys)\n                    lines.append(header)\n                line = ' '.join(values)\n                lines.append(line)\n        return '\\n'.join(lines)\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.objects.Collection.add","title":"<code>add(*args, **kwargs)</code>","text":"<p>Add a new item to the collection. The item must be a subclass of Component.</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>def add(self, *args, **kwargs):\n    \"\"\"\n    Add a new item to the collection. The item must be a subclass of\n    Component.\n    \"\"\"\n    if self._child_class is None:\n        raise ValueError('Child class is not defined.')\n    child_obj = self._child_class(*args, **kwargs)\n    child_obj.datablock_id = self.datablock_id  # Setting the datablock_id to update its child parameters\n    child_obj.entry_id = child_obj.entry_id  # Forcing the entry_id to be reset to update its child parameters\n    self._items[child_obj._entry_id] = child_obj\n\n    # Call on_item_added if it exists, i.e. defined in the derived class\n    if hasattr(self, 'on_item_added'):\n        self.on_item_added(child_obj)\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.objects.Component","title":"<code>Component</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for standard components, like Cell, Peak, etc.</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>class Component(ABC):\n    \"\"\"\n    Base class for standard components, like Cell, Peak, etc.\n    \"\"\"\n\n    @property\n    @abstractmethod\n    def category_key(self):\n        \"\"\"\n        Must be implemented in subclasses to return the ED category name.\n        Can differ from cif_category_key.\n        \"\"\"\n        pass\n\n    @property\n    @abstractmethod\n    def cif_category_key(self):\n        \"\"\"\n        Must be implemented in subclasses to return the CIF category name.\n        \"\"\"\n        pass\n\n    def __init__(self):\n        self._locked = False  # If adding new attributes is locked\n\n        self._datablock_id = None  # Parent datablock name to be set by the parent\n        self._entry_id = None  # Parent collection entry id to be set by the parent\n\n        # TODO: Currently, it is not used. Planned to be used for displaying\n        #  the parameters in the specific order.\n        self._ordered_attrs: List[str] = []\n\n    def __getattr__(self, name: str) -&gt; Any:\n        \"\"\"\n        If the attribute is a Parameter or Descriptor, return its value by default\n        \"\"\"\n        attr = self.__dict__.get(name, None)\n        if isinstance(attr, (Descriptor, Parameter)):\n            return attr.value\n        raise AttributeError(f'{name} not found in {self}')\n\n    def __setattr__(self, name: str, value: Any) -&gt; None:\n        \"\"\"\n        If an object is locked for adding new attributes, raise an error.\n        If the attribute 'name' does not exist, add it.\n        If the attribute 'name' exists and is a Parameter or Descriptor, set its value.\n        \"\"\"\n        if hasattr(self, '_locked') and self._locked:\n            if not hasattr(self, name):\n                print(error(f\"Cannot add new parameter '{name}'\"))\n                return\n\n        # Try to get the attribute from the instance's dictionary\n        attr = self.__dict__.get(name, None)\n\n        # If the attribute is not set, and it is a Parameter or Descriptor,\n        # set its category_key and cif_category_key to the current category_key\n        # and cif_category_key and add it to the component.\n        # Also add its name to the list of ordered attributes\n        if attr is None:\n            if isinstance(value, (Descriptor, Parameter)):\n                value.category_key = self.category_key\n                value.cif_category_key = self.cif_category_key\n                self._ordered_attrs.append(name)\n            super().__setattr__(name, value)\n        # If the attribute is already set and is a Parameter or Descriptor,\n        # update its value. Else, allow normal reassignment\n        else:\n            if isinstance(attr, (Descriptor, Parameter)):\n                attr.value = value\n            else:\n                super().__setattr__(name, value)\n\n    @property\n    def datablock_id(self):\n        return self._datablock_id\n\n    @datablock_id.setter\n    def datablock_id(self, new_id):\n        self._datablock_id = new_id\n        # For each parameter in this component, also update its datablock_id\n        for param in self.get_all_params():\n            param.datablock_id = new_id\n\n    @property\n    def entry_id(self):\n        return self._entry_id\n\n    @entry_id.setter\n    def entry_id(self, new_id):\n        self._entry_id = new_id\n        # For each parameter in the component, set the entry_id\n        for param in self.get_all_params():\n            param.collection_entry_id = new_id\n\n    def get_all_params(self):\n        attr_objs = []\n        for attr_name in dir(self):\n            attr_obj = getattr(self, attr_name)\n            if isinstance(attr_obj, (Descriptor, Parameter)):\n                attr_objs.append(attr_obj)\n        return attr_objs\n\n    def as_dict(self) -&gt; Dict[str, Any]:\n        d = {}\n\n        for attr_name in dir(self):\n            if attr_name.startswith('_'):\n                continue\n\n            attr_obj = getattr(self, attr_name)\n            if not isinstance(attr_obj, (Descriptor, Parameter)):\n                continue\n\n            key = attr_obj.cif_name\n            value = attr_obj.value\n            d[key] = value\n\n        return d\n\n    def as_cif(self) -&gt; str:\n        if not self.cif_category_key:\n            raise ValueError('cif_category_key must be defined in the derived class.')\n\n        lines = []\n\n        for attr_name in dir(self):\n            if attr_name.startswith('_'):\n                continue\n\n            attr_obj = getattr(self, attr_name)\n            if not isinstance(attr_obj, (Descriptor, Parameter)):\n                continue\n\n            key = f'_{self.cif_category_key}.{attr_obj.cif_name}'\n            value = attr_obj.value\n\n            if value is None:\n                continue\n\n            if isinstance(value, str) and ' ' in value:\n                value = f'\"{value}\"'\n\n            line = f'{key}  {value}'\n            lines.append(line)\n\n        return '\\n'.join(lines)\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.objects.Component.__getattr__","title":"<code>__getattr__(name)</code>","text":"<p>If the attribute is a Parameter or Descriptor, return its value by default</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>def __getattr__(self, name: str) -&gt; Any:\n    \"\"\"\n    If the attribute is a Parameter or Descriptor, return its value by default\n    \"\"\"\n    attr = self.__dict__.get(name, None)\n    if isinstance(attr, (Descriptor, Parameter)):\n        return attr.value\n    raise AttributeError(f'{name} not found in {self}')\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.objects.Component.__setattr__","title":"<code>__setattr__(name, value)</code>","text":"<p>If an object is locked for adding new attributes, raise an error. If the attribute 'name' does not exist, add it. If the attribute 'name' exists and is a Parameter or Descriptor, set its value.</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>def __setattr__(self, name: str, value: Any) -&gt; None:\n    \"\"\"\n    If an object is locked for adding new attributes, raise an error.\n    If the attribute 'name' does not exist, add it.\n    If the attribute 'name' exists and is a Parameter or Descriptor, set its value.\n    \"\"\"\n    if hasattr(self, '_locked') and self._locked:\n        if not hasattr(self, name):\n            print(error(f\"Cannot add new parameter '{name}'\"))\n            return\n\n    # Try to get the attribute from the instance's dictionary\n    attr = self.__dict__.get(name, None)\n\n    # If the attribute is not set, and it is a Parameter or Descriptor,\n    # set its category_key and cif_category_key to the current category_key\n    # and cif_category_key and add it to the component.\n    # Also add its name to the list of ordered attributes\n    if attr is None:\n        if isinstance(value, (Descriptor, Parameter)):\n            value.category_key = self.category_key\n            value.cif_category_key = self.cif_category_key\n            self._ordered_attrs.append(name)\n        super().__setattr__(name, value)\n    # If the attribute is already set and is a Parameter or Descriptor,\n    # update its value. Else, allow normal reassignment\n    else:\n        if isinstance(attr, (Descriptor, Parameter)):\n            attr.value = value\n        else:\n            super().__setattr__(name, value)\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.objects.Component.category_key","title":"<code>category_key</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Must be implemented in subclasses to return the ED category name. Can differ from cif_category_key.</p>"},{"location":"api-reference/core/#easydiffraction.core.objects.Component.cif_category_key","title":"<code>cif_category_key</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Must be implemented in subclasses to return the CIF category name.</p>"},{"location":"api-reference/core/#easydiffraction.core.objects.Datablock","title":"<code>Datablock</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for Sample Model and Experiment data blocks.</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>class Datablock(ABC):\n    \"\"\"\n    Base class for Sample Model and Experiment data blocks.\n    \"\"\"\n\n    # TODO: Consider unifying with class Component?\n\n    def __init__(self):\n        self._name = None\n\n    def __setattr__(self, name, value):\n        # TODO: compare with class Component\n        # If the value is a Component or Collection:\n        # - set its datablock_id to the current datablock name\n        # - add it to the datablock\n        if isinstance(value, (Component, Collection)):\n            value.datablock_id = self._name\n        super().__setattr__(name, value)\n\n    def items(self):\n        \"\"\"\n        Returns a list of both components and collections in the\n        data block.\n        \"\"\"\n        attr_objs = []\n        for attr_name in dir(self):\n            if attr_name.startswith('_'):\n                continue\n            attr_obj = getattr(self, attr_name)\n            if isinstance(attr_obj, (Component, Collection)):\n                attr_objs.append(attr_obj)\n        return attr_objs\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, new_name):\n        self._name = new_name\n        # For each component/collection in this datablock,\n        # also update its datablock_id\n        for item in self.items():\n            item.datablock_id = new_name\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.objects.Datablock.items","title":"<code>items()</code>","text":"<p>Returns a list of both components and collections in the data block.</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>def items(self):\n    \"\"\"\n    Returns a list of both components and collections in the\n    data block.\n    \"\"\"\n    attr_objs = []\n    for attr_name in dir(self):\n        if attr_name.startswith('_'):\n            continue\n        attr_obj = getattr(self, attr_name)\n        if isinstance(attr_obj, (Component, Collection)):\n            attr_objs.append(attr_obj)\n    return attr_objs\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.objects.Descriptor","title":"<code>Descriptor</code>","text":"<p>Base class for descriptors (non-refinable attributes).</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>class Descriptor:\n    \"\"\"\n    Base class for descriptors (non-refinable attributes).\n    \"\"\"\n\n    def __init__(\n        self,\n        value: Any,  # Value of the parameter\n        name: str,  # ED parameter name (to access it in the code)\n        cif_name: str,  # CIF parameter name (to show it in the CIF)\n        pretty_name: Optional[str] = None,  # Pretty name (to show it in the table)\n        datablock_id: Optional[str] = None,  # Parent datablock name\n        category_key: Optional[str] = None,  # ED parent category name\n        cif_category_key: Optional[str] = None,  # CIF parent category name\n        collection_entry_id: Optional[str] = None,  # Parent collection entry id\n        units: Optional[str] = None,  # Units of the parameter\n        description: Optional[str] = None,  # Description of the parameter\n        editable: bool = True,  # If false, the parameter can never be edited. It is calculated automatically\n    ) -&gt; None:\n        self._value = value\n        self.name: str = name\n        self.cif_name: str = cif_name\n        self.pretty_name: Optional[str] = pretty_name\n        self._datablock_id: Optional[str] = datablock_id\n        self.category_key: Optional[str] = category_key\n        self.cif_category_key: Optional[str] = cif_category_key\n        self._collection_entry_id: Optional[str] = collection_entry_id\n        self.units: Optional[str] = units\n        self._description: Optional[str] = description\n        self._editable: bool = editable\n\n        self._human_uid = self._generate_human_readable_unique_id()\n\n        UidMapHandler.get().add_to_uid_map(self)\n\n    def __str__(self):\n        # Base value string\n        value_str = f'{self.__class__.__name__}: {self.uid} = {self.value}'\n\n        # Append \u00b1 uncertainty if it exists and is nonzero\n        if hasattr(self, 'uncertainty') and getattr(self, 'uncertainty') != 0.0:\n            value_str += f' \u00b1 {self.uncertainty}'\n\n        # Append units if available\n        if self.units:\n            value_str += f' {self.units}'\n\n        return value_str\n\n    def __repr__(self):\n        return self.__str__()\n\n    def _generate_random_unique_id(self) -&gt; str:\n        # Derived class Parameter will use this unique id for the\n        # minimization process to identify the parameter. It will also be\n        # used to create the alias for the parameter in the constraint\n        # expression.\n        length = 16\n        letters = [secrets.choice(string.ascii_lowercase) for _ in range(length)]\n        uid = ''.join(letters)\n        return uid\n\n    def _generate_human_readable_unique_id(self):\n        # Instead of generating a random string, we can use the\n        # name of the parameter and the block name to create a unique id.\n        #  E.g.:\n        #  - \"block-id.category-name.parameter-name\": \"lbco.cell.length_a\"\n        #  - \"block-id.category-name.entry-id.parameter-name\": \"lbco.atom_site.Ba.fract_x\"\n        # For the analysis, we can use the same format, but without the\n        # datablock id. E.g.:\n        #  - \"category-name.entry-id.parameter-name\": \"alias.occ_Ba.label\"\n        # This need to be called after the parameter is created and all its\n        # attributes are set.\n        if self.datablock_id:\n            uid = f'{self.datablock_id}.{self.cif_category_key}'\n        else:\n            uid = f'{self.cif_category_key}'\n        if self.collection_entry_id:\n            uid += f'.{self.collection_entry_id}'\n        uid += f'.{self.cif_name}'\n        return uid\n\n    @property\n    def datablock_id(self):\n        return self._datablock_id\n\n    @datablock_id.setter\n    def datablock_id(self, new_id):\n        self._datablock_id = new_id\n        # Update the unique id, when datablock_id attribute is of\n        # the parameter is changed\n        self.uid = self._generate_human_readable_unique_id()\n\n    @property\n    def collection_entry_id(self):\n        return self._collection_entry_id\n\n    @collection_entry_id.setter\n    def collection_entry_id(self, new_id):\n        self._collection_entry_id = new_id\n        # Update the unique id, when datablock_id attribute is of\n        # the parameter is changed\n        self.uid = self._generate_human_readable_unique_id()\n\n    @property\n    def uid(self):\n        return self._human_uid\n\n    @uid.setter\n    def uid(self, new_uid):\n        # Update the unique id in the global uid map\n        old_uid = self._human_uid\n        self._human_uid = new_uid\n        UidMapHandler.get().replace_uid(old_uid, new_uid)\n\n    @property\n    def minimizer_uid(self):\n        return self.uid.replace('.', '__')\n\n    @property\n    def value(self) -&gt; Any:\n        return self._value\n\n    @value.setter\n    def value(self, new_value: Any) -&gt; None:\n        if self._editable:\n            self._value = new_value\n        else:\n            print(warning(f\"The parameter '{self.cif_name}' it is calculated automatically and cannot be changed manually.\"))\n\n    @property\n    def description(self) -&gt; Optional[str]:\n        return self._description\n\n    @property\n    def editable(self) -&gt; bool:\n        return self._editable\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.objects.Parameter","title":"<code>Parameter</code>","text":"<p>               Bases: <code>Descriptor</code></p> <p>A parameter with a value, uncertainty, units, and CIF representation.</p> Source code in <code>src/easydiffraction/core/objects.py</code> <pre><code>class Parameter(Descriptor):\n    \"\"\"\n    A parameter with a value, uncertainty, units, and CIF representation.\n    \"\"\"\n\n    def __init__(\n        self,\n        value: Any,\n        name: str,\n        cif_name: str,\n        pretty_name: Optional[str] = None,\n        datablock_id: Optional[str] = None,  # Parent datablock name\n        category_key: Optional[str] = None,\n        cif_category_key: Optional[str] = None,\n        collection_entry_id: Optional[str] = None,\n        units: Optional[str] = None,\n        description: Optional[str] = None,\n        editable: bool = True,\n        uncertainty: float = 0.0,\n        free: bool = False,\n        constrained: bool = False,\n        min_value: Optional[float] = None,\n        max_value: Optional[float] = None,\n    ) -&gt; None:\n        super().__init__(\n            value,\n            name,\n            cif_name,\n            pretty_name,\n            datablock_id,\n            category_key,\n            cif_category_key,\n            collection_entry_id,\n            units,\n            description,\n            editable,\n        )\n        self.uncertainty: float = uncertainty  # Standard uncertainty or estimated standard deviation\n        self.free: bool = free  # If the parameter is free to be fitted during the optimization\n        self.constrained: bool = constrained  # If symmetry constrains the parameter during the optimization\n        self.min: Optional[float] = min_value  # Minimum physical value of the parameter\n        self.max: Optional[float] = max_value  # Maximum physical value of the parameter\n        self.start_value: Optional[Any] = None  # Starting value for optimization\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons","title":"<code>singletons</code>","text":""},{"location":"api-reference/core/#easydiffraction.core.singletons.BaseSingleton","title":"<code>BaseSingleton</code>","text":"<p>Base class to implement Singleton pattern.</p> <p>Ensures only one shared instance of a class is ever created. Useful for managing shared state across the library.</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>class BaseSingleton:\n    \"\"\"Base class to implement Singleton pattern.\n\n    Ensures only one shared instance of a class is ever created.\n    Useful for managing shared state across the library.\n    \"\"\"\n\n    _instance = None  # Class-level shared instance\n\n    @classmethod\n    def get(cls: Type[T]) -&gt; T:\n        \"\"\"Returns the shared instance, creating it if needed.\"\"\"\n        if cls._instance is None:\n            cls._instance = cls()\n        return cls._instance\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.BaseSingleton.get","title":"<code>get()</code>  <code>classmethod</code>","text":"<p>Returns the shared instance, creating it if needed.</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>@classmethod\ndef get(cls: Type[T]) -&gt; T:\n    \"\"\"Returns the shared instance, creating it if needed.\"\"\"\n    if cls._instance is None:\n        cls._instance = cls()\n    return cls._instance\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.ConstraintsHandler","title":"<code>ConstraintsHandler</code>","text":"<p>               Bases: <code>BaseSingleton</code></p> <p>Manages user-defined parameter constraints using aliases and expressions.</p> <p>Uses the asteval interpreter for safe evaluation of mathematical expressions. Constraints are defined as: lhs_alias = expression(rhs_aliases).</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>class ConstraintsHandler(BaseSingleton):\n    \"\"\"Manages user-defined parameter constraints using aliases and expressions.\n\n    Uses the asteval interpreter for safe evaluation of mathematical expressions.\n    Constraints are defined as: lhs_alias = expression(rhs_aliases).\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        # Maps alias names (like 'biso_La') \u2192 ConstraintAlias(param=Parameter)\n        self._alias_to_param: Dict[str, Any] = {}\n\n        # Stores raw user-defined constraints indexed by lhs_alias\n        # Each value should contain: lhs_alias, rhs_expr\n        self._constraints = {}\n\n        # Internally parsed constraints as (lhs_alias, rhs_expr) tuples\n        self._parsed_constraints: List[Tuple[str, str]] = []\n\n    def set_aliases(self, aliases):\n        \"\"\"\n        Sets the alias map (name \u2192 parameter wrapper).\n        Called when user registers parameter aliases like:\n            alias='biso_La', param=model.atom_sites['La'].b_iso\n        \"\"\"\n        self._alias_to_param = aliases._items\n\n    def set_constraints(self, constraints):\n        \"\"\"\n        Sets the constraints and triggers parsing into internal format.\n        Called when user registers expressions like:\n            lhs_alias='occ_Ba', rhs_expr='1 - occ_La'\n        \"\"\"\n        self._constraints = constraints._items\n        self._parse_constraints()\n\n    def _parse_constraints(self) -&gt; None:\n        \"\"\"\n        Converts raw expression input into a normalized internal list of\n        (lhs_alias, rhs_expr) pairs, stripping whitespace and skipping invalid entries.\n        \"\"\"\n        self._parsed_constraints = []\n\n        for expr_obj in self._constraints.values():\n            lhs_alias = expr_obj.lhs_alias.value\n            rhs_expr = expr_obj.rhs_expr.value\n\n            if lhs_alias and rhs_expr:\n                constraint = (lhs_alias.strip(), rhs_expr.strip())\n                self._parsed_constraints.append(constraint)\n\n    def apply(self) -&gt; None:\n        \"\"\"Evaluates constraints and applies them to dependent parameters.\n\n        For each constraint:\n        - Evaluate RHS using current values of aliases\n        - Locate the dependent parameter by alias \u2192 uid \u2192 param\n        - Update its value and mark it as constrained\n        \"\"\"\n        if not self._parsed_constraints:\n            return  # Nothing to apply\n\n        # Retrieve global UID \u2192 Parameter object map\n        uid_map = UidMapHandler.get().get_uid_map()\n\n        # Prepare a flat dict of {alias: value} for use in expressions\n        param_values = {}\n        for alias, alias_obj in self._alias_to_param.items():\n            uid = alias_obj.param_uid.value\n            param = uid_map[uid]\n            value = param.value\n            param_values[alias] = value\n\n        # Create an asteval interpreter for safe expression evaluation\n        ae = Interpreter()\n        ae.symtable.update(param_values)\n\n        for lhs_alias, rhs_expr in self._parsed_constraints:\n            try:\n                # Evaluate the RHS expression using the current values\n                rhs_value = ae(rhs_expr)\n\n                # Get the actual parameter object we want to update\n                dependent_uid = self._alias_to_param[lhs_alias].param_uid.value\n                param = uid_map[dependent_uid]\n\n                # Update its value and mark it as constrained\n                param.value = rhs_value\n                param.constrained = True\n\n            except Exception as error:\n                print(f\"Failed to apply constraint '{lhs_alias} = {rhs_expr}': {error}\")\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.ConstraintsHandler.apply","title":"<code>apply()</code>","text":"<p>Evaluates constraints and applies them to dependent parameters.</p> <p>For each constraint: - Evaluate RHS using current values of aliases - Locate the dependent parameter by alias \u2192 uid \u2192 param - Update its value and mark it as constrained</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>def apply(self) -&gt; None:\n    \"\"\"Evaluates constraints and applies them to dependent parameters.\n\n    For each constraint:\n    - Evaluate RHS using current values of aliases\n    - Locate the dependent parameter by alias \u2192 uid \u2192 param\n    - Update its value and mark it as constrained\n    \"\"\"\n    if not self._parsed_constraints:\n        return  # Nothing to apply\n\n    # Retrieve global UID \u2192 Parameter object map\n    uid_map = UidMapHandler.get().get_uid_map()\n\n    # Prepare a flat dict of {alias: value} for use in expressions\n    param_values = {}\n    for alias, alias_obj in self._alias_to_param.items():\n        uid = alias_obj.param_uid.value\n        param = uid_map[uid]\n        value = param.value\n        param_values[alias] = value\n\n    # Create an asteval interpreter for safe expression evaluation\n    ae = Interpreter()\n    ae.symtable.update(param_values)\n\n    for lhs_alias, rhs_expr in self._parsed_constraints:\n        try:\n            # Evaluate the RHS expression using the current values\n            rhs_value = ae(rhs_expr)\n\n            # Get the actual parameter object we want to update\n            dependent_uid = self._alias_to_param[lhs_alias].param_uid.value\n            param = uid_map[dependent_uid]\n\n            # Update its value and mark it as constrained\n            param.value = rhs_value\n            param.constrained = True\n\n        except Exception as error:\n            print(f\"Failed to apply constraint '{lhs_alias} = {rhs_expr}': {error}\")\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.ConstraintsHandler.set_aliases","title":"<code>set_aliases(aliases)</code>","text":"<p>Sets the alias map (name \u2192 parameter wrapper). Called when user registers parameter aliases like:     alias='biso_La', param=model.atom_sites['La'].b_iso</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>def set_aliases(self, aliases):\n    \"\"\"\n    Sets the alias map (name \u2192 parameter wrapper).\n    Called when user registers parameter aliases like:\n        alias='biso_La', param=model.atom_sites['La'].b_iso\n    \"\"\"\n    self._alias_to_param = aliases._items\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.ConstraintsHandler.set_constraints","title":"<code>set_constraints(constraints)</code>","text":"<p>Sets the constraints and triggers parsing into internal format. Called when user registers expressions like:     lhs_alias='occ_Ba', rhs_expr='1 - occ_La'</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>def set_constraints(self, constraints):\n    \"\"\"\n    Sets the constraints and triggers parsing into internal format.\n    Called when user registers expressions like:\n        lhs_alias='occ_Ba', rhs_expr='1 - occ_La'\n    \"\"\"\n    self._constraints = constraints._items\n    self._parse_constraints()\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.UidMapHandler","title":"<code>UidMapHandler</code>","text":"<p>               Bases: <code>BaseSingleton</code></p> <p>Global handler to manage UID-to-Parameter object mapping.</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>class UidMapHandler(BaseSingleton):\n    \"\"\"Global handler to manage UID-to-Parameter object mapping.\"\"\"\n\n    def __init__(self) -&gt; None:\n        # Internal map: uid (str) \u2192 Parameter instance\n        self._uid_map: Dict[str, Any] = {}\n\n    def get_uid_map(self) -&gt; Dict[str, Any]:\n        \"\"\"Returns the current UID-to-Parameter map.\"\"\"\n        return self._uid_map\n\n    def add_to_uid_map(self, parameter):\n        \"\"\"Adds a single Parameter object to the UID map.\"\"\"\n        self._uid_map[parameter.uid] = parameter\n\n    def replace_uid(self, old_uid, new_uid):\n        \"\"\"Replaces an existing UID key in the UID map with a new UID.\n\n        Moves the associated parameter from old_uid to new_uid.\n        Raises a KeyError if the old_uid doesn't exist.\n        \"\"\"\n        if old_uid in self._uid_map:\n            self._uid_map[new_uid] = self._uid_map.pop(old_uid)\n        else:\n            raise KeyError(f\"UID '{old_uid}' not found in the UID map.\")\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.UidMapHandler.add_to_uid_map","title":"<code>add_to_uid_map(parameter)</code>","text":"<p>Adds a single Parameter object to the UID map.</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>def add_to_uid_map(self, parameter):\n    \"\"\"Adds a single Parameter object to the UID map.\"\"\"\n    self._uid_map[parameter.uid] = parameter\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.UidMapHandler.get_uid_map","title":"<code>get_uid_map()</code>","text":"<p>Returns the current UID-to-Parameter map.</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>def get_uid_map(self) -&gt; Dict[str, Any]:\n    \"\"\"Returns the current UID-to-Parameter map.\"\"\"\n    return self._uid_map\n</code></pre>"},{"location":"api-reference/core/#easydiffraction.core.singletons.UidMapHandler.replace_uid","title":"<code>replace_uid(old_uid, new_uid)</code>","text":"<p>Replaces an existing UID key in the UID map with a new UID.</p> <p>Moves the associated parameter from old_uid to new_uid. Raises a KeyError if the old_uid doesn't exist.</p> Source code in <code>src/easydiffraction/core/singletons.py</code> <pre><code>def replace_uid(self, old_uid, new_uid):\n    \"\"\"Replaces an existing UID key in the UID map with a new UID.\n\n    Moves the associated parameter from old_uid to new_uid.\n    Raises a KeyError if the old_uid doesn't exist.\n    \"\"\"\n    if old_uid in self._uid_map:\n        self._uid_map[new_uid] = self._uid_map.pop(old_uid)\n    else:\n        raise KeyError(f\"UID '{old_uid}' not found in the UID map.\")\n</code></pre>"},{"location":"api-reference/crystallography/","title":"crystallography","text":""},{"location":"api-reference/crystallography/#easydiffraction.crystallography","title":"<code>crystallography</code>","text":""},{"location":"api-reference/crystallography/#easydiffraction.crystallography.crystallography","title":"<code>crystallography</code>","text":""},{"location":"api-reference/crystallography/#easydiffraction.crystallography.crystallography.apply_atom_site_symmetry_constraints","title":"<code>apply_atom_site_symmetry_constraints(atom_site, name_hm, coord_code, wyckoff_letter)</code>","text":"<p>Apply symmetry constraints to atomic coordinates based on site symmetry.</p> <p>Parameters:</p> Name Type Description Default <code>atom_site</code> <code>Dict[str, Any]</code> <p>Dictionary containing atom position data.</p> required <code>name_hm</code> <code>str</code> <p>Hermann-Mauguin symbol of the space group.</p> required <code>coord_code</code> <code>int</code> <p>Coordinate system code.</p> required <code>wyckoff_letter</code> <code>str</code> <p>Wyckoff position letter.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The atom_site dictionary with applied symmetry constraints.</p> Source code in <code>src/easydiffraction/crystallography/crystallography.py</code> <pre><code>def apply_atom_site_symmetry_constraints(\n    atom_site: Dict[str, Any],\n    name_hm: str,\n    coord_code: int,\n    wyckoff_letter: str,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Apply symmetry constraints to atomic coordinates based on site symmetry.\n\n    Args:\n        atom_site: Dictionary containing atom position data.\n        name_hm: Hermann-Mauguin symbol of the space group.\n        coord_code: Coordinate system code.\n        wyckoff_letter: Wyckoff position letter.\n\n    Returns:\n        The atom_site dictionary with applied symmetry constraints.\n    \"\"\"\n    it_number = get_it_number_by_name_hm_short(name_hm)\n    if it_number is None:\n        error_msg = f\"Failed to get IT_number for name_H-M '{name_hm}'\"\n        print(error_msg)\n        return atom_site\n\n    it_coordinate_system_code = coord_code\n    if it_coordinate_system_code is None:\n        error_msg = 'IT_coordinate_system_code is not set'\n        print(error_msg)\n        return atom_site\n\n    space_group_entry = SPACE_GROUP_LOOKUP_DICT[(it_number, it_coordinate_system_code)]\n    wyckoff_positions = space_group_entry['Wyckoff_positions'][wyckoff_letter]\n    coords_xyz = wyckoff_positions['coords_xyz']\n\n    first_position = coords_xyz[0]\n    components = first_position.strip('()').split(',')\n    parsed_exprs: List[Expr] = [sympify(comp.strip()) for comp in components]\n\n    x_val: Expr = sympify(atom_site['fract_x'])\n    y_val: Expr = sympify(atom_site['fract_y'])\n    z_val: Expr = sympify(atom_site['fract_z'])\n\n    substitutions: Dict[str, Expr] = {'x': x_val, 'y': y_val, 'z': z_val}\n\n    axes: tuple[str, ...] = ('x', 'y', 'z')\n    x, y, z = symbols('x y z')\n    symbols_xyz: tuple[Symbol, ...] = (x, y, z)\n\n    for i, axis in enumerate(axes):\n        symbol = symbols_xyz[i]\n        is_free = any(symbol in expr.free_symbols for expr in parsed_exprs)\n\n        if not is_free:\n            evaluated = parsed_exprs[i].subs(substitutions)\n            simplified = simplify(evaluated)\n            atom_site[f'fract_{axis}'] = float(simplified)\n\n    return atom_site\n</code></pre>"},{"location":"api-reference/crystallography/#easydiffraction.crystallography.crystallography.apply_cell_symmetry_constraints","title":"<code>apply_cell_symmetry_constraints(cell, name_hm)</code>","text":"<p>Apply symmetry constraints to unit cell parameters based on space group.</p> <p>Parameters:</p> Name Type Description Default <code>cell</code> <code>Dict[str, float]</code> <p>Dictionary containing lattice parameters.</p> required <code>name_hm</code> <code>str</code> <p>Hermann-Mauguin symbol of the space group.</p> required <p>Returns:</p> Type Description <code>Dict[str, float]</code> <p>The cell dictionary with applied symmetry constraints.</p> Source code in <code>src/easydiffraction/crystallography/crystallography.py</code> <pre><code>def apply_cell_symmetry_constraints(\n    cell: Dict[str, float],\n    name_hm: str,\n) -&gt; Dict[str, float]:\n    \"\"\"\n    Apply symmetry constraints to unit cell parameters based on space group.\n\n    Args:\n        cell: Dictionary containing lattice parameters.\n        name_hm: Hermann-Mauguin symbol of the space group.\n\n    Returns:\n        The cell dictionary with applied symmetry constraints.\n    \"\"\"\n    it_number = get_it_number_by_name_hm_short(name_hm)\n    if it_number is None:\n        error_msg = f\"Failed to get IT_number for name_H-M '{name_hm}'\"\n        print(error_msg)\n        return cell\n\n    crystal_system = get_crystal_system_by_it_number(it_number)\n    if crystal_system is None:\n        error_msg = f\"Failed to get crystal system for IT_number '{it_number}'\"\n        print(error_msg)\n        return cell\n\n    if crystal_system == 'cubic':\n        a = cell['lattice_a']\n        cell['lattice_b'] = a\n        cell['lattice_c'] = a\n        cell['angle_alpha'] = 90\n        cell['angle_beta'] = 90\n        cell['angle_gamma'] = 90\n\n    elif crystal_system == 'tetragonal':\n        a = cell['lattice_a']\n        cell['lattice_b'] = a\n        cell['angle_alpha'] = 90\n        cell['angle_beta'] = 90\n        cell['angle_gamma'] = 90\n\n    elif crystal_system == 'orthorhombic':\n        cell['angle_alpha'] = 90\n        cell['angle_beta'] = 90\n        cell['angle_gamma'] = 90\n\n    elif crystal_system in {'hexagonal', 'trigonal'}:\n        a = cell['lattice_a']\n        cell['lattice_b'] = a\n        cell['angle_alpha'] = 90\n        cell['angle_beta'] = 90\n        cell['angle_gamma'] = 120\n\n    elif crystal_system == 'monoclinic':\n        cell['angle_alpha'] = 90\n        cell['angle_gamma'] = 90\n\n    elif crystal_system == 'triclinic':\n        pass  # No constraints to apply\n\n    else:\n        error_msg = f'Unknown or unsupported crystal system: {crystal_system}'\n        print(error_msg)\n\n    return cell\n</code></pre>"},{"location":"api-reference/experiments/","title":"experiments","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments","title":"<code>experiments</code>","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments.collections","title":"<code>collections</code>","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.background","title":"<code>background</code>","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.background.ChebyshevPolynomialBackground","title":"<code>ChebyshevPolynomialBackground</code>","text":"<p>               Bases: <code>BackgroundBase</code></p> Source code in <code>src/easydiffraction/experiments/collections/background.py</code> <pre><code>class ChebyshevPolynomialBackground(BackgroundBase):\n    _description: str = 'Chebyshev polynomial background'\n\n    @property\n    def _child_class(self) -&gt; Type[PolynomialTerm]:\n        return PolynomialTerm\n\n    def calculate(self, x_data: np.ndarray) -&gt; np.ndarray:\n        \"\"\"Evaluate polynomial background over x_data.\"\"\"\n        if not self._items:\n            print(warning('No background points found. Setting background to zero.'))\n            return np.zeros_like(x_data)\n\n        u = (x_data - x_data.min()) / (x_data.max() - x_data.min()) * 2 - 1  # scale to [-1, 1]\n        coefs = [term.coef.value for term in self._items.values()]\n        y_data = chebval(u, coefs)\n        return y_data\n\n    def show(self) -&gt; None:\n        columns_headers: List[str] = ['Order', 'Coefficient']\n        columns_alignment = ['left', 'left']\n        columns_data: List[List[Union[int, float]]] = []\n        for term in self._items.values():\n            order = term.order.value\n            coef = term.coef.value\n            columns_data.append([order, coef])\n\n        print(paragraph('Chebyshev polynomial background terms'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=columns_data,\n        )\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.background.ChebyshevPolynomialBackground.calculate","title":"<code>calculate(x_data)</code>","text":"<p>Evaluate polynomial background over x_data.</p> Source code in <code>src/easydiffraction/experiments/collections/background.py</code> <pre><code>def calculate(self, x_data: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Evaluate polynomial background over x_data.\"\"\"\n    if not self._items:\n        print(warning('No background points found. Setting background to zero.'))\n        return np.zeros_like(x_data)\n\n    u = (x_data - x_data.min()) / (x_data.max() - x_data.min()) * 2 - 1  # scale to [-1, 1]\n    coefs = [term.coef.value for term in self._items.values()]\n    y_data = chebval(u, coefs)\n    return y_data\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.background.LineSegmentBackground","title":"<code>LineSegmentBackground</code>","text":"<p>               Bases: <code>BackgroundBase</code></p> Source code in <code>src/easydiffraction/experiments/collections/background.py</code> <pre><code>class LineSegmentBackground(BackgroundBase):\n    _description: str = 'Linear interpolation between points'\n\n    @property\n    def _child_class(self) -&gt; Type[Point]:\n        return Point\n\n    def calculate(self, x_data: np.ndarray) -&gt; np.ndarray:\n        \"\"\"Interpolate background points over x_data.\"\"\"\n        if not self._items:\n            print(warning('No background points found. Setting background to zero.'))\n            return np.zeros_like(x_data)\n\n        background_x = np.array([point.x.value for point in self._items.values()])\n        background_y = np.array([point.y.value for point in self._items.values()])\n        interp_func = interp1d(\n            background_x,\n            background_y,\n            kind='linear',\n            bounds_error=False,\n            fill_value=(\n                background_y[0],\n                background_y[-1],\n            ),\n        )\n        y_data = interp_func(x_data)\n        return y_data\n\n    def show(self) -&gt; None:\n        columns_headers: List[str] = ['X', 'Intensity']\n        columns_alignment = ['left', 'left']\n        columns_data: List[List[float]] = []\n        for point in self._items.values():\n            x = point.x.value\n            y = point.y.value\n            columns_data.append([x, y])\n\n        print(paragraph('Line-segment background points'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=columns_data,\n        )\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.background.LineSegmentBackground.calculate","title":"<code>calculate(x_data)</code>","text":"<p>Interpolate background points over x_data.</p> Source code in <code>src/easydiffraction/experiments/collections/background.py</code> <pre><code>def calculate(self, x_data: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Interpolate background points over x_data.\"\"\"\n    if not self._items:\n        print(warning('No background points found. Setting background to zero.'))\n        return np.zeros_like(x_data)\n\n    background_x = np.array([point.x.value for point in self._items.values()])\n    background_y = np.array([point.y.value for point in self._items.values()])\n    interp_func = interp1d(\n        background_x,\n        background_y,\n        kind='linear',\n        bounds_error=False,\n        fill_value=(\n            background_y[0],\n            background_y[-1],\n        ),\n    )\n    y_data = interp_func(x_data)\n    return y_data\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore","title":"<code>datastore</code>","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.Datastore","title":"<code>Datastore</code>","text":"<p>Stores pattern data (measured and calculated) for an experiment.</p> Source code in <code>src/easydiffraction/experiments/collections/datastore.py</code> <pre><code>class Datastore:\n    \"\"\"\n    Stores pattern data (measured and calculated) for an experiment.\n    \"\"\"\n\n    def __init__(self, sample_form: str, experiment: Experiment) -&gt; None:\n        self.sample_form: str = sample_form\n\n        if sample_form == 'powder':\n            self.pattern: Pattern = PowderPattern(experiment)\n        elif sample_form == 'single_crystal':\n            self.pattern: Pattern = Pattern(experiment)  # TODO: Find better name for single crystal pattern\n        else:\n            raise ValueError(f\"Unknown sample form '{sample_form}'\")\n\n    def load_measured_data(self, file_path: str) -&gt; None:\n        \"\"\"Load measured data from an ASCII file.\"\"\"\n        # TODO: Check if this method is used...\n        #  Looks like _load_ascii_data_to_experiment from experiments.py is used instead\n        print(f'Loading measured data for {self.sample_form} diffraction from {file_path}')\n\n        try:\n            data: np.ndarray = np.loadtxt(file_path)\n        except Exception as e:\n            print(f'Failed to load data: {e}')\n            return\n\n        if data.shape[1] &lt; 2:\n            raise ValueError('Data file must have at least two columns (x and y).')\n\n        x: np.ndarray = data[:, 0]\n        y: np.ndarray = data[:, 1]\n        sy: np.ndarray = data[:, 2] if data.shape[1] &gt; 2 else np.sqrt(np.abs(y))\n\n        self.pattern.x = x\n        self.pattern.meas = y\n        self.pattern.meas_su = sy\n        self.pattern.excluded = np.full(x.shape, fill_value=False, dtype=bool)  # No excluded points by default\n\n        print(f\"Loaded {len(x)} points for experiment '{self.pattern.experiment.name}'.\")\n\n    def show_measured_data(self) -&gt; None:\n        \"\"\"Display measured data in console.\"\"\"\n        print(f'\\nMeasured data ({self.sample_form}):')\n        print(f'x: {self.pattern.x}')\n        print(f'meas: {self.pattern.meas}')\n        print(f'meas_su: {self.pattern.meas_su}')\n\n    def show_calculated_data(self) -&gt; None:\n        \"\"\"Display calculated data in console.\"\"\"\n        print(f'\\nCalculated data ({self.sample_form}):')\n        print(f'calc: {self.pattern.calc}')\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.Datastore.load_measured_data","title":"<code>load_measured_data(file_path)</code>","text":"<p>Load measured data from an ASCII file.</p> Source code in <code>src/easydiffraction/experiments/collections/datastore.py</code> <pre><code>def load_measured_data(self, file_path: str) -&gt; None:\n    \"\"\"Load measured data from an ASCII file.\"\"\"\n    # TODO: Check if this method is used...\n    #  Looks like _load_ascii_data_to_experiment from experiments.py is used instead\n    print(f'Loading measured data for {self.sample_form} diffraction from {file_path}')\n\n    try:\n        data: np.ndarray = np.loadtxt(file_path)\n    except Exception as e:\n        print(f'Failed to load data: {e}')\n        return\n\n    if data.shape[1] &lt; 2:\n        raise ValueError('Data file must have at least two columns (x and y).')\n\n    x: np.ndarray = data[:, 0]\n    y: np.ndarray = data[:, 1]\n    sy: np.ndarray = data[:, 2] if data.shape[1] &gt; 2 else np.sqrt(np.abs(y))\n\n    self.pattern.x = x\n    self.pattern.meas = y\n    self.pattern.meas_su = sy\n    self.pattern.excluded = np.full(x.shape, fill_value=False, dtype=bool)  # No excluded points by default\n\n    print(f\"Loaded {len(x)} points for experiment '{self.pattern.experiment.name}'.\")\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.Datastore.show_calculated_data","title":"<code>show_calculated_data()</code>","text":"<p>Display calculated data in console.</p> Source code in <code>src/easydiffraction/experiments/collections/datastore.py</code> <pre><code>def show_calculated_data(self) -&gt; None:\n    \"\"\"Display calculated data in console.\"\"\"\n    print(f'\\nCalculated data ({self.sample_form}):')\n    print(f'calc: {self.pattern.calc}')\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.Datastore.show_measured_data","title":"<code>show_measured_data()</code>","text":"<p>Display measured data in console.</p> Source code in <code>src/easydiffraction/experiments/collections/datastore.py</code> <pre><code>def show_measured_data(self) -&gt; None:\n    \"\"\"Display measured data in console.\"\"\"\n    print(f'\\nMeasured data ({self.sample_form}):')\n    print(f'x: {self.pattern.x}')\n    print(f'meas: {self.pattern.meas}')\n    print(f'meas_su: {self.pattern.meas_su}')\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.DatastoreFactory","title":"<code>DatastoreFactory</code>","text":"<p>Factory to dynamically create appropriate datastore instances (SC/Powder).</p> Source code in <code>src/easydiffraction/experiments/collections/datastore.py</code> <pre><code>class DatastoreFactory:\n    \"\"\"\n    Factory to dynamically create appropriate datastore instances (SC/Powder).\n    \"\"\"\n\n    @staticmethod\n    def create(sample_form: str, experiment: Experiment) -&gt; Datastore:\n        \"\"\"\n        Create a datastore object depending on the sample form.\n\n        Args:\n            sample_form: The form of the sample (\"powder\" or \"single_crystal\").\n            experiment: The experiment object.\n\n        Returns:\n            A new Datastore instance appropriate for the sample form.\n        \"\"\"\n        return Datastore(sample_form, experiment)\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.DatastoreFactory.create","title":"<code>create(sample_form, experiment)</code>  <code>staticmethod</code>","text":"<p>Create a datastore object depending on the sample form.</p> <p>Parameters:</p> Name Type Description Default <code>sample_form</code> <code>str</code> <p>The form of the sample (\"powder\" or \"single_crystal\").</p> required <code>experiment</code> <code>Experiment</code> <p>The experiment object.</p> required <p>Returns:</p> Type Description <code>Datastore</code> <p>A new Datastore instance appropriate for the sample form.</p> Source code in <code>src/easydiffraction/experiments/collections/datastore.py</code> <pre><code>@staticmethod\ndef create(sample_form: str, experiment: Experiment) -&gt; Datastore:\n    \"\"\"\n    Create a datastore object depending on the sample form.\n\n    Args:\n        sample_form: The form of the sample (\"powder\" or \"single_crystal\").\n        experiment: The experiment object.\n\n    Returns:\n        A new Datastore instance appropriate for the sample form.\n    \"\"\"\n    return Datastore(sample_form, experiment)\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.Pattern","title":"<code>Pattern</code>","text":"<p>Base pattern class for both powder and single crystal experiments. Stores x, measured intensities, uncertainties, background, and calculated intensities.</p> Source code in <code>src/easydiffraction/experiments/collections/datastore.py</code> <pre><code>class Pattern:\n    \"\"\"\n    Base pattern class for both powder and single crystal experiments.\n    Stores x, measured intensities, uncertainties, background, and calculated intensities.\n    \"\"\"\n\n    def __init__(self, experiment: Experiment) -&gt; None:\n        self.experiment = experiment\n\n        # Data arrays\n        self.x: Optional[np.ndarray] = None\n        self.d: Optional[np.ndarray] = None\n        self.meas: Optional[np.ndarray] = None\n        self.meas_su: Optional[np.ndarray] = None\n        self.bkg: Optional[np.ndarray] = None\n        self.excluded: Optional[np.ndarray] = None  # Flags for excluded points\n        self._calc: Optional[np.ndarray] = None  # Cached calculated intensities\n\n    @property\n    def calc(self) -&gt; Optional[np.ndarray]:\n        \"\"\"Access calculated intensities. Should be updated via external calculation.\"\"\"\n        return self._calc\n\n    @calc.setter\n    def calc(self, values: np.ndarray) -&gt; None:\n        \"\"\"Set calculated intensities (from Analysis.calculate_pattern()).\"\"\"\n        self._calc = values\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.Pattern.calc","title":"<code>calc</code>  <code>property</code> <code>writable</code>","text":"<p>Access calculated intensities. Should be updated via external calculation.</p>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.datastore.PowderPattern","title":"<code>PowderPattern</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Specialized pattern for powder diffraction (can be extended in the future).</p> Source code in <code>src/easydiffraction/experiments/collections/datastore.py</code> <pre><code>class PowderPattern(Pattern):\n    \"\"\"\n    Specialized pattern for powder diffraction (can be extended in the future).\n    \"\"\"\n\n    # TODO: Check if this class is needed or if it can be merged with Pattern\n    def __init__(self, experiment: Experiment) -&gt; None:\n        super().__init__(experiment)\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.excluded_regions","title":"<code>excluded_regions</code>","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.excluded_regions.ExcludedRegions","title":"<code>ExcludedRegions</code>","text":"<p>               Bases: <code>Collection</code></p> <p>Collection of ExcludedRegion instances.</p> Source code in <code>src/easydiffraction/experiments/collections/excluded_regions.py</code> <pre><code>class ExcludedRegions(Collection):\n    \"\"\"\n    Collection of ExcludedRegion instances.\n    \"\"\"\n\n    @property\n    def _type(self) -&gt; str:\n        return 'category'  # datablock or category\n\n    @property\n    def _child_class(self) -&gt; Type[ExcludedRegion]:\n        return ExcludedRegion\n\n    def on_item_added(self, item: ExcludedRegion) -&gt; None:\n        \"\"\"\n        Mark excluded points in the experiment pattern when a new region is added.\n        \"\"\"\n        experiment = self._parent\n        pattern = experiment.datastore.pattern\n\n        # Boolean mask for points within the new excluded region\n        in_region = (pattern.full_x &gt;= item.minimum.value) &amp; (pattern.full_x &lt;= item.maximum.value)\n\n        # Update the exclusion mask\n        pattern.excluded[in_region] = True\n\n        # Update the excluded points in the datastore\n        pattern.x = pattern.full_x[~pattern.excluded]\n        pattern.meas = pattern.full_meas[~pattern.excluded]\n        pattern.meas_su = pattern.full_meas_su[~pattern.excluded]\n\n    def show(self) -&gt; None:\n        # TODO: Consider moving this to the base class\n        #  to avoid code duplication with implementations in Background, etc.\n        #  Consider using parameter names as column headers\n        columns_headers: List[str] = ['minimum', 'maximum']\n        columns_alignment = ['left', 'left']\n        columns_data: List[List[float]] = []\n        for region in self._items.values():\n            minimum = region.minimum.value\n            maximum = region.maximum.value\n            columns_data.append([minimum, maximum])\n\n        print(paragraph('Excluded regions'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=columns_data,\n        )\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.excluded_regions.ExcludedRegions.on_item_added","title":"<code>on_item_added(item)</code>","text":"<p>Mark excluded points in the experiment pattern when a new region is added.</p> Source code in <code>src/easydiffraction/experiments/collections/excluded_regions.py</code> <pre><code>def on_item_added(self, item: ExcludedRegion) -&gt; None:\n    \"\"\"\n    Mark excluded points in the experiment pattern when a new region is added.\n    \"\"\"\n    experiment = self._parent\n    pattern = experiment.datastore.pattern\n\n    # Boolean mask for points within the new excluded region\n    in_region = (pattern.full_x &gt;= item.minimum.value) &amp; (pattern.full_x &lt;= item.maximum.value)\n\n    # Update the exclusion mask\n    pattern.excluded[in_region] = True\n\n    # Update the excluded points in the datastore\n    pattern.x = pattern.full_x[~pattern.excluded]\n    pattern.meas = pattern.full_meas[~pattern.excluded]\n    pattern.meas_su = pattern.full_meas_su[~pattern.excluded]\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.linked_phases","title":"<code>linked_phases</code>","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments.collections.linked_phases.LinkedPhases","title":"<code>LinkedPhases</code>","text":"<p>               Bases: <code>Collection</code></p> <p>Collection of LinkedPhase instances.</p> Source code in <code>src/easydiffraction/experiments/collections/linked_phases.py</code> <pre><code>class LinkedPhases(Collection):\n    \"\"\"\n    Collection of LinkedPhase instances.\n    \"\"\"\n\n    @property\n    def _type(self) -&gt; str:\n        return 'category'  # datablock or category\n\n    @property\n    def _child_class(self) -&gt; Type[LinkedPhase]:\n        return LinkedPhase\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiment","title":"<code>experiment</code>","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments.experiment.BaseExperiment","title":"<code>BaseExperiment</code>","text":"<p>               Bases: <code>Datablock</code></p> <p>Base class for all experiments with only core attributes. Wraps experiment type, instrument and datastore.</p> Source code in <code>src/easydiffraction/experiments/experiment.py</code> <pre><code>class BaseExperiment(Datablock):\n    \"\"\"\n    Base class for all experiments with only core attributes.\n    Wraps experiment type, instrument and datastore.\n    \"\"\"\n\n    # TODO: Find better name for the attribute 'type'.\n    #  1. It shadows the built-in type() function.\n    #  2. It is not very clear what it refers to.\n    def __init__(self, name: str, type: ExperimentType):\n        self.name = name\n        self.type = type\n        self.datastore = DatastoreFactory.create(\n            sample_form=self.type.sample_form.value,\n            experiment=self,\n        )\n\n    # ---------------------------\n    # Name (ID) of the experiment\n    # ---------------------------\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    @enforce_type\n    def name(self, new_name: str):\n        self._name = new_name\n\n    # ---------------\n    # Experiment type\n    # ---------------\n\n    @property\n    def type(self):\n        return self._type\n\n    @type.setter\n    @enforce_type\n    def type(self, new_experiment_type: ExperimentType):\n        self._type = new_experiment_type\n\n    # ----------------\n    # Misc. Need to be sorted\n    # ----------------\n\n    def as_cif(\n        self,\n        max_points: Optional[int] = None,\n    ) -&gt; str:\n        \"\"\"\n        Export the sample model to CIF format.\n        Returns:\n            str: CIF string representation of the experiment.\n        \"\"\"\n        # Data block header\n        cif_lines: List[str] = [f'data_{self.name}']\n\n        # Experiment type\n        cif_lines += ['', self.type.as_cif()]\n\n        # Instrument setup and calibration\n        if hasattr(self, 'instrument'):\n            cif_lines += ['', self.instrument.as_cif()]\n\n        # Peak profile, broadening and asymmetry\n        if hasattr(self, 'peak'):\n            cif_lines += ['', self.peak.as_cif()]\n\n        # Phase scale factors for powder experiments\n        if hasattr(self, 'linked_phases') and self.linked_phases._items:\n            cif_lines += ['', self.linked_phases.as_cif()]\n\n        # Crystal scale factor for single crystal experiments\n        if hasattr(self, 'linked_crystal'):\n            cif_lines += ['', self.linked_crystal.as_cif()]\n\n        # Background points\n        if hasattr(self, 'background') and self.background._items:\n            cif_lines += ['', self.background.as_cif()]\n\n        # Excluded regions\n        if hasattr(self, 'excluded_regions') and self.excluded_regions._items:\n            cif_lines += ['', self.excluded_regions.as_cif()]\n\n        # Measured data\n        if hasattr(self, 'datastore') and hasattr(self.datastore, 'pattern'):\n            cif_lines.append('')\n            cif_lines.append('loop_')\n            category = '_pd_meas'  # TODO: Add category to pattern component\n            attributes = ('2theta_scan', 'intensity_total', 'intensity_total_su')\n            for attribute in attributes:\n                cif_lines.append(f'{category}.{attribute}')\n            pattern = self.datastore.pattern\n            if max_points is not None and len(pattern.x) &gt; 2 * max_points:\n                for i in range(max_points):\n                    x = pattern.x[i]\n                    meas = pattern.meas[i]\n                    meas_su = pattern.meas_su[i]\n                    cif_lines.append(f'{x} {meas} {meas_su}')\n                cif_lines.append('...')\n                for i in range(-max_points, 0):\n                    x = pattern.x[i]\n                    meas = pattern.meas[i]\n                    meas_su = pattern.meas_su[i]\n                    cif_lines.append(f'{x} {meas} {meas_su}')\n            else:\n                for x, meas, meas_su in zip(pattern.x, pattern.meas, pattern.meas_su):\n                    cif_lines.append(f'{x} {meas} {meas_su}')\n\n        return '\\n'.join(cif_lines)\n\n    def show_as_cif(self) -&gt; None:\n        cif_text: str = self.as_cif(max_points=5)\n        paragraph_title: str = paragraph(f\"Experiment \ud83d\udd2c '{self.name}' as cif\")\n        render_cif(cif_text, paragraph_title)\n\n    @abstractmethod\n    def _load_ascii_data_to_experiment(self, data_path: str) -&gt; None:\n        pass\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiment.BaseExperiment.as_cif","title":"<code>as_cif(max_points=None)</code>","text":"<p>Export the sample model to CIF format. Returns:     str: CIF string representation of the experiment.</p> Source code in <code>src/easydiffraction/experiments/experiment.py</code> <pre><code>def as_cif(\n    self,\n    max_points: Optional[int] = None,\n) -&gt; str:\n    \"\"\"\n    Export the sample model to CIF format.\n    Returns:\n        str: CIF string representation of the experiment.\n    \"\"\"\n    # Data block header\n    cif_lines: List[str] = [f'data_{self.name}']\n\n    # Experiment type\n    cif_lines += ['', self.type.as_cif()]\n\n    # Instrument setup and calibration\n    if hasattr(self, 'instrument'):\n        cif_lines += ['', self.instrument.as_cif()]\n\n    # Peak profile, broadening and asymmetry\n    if hasattr(self, 'peak'):\n        cif_lines += ['', self.peak.as_cif()]\n\n    # Phase scale factors for powder experiments\n    if hasattr(self, 'linked_phases') and self.linked_phases._items:\n        cif_lines += ['', self.linked_phases.as_cif()]\n\n    # Crystal scale factor for single crystal experiments\n    if hasattr(self, 'linked_crystal'):\n        cif_lines += ['', self.linked_crystal.as_cif()]\n\n    # Background points\n    if hasattr(self, 'background') and self.background._items:\n        cif_lines += ['', self.background.as_cif()]\n\n    # Excluded regions\n    if hasattr(self, 'excluded_regions') and self.excluded_regions._items:\n        cif_lines += ['', self.excluded_regions.as_cif()]\n\n    # Measured data\n    if hasattr(self, 'datastore') and hasattr(self.datastore, 'pattern'):\n        cif_lines.append('')\n        cif_lines.append('loop_')\n        category = '_pd_meas'  # TODO: Add category to pattern component\n        attributes = ('2theta_scan', 'intensity_total', 'intensity_total_su')\n        for attribute in attributes:\n            cif_lines.append(f'{category}.{attribute}')\n        pattern = self.datastore.pattern\n        if max_points is not None and len(pattern.x) &gt; 2 * max_points:\n            for i in range(max_points):\n                x = pattern.x[i]\n                meas = pattern.meas[i]\n                meas_su = pattern.meas_su[i]\n                cif_lines.append(f'{x} {meas} {meas_su}')\n            cif_lines.append('...')\n            for i in range(-max_points, 0):\n                x = pattern.x[i]\n                meas = pattern.meas[i]\n                meas_su = pattern.meas_su[i]\n                cif_lines.append(f'{x} {meas} {meas_su}')\n        else:\n            for x, meas, meas_su in zip(pattern.x, pattern.meas, pattern.meas_su):\n                cif_lines.append(f'{x} {meas} {meas_su}')\n\n    return '\\n'.join(cif_lines)\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiment.BasePowderExperiment","title":"<code>BasePowderExperiment</code>","text":"<p>               Bases: <code>BaseExperiment</code></p> <p>Base class for all powder experiments.</p> Source code in <code>src/easydiffraction/experiments/experiment.py</code> <pre><code>class BasePowderExperiment(BaseExperiment):\n    \"\"\"\n    Base class for all powder experiments.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        type: ExperimentType,\n    ) -&gt; None:\n        super().__init__(name=name, type=type)\n\n        self._peak_profile_type: str = DEFAULT_PEAK_PROFILE_TYPE[self.type.scattering_type.value][self.type.beam_mode.value]\n        self.peak = PeakFactory.create(\n            scattering_type=self.type.scattering_type.value,\n            beam_mode=self.type.beam_mode.value,\n            profile_type=self._peak_profile_type,\n        )\n\n        self.linked_phases: LinkedPhases = LinkedPhases()\n        self.excluded_regions: ExcludedRegions = ExcludedRegions(parent=self)\n\n    @abstractmethod\n    def _load_ascii_data_to_experiment(self, data_path: str) -&gt; None:\n        pass\n\n    @property\n    def peak_profile_type(self):\n        return self._peak_profile_type\n\n    @peak_profile_type.setter\n    def peak_profile_type(self, new_type: str):\n        if new_type not in PeakFactory._supported[self.type.scattering_type.value][self.type.beam_mode.value]:\n            supported_types = list(PeakFactory._supported[self.type.scattering_type.value][self.type.beam_mode.value].keys())\n            print(warning(f\"Unsupported peak profile '{new_type}'\"))\n            print(f'Supported peak profiles: {supported_types}')\n            print(\"For more information, use 'show_supported_peak_profile_types()'\")\n            return\n        self.peak = PeakFactory.create(\n            scattering_type=self.type.scattering_type.value, beam_mode=self.type.beam_mode.value, profile_type=new_type\n        )\n        self._peak_profile_type = new_type\n        print(paragraph(f\"Peak profile type for experiment '{self.name}' changed to\"))\n        print(new_type)\n\n    def show_supported_peak_profile_types(self):\n        columns_headers = ['Peak profile type', 'Description']\n        columns_alignment = ['left', 'left']\n        columns_data = []\n        for name, config in PeakFactory._supported[self.type.scattering_type.value][self.type.beam_mode.value].items():\n            description = getattr(config, '_description', 'No description provided.')\n            columns_data.append([name, description])\n\n        print(paragraph('Supported peak profile types'))\n        render_table(columns_headers=columns_headers, columns_alignment=columns_alignment, columns_data=columns_data)\n\n    def show_current_peak_profile_type(self):\n        print(paragraph('Current peak profile type'))\n        print(self.peak_profile_type)\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiment.ExperimentFactory","title":"<code>ExperimentFactory</code>","text":"<p>Creates Experiment instances with only relevant attributes.</p> Source code in <code>src/easydiffraction/experiments/experiment.py</code> <pre><code>class ExperimentFactory:\n    \"\"\"Creates Experiment instances with only relevant attributes.\"\"\"\n\n    _supported = {\n        'bragg': {\n            'powder': PowderExperiment,\n            'single crystal': SingleCrystalExperiment,\n        },\n        'total': {\n            'powder': PairDistributionFunctionExperiment,\n        },\n    }\n\n    @classmethod\n    def create(\n        cls,\n        name: str,\n        sample_form: DEFAULT_SAMPLE_FORM,\n        beam_mode: DEFAULT_BEAM_MODE,\n        radiation_probe: DEFAULT_RADIATION_PROBE,\n        scattering_type: DEFAULT_SCATTERING_TYPE,\n    ) -&gt; BaseExperiment:\n        # TODO: Add checks for expt_type and expt_class\n        expt_type = ExperimentType(\n            sample_form=sample_form,\n            beam_mode=beam_mode,\n            radiation_probe=radiation_probe,\n            scattering_type=scattering_type,\n        )\n\n        expt_class = cls._supported[scattering_type][sample_form]\n        expt_obj = expt_class(\n            name=name,\n            type=expt_type,\n        )\n\n        return expt_obj\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiment.PairDistributionFunctionExperiment","title":"<code>PairDistributionFunctionExperiment</code>","text":"<p>               Bases: <code>BasePowderExperiment</code></p> <p>PDF experiment class with specific attributes.</p> Source code in <code>src/easydiffraction/experiments/experiment.py</code> <pre><code>class PairDistributionFunctionExperiment(BasePowderExperiment):\n    \"\"\"PDF experiment class with specific attributes.\"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        type: ExperimentType,\n    ):\n        super().__init__(name=name, type=type)\n\n    def _load_ascii_data_to_experiment(self, data_path):\n        \"\"\"\n        Loads x, y, sy values from an ASCII data file into the experiment.\n\n        The file must be structured as:\n            x  y  sy\n        \"\"\"\n        try:\n            from diffpy.utils.parsers.loaddata import loadData\n        except ImportError:\n            raise ImportError('diffpy module not found.')\n        try:\n            data = loadData(data_path)\n        except Exception as e:\n            raise IOError(f'Failed to read data from {data_path}: {e}')\n\n        if data.shape[1] &lt; 2:\n            raise ValueError('Data file must have at least two columns: x and y.')\n\n        default_sy = 0.03\n        if data.shape[1] &lt; 3:\n            print(f'Warning: No uncertainty (sy) column provided. Defaulting to {default_sy}.')\n\n        # Extract x, y, and sy data\n        x = data[:, 0]\n        # We should also add sx = data[:, 2] to capture the e.s.d. of x. It\n        # might be useful in future.\n        y = data[:, 1]\n        # Using sqrt isn\u2019t appropriate here, as the y-scale isn\u2019t raw counts\n        # and includes both positive and negative values. For now, set the\n        # e.s.d. to a fixed value of 0.03 if it\u2019s not included in the measured\n        # data file. We should improve this later.\n        # sy = data[:, 3] if data.shape[1] &gt; 2 else np.sqrt(y)\n        sy = data[:, 2] if data.shape[1] &gt; 2 else np.full_like(y, fill_value=default_sy)\n\n        # Attach the data to the experiment's datastore\n        self.datastore.pattern.x = x\n        self.datastore.pattern.meas = y\n        self.datastore.pattern.meas_su = sy\n\n        print(paragraph('Data loaded successfully'))\n        print(f\"Experiment \ud83d\udd2c '{self.name}'. Number of data points: {len(x)}\")\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiment.PowderExperiment","title":"<code>PowderExperiment</code>","text":"<p>               Bases: <code>InstrumentMixin</code>, <code>BasePowderExperiment</code></p> <p>Powder experiment class with specific attributes. Wraps background, peak profile, and linked phases.</p> Source code in <code>src/easydiffraction/experiments/experiment.py</code> <pre><code>class PowderExperiment(\n    InstrumentMixin,\n    BasePowderExperiment,\n):\n    \"\"\"\n    Powder experiment class with specific attributes.\n    Wraps background, peak profile, and linked phases.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        type: ExperimentType,\n    ) -&gt; None:\n        super().__init__(name=name, type=type)\n\n        self._background_type: str = DEFAULT_BACKGROUND_TYPE\n        self.background = BackgroundFactory.create(background_type=self.background_type)\n\n    # -------------\n    # Measured data\n    # -------------\n\n    def _load_ascii_data_to_experiment(self, data_path: str) -&gt; None:\n        \"\"\"\n        Loads x, y, sy values from an ASCII data file into the experiment.\n\n        The file must be structured as:\n            x  y  sy\n        \"\"\"\n        try:\n            data = np.loadtxt(data_path)\n        except Exception as e:\n            raise IOError(f'Failed to read data from {data_path}: {e}')\n\n        if data.shape[1] &lt; 2:\n            raise ValueError('Data file must have at least two columns: x and y.')\n\n        if data.shape[1] &lt; 3:\n            print('Warning: No uncertainty (sy) column provided. Defaulting to sqrt(y).')\n\n        # Extract x, y data\n        x: np.ndarray = data[:, 0]\n        y: np.ndarray = data[:, 1]\n\n        # Round x to 4 decimal places\n        # TODO: This is needed for CrysPy, as otherwise it fails to match\n        #  the size of the data arrays.\n        x = np.round(x, 4)\n\n        # Determine sy from column 3 if available, otherwise use sqrt(y)\n        sy: np.ndarray = data[:, 2] if data.shape[1] &gt; 2 else np.sqrt(y)\n\n        # Replace values smaller than 0.0001 with 1.0\n        # TODO: This is needed for minimization algorithms that fail with\n        #  very small or zero uncertainties.\n        sy = np.where(sy &lt; 0.0001, 1.0, sy)\n\n        # Attach the data to the experiment's datastore\n\n        # The full pattern data\n        self.datastore.pattern.full_x = x\n        self.datastore.pattern.full_meas = y\n        self.datastore.pattern.full_meas_su = sy\n\n        # The pattern data used for fitting (without excluded points)\n        # This is the same as full_x, full_meas, full_meas_su by default\n        self.datastore.pattern.x = x\n        self.datastore.pattern.meas = y\n        self.datastore.pattern.meas_su = sy\n\n        # Excluded mask\n        # No excluded points by default\n        self.datastore.pattern.excluded = np.full(x.shape, fill_value=False, dtype=bool)\n\n        print(paragraph('Data loaded successfully'))\n        print(f\"Experiment \ud83d\udd2c '{self.name}'. Number of data points: {len(x)}\")\n\n    @property\n    def background_type(self):\n        return self._background_type\n\n    @background_type.setter\n    def background_type(self, new_type):\n        if new_type not in BackgroundFactory._supported:\n            supported_types = list(BackgroundFactory._supported.keys())\n            print(warning(f\"Unknown background type '{new_type}'\"))\n            print(f'Supported background types: {supported_types}')\n            print(\"For more information, use 'show_supported_background_types()'\")\n            return\n        self.background = BackgroundFactory.create(new_type)\n        self._background_type = new_type\n        print(paragraph(f\"Background type for experiment '{self.name}' changed to\"))\n        print(new_type)\n\n    def show_supported_background_types(self):\n        columns_headers = ['Background type', 'Description']\n        columns_alignment = ['left', 'left']\n        columns_data = []\n        for name, config in BackgroundFactory._supported.items():\n            description = getattr(config, '_description', 'No description provided.')\n            columns_data.append([name, description])\n\n        print(paragraph('Supported background types'))\n        render_table(columns_headers=columns_headers, columns_alignment=columns_alignment, columns_data=columns_data)\n\n    def show_current_background_type(self):\n        print(paragraph('Current background type'))\n        print(self.background_type)\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiment.SingleCrystalExperiment","title":"<code>SingleCrystalExperiment</code>","text":"<p>               Bases: <code>BaseExperiment</code></p> <p>Single crystal experiment class with specific attributes.</p> Source code in <code>src/easydiffraction/experiments/experiment.py</code> <pre><code>class SingleCrystalExperiment(BaseExperiment):\n    \"\"\"Single crystal experiment class with specific attributes.\"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        type: ExperimentType,\n    ) -&gt; None:\n        super().__init__(name=name, type=type)\n        self.linked_crystal = None\n\n    def show_meas_chart(self) -&gt; None:\n        print('Showing measured data chart is not implemented yet.')\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiments","title":"<code>experiments</code>","text":""},{"location":"api-reference/experiments/#easydiffraction.experiments.experiments.Experiments","title":"<code>Experiments</code>","text":"<p>               Bases: <code>Collection</code></p> <p>Collection manager for multiple Experiment instances.</p> Source code in <code>src/easydiffraction/experiments/experiments.py</code> <pre><code>class Experiments(Collection):\n    \"\"\"\n    Collection manager for multiple Experiment instances.\n    \"\"\"\n\n    @property\n    def _child_class(self):\n        return BaseExperiment\n\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self._experiments: Dict[str, BaseExperiment] = self._items  # Alias for legacy support\n\n    def add(\n        self,\n        experiment=None,\n        name=None,\n        sample_form=None,\n        beam_mode=None,\n        radiation_probe=None,\n        scattering_type=None,\n        cif_path=None,\n        cif_str=None,\n        data_path=None,\n    ):\n        \"\"\"\n        Add a new experiment to the collection.\n        \"\"\"\n        if scattering_type is None:\n            scattering_type = 'bragg'\n        if experiment:\n            self._add_prebuilt_experiment(experiment)\n        elif cif_path:\n            self._add_from_cif_path(cif_path)\n        elif cif_str:\n            self._add_from_cif_string(cif_str)\n        elif all(\n            [\n                name,\n                sample_form,\n                beam_mode,\n                radiation_probe,\n                data_path,\n            ]\n        ):\n            self._add_from_data_path(\n                name=name,\n                sample_form=sample_form,\n                beam_mode=beam_mode,\n                radiation_probe=radiation_probe,\n                scattering_type=scattering_type,\n                data_path=data_path,\n            )\n        else:\n            raise ValueError('Provide either experiment, type parameters, cif_path, cif_str, or data_path')\n\n    @enforce_type\n    def _add_prebuilt_experiment(self, experiment: BaseExperiment):\n        self._experiments[experiment.name] = experiment\n\n    def _add_from_cif_path(self, cif_path: str) -&gt; None:\n        print('Loading Experiment from CIF path...')\n        raise NotImplementedError('CIF loading not implemented.')\n\n    def _add_from_cif_string(self, cif_str: str) -&gt; None:\n        print('Loading Experiment from CIF string...')\n        raise NotImplementedError('CIF loading not implemented.')\n\n    def _add_from_data_path(\n        self,\n        name,\n        sample_form,\n        beam_mode,\n        radiation_probe,\n        scattering_type,\n        data_path,\n    ):\n        \"\"\"\n        Load an experiment from raw data ASCII file.\n        \"\"\"\n        print(paragraph('Loading measured data from ASCII file'))\n        print(os.path.abspath(data_path))\n        experiment = ExperimentFactory.create(\n            name=name,\n            sample_form=sample_form,\n            beam_mode=beam_mode,\n            radiation_probe=radiation_probe,\n            scattering_type=scattering_type,\n        )\n        experiment._load_ascii_data_to_experiment(data_path)\n        self._experiments[experiment.name] = experiment\n\n    def remove(self, experiment_id: str) -&gt; None:\n        if experiment_id in self._experiments:\n            del self._experiments[experiment_id]\n\n    def show_names(self) -&gt; None:\n        print(paragraph('Defined experiments' + ' \ud83d\udd2c'))\n        print(self.ids)\n\n    @property\n    def ids(self) -&gt; List[str]:\n        return list(self._experiments.keys())\n\n    def show_params(self) -&gt; None:\n        for exp in self._experiments.values():\n            print(exp)\n\n    def as_cif(self) -&gt; str:\n        return '\\n\\n'.join([exp.as_cif() for exp in self._experiments.values()])\n</code></pre>"},{"location":"api-reference/experiments/#easydiffraction.experiments.experiments.Experiments.add","title":"<code>add(experiment=None, name=None, sample_form=None, beam_mode=None, radiation_probe=None, scattering_type=None, cif_path=None, cif_str=None, data_path=None)</code>","text":"<p>Add a new experiment to the collection.</p> Source code in <code>src/easydiffraction/experiments/experiments.py</code> <pre><code>def add(\n    self,\n    experiment=None,\n    name=None,\n    sample_form=None,\n    beam_mode=None,\n    radiation_probe=None,\n    scattering_type=None,\n    cif_path=None,\n    cif_str=None,\n    data_path=None,\n):\n    \"\"\"\n    Add a new experiment to the collection.\n    \"\"\"\n    if scattering_type is None:\n        scattering_type = 'bragg'\n    if experiment:\n        self._add_prebuilt_experiment(experiment)\n    elif cif_path:\n        self._add_from_cif_path(cif_path)\n    elif cif_str:\n        self._add_from_cif_string(cif_str)\n    elif all(\n        [\n            name,\n            sample_form,\n            beam_mode,\n            radiation_probe,\n            data_path,\n        ]\n    ):\n        self._add_from_data_path(\n            name=name,\n            sample_form=sample_form,\n            beam_mode=beam_mode,\n            radiation_probe=radiation_probe,\n            scattering_type=scattering_type,\n            data_path=data_path,\n        )\n    else:\n        raise ValueError('Provide either experiment, type parameters, cif_path, cif_str, or data_path')\n</code></pre>"},{"location":"api-reference/plotting/","title":"plotting","text":""},{"location":"api-reference/plotting/#easydiffraction.plotting","title":"<code>plotting</code>","text":""},{"location":"api-reference/plotting/#easydiffraction.plotting.plotting","title":"<code>plotting</code>","text":""},{"location":"api-reference/plotting/#easydiffraction.plotting.plotting.Plotter","title":"<code>Plotter</code>","text":"Source code in <code>src/easydiffraction/plotting/plotting.py</code> <pre><code>class Plotter:\n    def __init__(self):\n        # Plotting engine\n        self._engine = DEFAULT_ENGINE\n\n        # X-axis limits\n        self._x_min = DEFAULT_MIN\n        self._x_max = DEFAULT_MAX\n\n        # Chart height\n        self.height = DEFAULT_HEIGHT\n\n        # Plotter instance\n        self._plotter = PlotterFactory.create_plotter(self._engine)\n\n    @property\n    def engine(self):\n        \"\"\"Returns the current plotting engine name.\"\"\"\n        return self._engine\n\n    @engine.setter\n    def engine(self, new_engine):\n        \"\"\"Sets the current plotting engine name and updates the plotter instance.\"\"\"\n        new_plotter = PlotterFactory.create_plotter(new_engine)\n        if new_plotter is None:\n            return\n        self._engine = new_engine\n        self._plotter = new_plotter\n        print(paragraph('Current plotter changed to'))\n        print(self._engine)\n\n    @property\n    def x_min(self):\n        \"\"\"Returns the minimum x-axis limit.\"\"\"\n        return self._x_min\n\n    @x_min.setter\n    def x_min(self, value):\n        \"\"\"Sets the minimum x-axis limit.\"\"\"\n        if value is not None:\n            self._x_min = value\n        else:\n            self._x_min = DEFAULT_MIN\n\n    @property\n    def x_max(self):\n        \"\"\"Returns the maximum x-axis limit.\"\"\"\n        return self._x_max\n\n    @x_max.setter\n    def x_max(self, value):\n        \"\"\"Sets the maximum x-axis limit.\"\"\"\n        if value is not None:\n            self._x_max = value\n        else:\n            self._x_max = DEFAULT_MAX\n\n    @property\n    def height(self):\n        \"\"\"Returns the chart height.\"\"\"\n        return self._height\n\n    @height.setter\n    def height(self, value):\n        \"\"\"Sets the chart height.\"\"\"\n        if value is not None:\n            self._height = value\n        else:\n            self._height = DEFAULT_HEIGHT\n\n    def show_config(self):\n        \"\"\"\n        Displays the current configuration settings.\n        \"\"\"\n        columns_headers = ['Parameter', 'Value']\n        columns_alignment = ['left', 'left']\n        columns_data = [\n            ['Plotting engine', self.engine],\n            ['x-axis limits', f'[{self.x_min}, {self.x_max}]'],\n            ['Chart height', self.height],\n        ]\n\n        print(paragraph('Current plotter configuration'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=columns_data,\n        )\n\n    def show_supported_engines(self):\n        \"\"\"\n        Displays the supported plotting engines.\n        \"\"\"\n        columns_headers = ['Engine', 'Description']\n        columns_alignment = ['left', 'left']\n        columns_data = []\n        for name, config in PlotterFactory._SUPPORTED_ENGINES_DICT.items():\n            description = config.get('description', 'No description provided.')\n            columns_data.append([name, description])\n\n        print(paragraph('Supported plotter engines'))\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=columns_data,\n        )\n\n    def plot_meas(self, pattern, expt_name, expt_type, x_min=None, x_max=None, d_spacing=False):\n        if pattern.x is None:\n            error(f'No data available for experiment {expt_name}')\n            return\n        if pattern.meas is None:\n            error(f'No measured data available for experiment {expt_name}')\n            return\n\n        if d_spacing:\n            x_array = pattern.d\n        else:\n            x_array = pattern.x\n        x = self._filtered_y_array(\n            y_array=x_array,\n            x_array=x_array,\n            x_min=x_min,\n            x_max=x_max,\n        )\n        y_meas = self._filtered_y_array(\n            y_array=pattern.meas,\n            x_array=x_array,\n            x_min=x_min,\n            x_max=x_max,\n        )\n\n        y_series = [y_meas]\n        y_labels = ['meas']\n\n        if d_spacing:\n            axes_labels = DEFAULT_AXES_LABELS[expt_type.scattering_type.value]['d-spacing']\n        else:\n            axes_labels = DEFAULT_AXES_LABELS[expt_type.scattering_type.value][expt_type.beam_mode.value]\n\n        self._plotter.plot(\n            x=x,\n            y_series=y_series,\n            labels=y_labels,\n            axes_labels=axes_labels,\n            title=f\"Measured data for experiment \ud83d\udd2c '{expt_name}'\",\n            height=self.height,\n        )\n\n    def plot_calc(\n        self,\n        pattern,\n        expt_name,\n        expt_type,\n        x_min=None,\n        x_max=None,\n        d_spacing=False,\n    ):\n        if pattern.x is None:\n            error(f'No data available for experiment {expt_name}')\n            return\n        if pattern.calc is None:\n            print(f'No calculated data available for experiment {expt_name}')\n            return\n\n        if d_spacing:\n            x_array = pattern.d\n        else:\n            x_array = pattern.x\n        x = self._filtered_y_array(\n            y_array=x_array,\n            x_array=x_array,\n            x_min=x_min,\n            x_max=x_max,\n        )\n        y_calc = self._filtered_y_array(\n            y_array=pattern.calc,\n            x_array=x_array,\n            x_min=x_min,\n            x_max=x_max,\n        )\n\n        y_series = [y_calc]\n        y_labels = ['calc']\n\n        if d_spacing:\n            axes_labels = DEFAULT_AXES_LABELS[expt_type.scattering_type.value]['d-spacing']\n        else:\n            axes_labels = DEFAULT_AXES_LABELS[expt_type.scattering_type.value][expt_type.beam_mode.value]\n\n        self._plotter.plot(\n            x=x,\n            y_series=y_series,\n            labels=y_labels,\n            axes_labels=axes_labels,\n            title=f\"Calculated data for experiment \ud83d\udd2c '{expt_name}'\",\n            height=self.height,\n        )\n\n    def plot_meas_vs_calc(\n        self,\n        pattern,\n        expt_name,\n        expt_type,\n        x_min=None,\n        x_max=None,\n        show_residual=False,\n        d_spacing=False,\n    ):\n        if pattern.x is None:\n            print(error(f'No data available for experiment {expt_name}'))\n            return\n        if pattern.meas is None:\n            print(error(f'No measured data available for experiment {expt_name}'))\n            return\n        if pattern.calc is None:\n            print(error(f'No calculated data available for experiment {expt_name}'))\n            return\n\n        if d_spacing:\n            x_array = pattern.d\n        else:\n            x_array = pattern.x\n        x = self._filtered_y_array(\n            y_array=x_array,\n            x_array=x_array,\n            x_min=x_min,\n            x_max=x_max,\n        )\n        y_meas = self._filtered_y_array(\n            y_array=pattern.meas,\n            x_array=x_array,\n            x_min=x_min,\n            x_max=x_max,\n        )\n        y_calc = self._filtered_y_array(\n            y_array=pattern.calc,\n            x_array=x_array,\n            x_min=x_min,\n            x_max=x_max,\n        )\n\n        y_series = [y_meas, y_calc]\n        y_labels = ['meas', 'calc']\n\n        if d_spacing:\n            axes_labels = DEFAULT_AXES_LABELS[expt_type.scattering_type.value]['d-spacing']\n        else:\n            axes_labels = DEFAULT_AXES_LABELS[expt_type.scattering_type.value][expt_type.beam_mode.value]\n\n        if show_residual:\n            y_resid = y_meas - y_calc\n            y_series.append(y_resid)\n            y_labels.append('resid')\n\n        self._plotter.plot(\n            x=x,\n            y_series=y_series,\n            labels=y_labels,\n            axes_labels=axes_labels,\n            title=f\"Measured vs Calculated data for experiment \ud83d\udd2c '{expt_name}'\",\n            height=self.height,\n        )\n\n    def _filtered_y_array(\n        self,\n        y_array,\n        x_array,\n        x_min,\n        x_max,\n    ):\n        if x_min is None:\n            x_min = self.x_min\n        if x_max is None:\n            x_max = self.x_max\n\n        mask = (x_array &gt;= x_min) &amp; (x_array &lt;= x_max)\n        filtered_y_array = y_array[mask]\n\n        return filtered_y_array\n</code></pre>"},{"location":"api-reference/plotting/#easydiffraction.plotting.plotting.Plotter.engine","title":"<code>engine</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the current plotting engine name.</p>"},{"location":"api-reference/plotting/#easydiffraction.plotting.plotting.Plotter.height","title":"<code>height</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the chart height.</p>"},{"location":"api-reference/plotting/#easydiffraction.plotting.plotting.Plotter.show_config","title":"<code>show_config()</code>","text":"<p>Displays the current configuration settings.</p> Source code in <code>src/easydiffraction/plotting/plotting.py</code> <pre><code>def show_config(self):\n    \"\"\"\n    Displays the current configuration settings.\n    \"\"\"\n    columns_headers = ['Parameter', 'Value']\n    columns_alignment = ['left', 'left']\n    columns_data = [\n        ['Plotting engine', self.engine],\n        ['x-axis limits', f'[{self.x_min}, {self.x_max}]'],\n        ['Chart height', self.height],\n    ]\n\n    print(paragraph('Current plotter configuration'))\n    render_table(\n        columns_headers=columns_headers,\n        columns_alignment=columns_alignment,\n        columns_data=columns_data,\n    )\n</code></pre>"},{"location":"api-reference/plotting/#easydiffraction.plotting.plotting.Plotter.show_supported_engines","title":"<code>show_supported_engines()</code>","text":"<p>Displays the supported plotting engines.</p> Source code in <code>src/easydiffraction/plotting/plotting.py</code> <pre><code>def show_supported_engines(self):\n    \"\"\"\n    Displays the supported plotting engines.\n    \"\"\"\n    columns_headers = ['Engine', 'Description']\n    columns_alignment = ['left', 'left']\n    columns_data = []\n    for name, config in PlotterFactory._SUPPORTED_ENGINES_DICT.items():\n        description = config.get('description', 'No description provided.')\n        columns_data.append([name, description])\n\n    print(paragraph('Supported plotter engines'))\n    render_table(\n        columns_headers=columns_headers,\n        columns_alignment=columns_alignment,\n        columns_data=columns_data,\n    )\n</code></pre>"},{"location":"api-reference/plotting/#easydiffraction.plotting.plotting.Plotter.x_max","title":"<code>x_max</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the maximum x-axis limit.</p>"},{"location":"api-reference/plotting/#easydiffraction.plotting.plotting.Plotter.x_min","title":"<code>x_min</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the minimum x-axis limit.</p>"},{"location":"api-reference/project/","title":"project","text":""},{"location":"api-reference/project/#easydiffraction.project","title":"<code>project</code>","text":""},{"location":"api-reference/project/#easydiffraction.project.Project","title":"<code>Project</code>","text":"<p>Central API for managing a diffraction data analysis project. Provides access to sample models, experiments, analysis, and summary.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>class Project:\n    \"\"\"\n    Central API for managing a diffraction data analysis project.\n    Provides access to sample models, experiments, analysis, and summary.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str = 'untitled_project',\n        title: str = 'Untitled Project',\n        description: str = '',\n    ) -&gt; None:\n        self.info: ProjectInfo = ProjectInfo()\n        self.info.name = name\n        self.info.title = title\n        self.info.description = description\n        self.sample_models = SampleModels()\n        self.experiments = Experiments()\n        self.plotter = Plotter()\n        self.analysis = Analysis(self)\n        self.summary = Summary(self)\n        self._saved = False\n        self._varname = varname()\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Convenience property to access the project's name directly.\"\"\"\n        return self.info.name\n\n    # ------------------------------------------\n    #  Project File I/O\n    # ------------------------------------------\n\n    def load(self, dir_path: str) -&gt; None:\n        \"\"\"\n        Load a project from a given directory.\n        Loads project info, sample models, experiments, etc.\n        \"\"\"\n        print(paragraph(f'Loading project \ud83d\udce6 from {dir_path}'))\n        print(dir_path)\n        self.info.path = dir_path\n        # TODO: load project components from files inside dir_path\n        print('Loading project is not implemented yet.')\n        self._saved = True\n\n    def save_as(\n        self,\n        dir_path: str,\n        temporary: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        Save the project into a new directory.\n        \"\"\"\n        if temporary:\n            tmp: str = tempfile.gettempdir()\n            dir_path = os.path.join(tmp, dir_path)\n        self.info.path = dir_path\n        self.save()\n\n    def save(self) -&gt; None:\n        \"\"\"\n        Save the project into the existing project directory.\n        \"\"\"\n        if not self.info.path:\n            print(error('Project path not specified. Use save_as() to define the path first.'))\n            return\n\n        print(paragraph(f\"Saving project \ud83d\udce6 '{self.name}' to\"))\n        print(os.path.abspath(self.info.path))\n\n        os.makedirs(self.info.path, exist_ok=True)\n\n        # Save project info\n        with open(os.path.join(self.info.path, 'project.cif'), 'w') as f:\n            f.write(self.info.as_cif())\n            print('\u2705 project.cif')\n\n        # Save sample models\n        sm_dir: str = os.path.join(self.info.path, 'sample_models')\n        os.makedirs(sm_dir, exist_ok=True)\n        for model in self.sample_models:\n            file_name: str = f'{model.name}.cif'\n            file_path: str = os.path.join(sm_dir, file_name)\n            with open(file_path, 'w') as f:\n                f.write(model.as_cif())\n                print(f'\u2705 sample_models/{file_name}')\n\n        # Save experiments\n        expt_dir: str = os.path.join(self.info.path, 'experiments')\n        os.makedirs(expt_dir, exist_ok=True)\n        for experiment in self.experiments:\n            file_name: str = f'{experiment.name}.cif'\n            file_path: str = os.path.join(expt_dir, file_name)\n            with open(file_path, 'w') as f:\n                f.write(experiment.as_cif())\n                print(f'\u2705 experiments/{file_name}')\n\n        # Save analysis\n        with open(os.path.join(self.info.path, 'analysis.cif'), 'w') as f:\n            f.write(self.analysis.as_cif())\n            print('\u2705 analysis.cif')\n\n        # Save summary\n        with open(os.path.join(self.info.path, 'summary.cif'), 'w') as f:\n            f.write(self.summary.as_cif())\n            print('\u2705 summary.cif')\n\n        self.info.update_last_modified()\n        self._saved = True\n\n    # ------------------------------------------\n    #  Sample Models API Convenience Methods\n    # ------------------------------------------\n\n    def set_sample_models(self, sample_models: SampleModels) -&gt; None:\n        \"\"\"Attach a collection of sample models to the project.\"\"\"\n        self.sample_models = sample_models\n\n    def set_experiments(self, experiments: Experiments) -&gt; None:\n        \"\"\"Attach a collection of experiments to the project.\"\"\"\n        self.experiments = experiments\n\n    # ------------------------------------------\n    # Plotting\n    # ------------------------------------------\n\n    def plot_meas(\n        self,\n        expt_name,\n        x_min=None,\n        x_max=None,\n        d_spacing=False,\n    ):\n        experiment = self.experiments[expt_name]\n        pattern = experiment.datastore.pattern\n        expt_type = experiment.type\n\n        # Update d-spacing if necessary\n        # TODO: This is done before every plot, and not when parameters\n        #  needed for d-spacing conversion are changed. The reason is\n        #  to minimize the performance impact during the fitting process.\n        #  Need to find a better way to handle this.\n        if d_spacing:\n            self.update_pattern_d_spacing(expt_name)\n\n        # Plot measured pattern\n        self.plotter.plot_meas(\n            pattern,\n            expt_name,\n            expt_type,\n            x_min=x_min,\n            x_max=x_max,\n            d_spacing=d_spacing,\n        )\n\n    def plot_calc(\n        self,\n        expt_name,\n        x_min=None,\n        x_max=None,\n        d_spacing=False,\n    ):\n        self.analysis.calculate_pattern(expt_name)  # Recalculate pattern\n        experiment = self.experiments[expt_name]\n        pattern = experiment.datastore.pattern\n        expt_type = experiment.type\n\n        # Update d-spacing if necessary\n        # TODO: This is done before every plot, and not when parameters\n        #  needed for d-spacing conversion are changed. The reason is\n        #  to minimize the performance impact during the fitting process.\n        #  Need to find a better way to handle this.\n        if d_spacing:\n            self.update_pattern_d_spacing(expt_name)\n\n        # Plot calculated pattern\n        self.plotter.plot_calc(\n            pattern,\n            expt_name,\n            expt_type,\n            x_min=x_min,\n            x_max=x_max,\n            d_spacing=d_spacing,\n        )\n\n    def plot_meas_vs_calc(\n        self,\n        expt_name,\n        x_min=None,\n        x_max=None,\n        show_residual=False,\n        d_spacing=False,\n    ):\n        self.analysis.calculate_pattern(expt_name)  # Recalculate pattern\n        experiment = self.experiments[expt_name]\n        pattern = experiment.datastore.pattern\n        expt_type = experiment.type\n\n        # Update d-spacing if necessary\n        # TODO: This is done before every plot, and not when parameters\n        #  needed for d-spacing conversion are changed. The reason is\n        #  to minimize the performance impact during the fitting process.\n        #  Need to find a better way to handle this.\n        if d_spacing:\n            self.update_pattern_d_spacing(expt_name)\n\n        # Plot measured vs calculated\n        self.plotter.plot_meas_vs_calc(\n            pattern,\n            expt_name,\n            expt_type,\n            x_min=x_min,\n            x_max=x_max,\n            show_residual=show_residual,\n            d_spacing=d_spacing,\n        )\n\n    def update_pattern_d_spacing(self, expt_name: str) -&gt; None:\n        \"\"\"\n        Update the pattern's d-spacing based on the experiment's beam mode.\n        \"\"\"\n        experiment = self.experiments[expt_name]\n        pattern = experiment.datastore.pattern\n        expt_type = experiment.type\n        beam_mode = expt_type.beam_mode.value\n\n        if beam_mode == 'time-of-flight':\n            pattern.d = tof_to_d(\n                pattern.x,\n                experiment.instrument.calib_d_to_tof_offset.value,\n                experiment.instrument.calib_d_to_tof_linear.value,\n                experiment.instrument.calib_d_to_tof_quad.value,\n            )\n        elif beam_mode == 'constant wavelength':\n            pattern.d = twotheta_to_d(pattern.x, experiment.instrument.setup_wavelength.value)\n        else:\n            print(error(f'Unsupported beam mode: {beam_mode} for d-spacing update.'))\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.Project.load","title":"<code>load(dir_path)</code>","text":"<p>Load a project from a given directory. Loads project info, sample models, experiments, etc.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>def load(self, dir_path: str) -&gt; None:\n    \"\"\"\n    Load a project from a given directory.\n    Loads project info, sample models, experiments, etc.\n    \"\"\"\n    print(paragraph(f'Loading project \ud83d\udce6 from {dir_path}'))\n    print(dir_path)\n    self.info.path = dir_path\n    # TODO: load project components from files inside dir_path\n    print('Loading project is not implemented yet.')\n    self._saved = True\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.Project.name","title":"<code>name</code>  <code>property</code>","text":"<p>Convenience property to access the project's name directly.</p>"},{"location":"api-reference/project/#easydiffraction.project.Project.save","title":"<code>save()</code>","text":"<p>Save the project into the existing project directory.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>def save(self) -&gt; None:\n    \"\"\"\n    Save the project into the existing project directory.\n    \"\"\"\n    if not self.info.path:\n        print(error('Project path not specified. Use save_as() to define the path first.'))\n        return\n\n    print(paragraph(f\"Saving project \ud83d\udce6 '{self.name}' to\"))\n    print(os.path.abspath(self.info.path))\n\n    os.makedirs(self.info.path, exist_ok=True)\n\n    # Save project info\n    with open(os.path.join(self.info.path, 'project.cif'), 'w') as f:\n        f.write(self.info.as_cif())\n        print('\u2705 project.cif')\n\n    # Save sample models\n    sm_dir: str = os.path.join(self.info.path, 'sample_models')\n    os.makedirs(sm_dir, exist_ok=True)\n    for model in self.sample_models:\n        file_name: str = f'{model.name}.cif'\n        file_path: str = os.path.join(sm_dir, file_name)\n        with open(file_path, 'w') as f:\n            f.write(model.as_cif())\n            print(f'\u2705 sample_models/{file_name}')\n\n    # Save experiments\n    expt_dir: str = os.path.join(self.info.path, 'experiments')\n    os.makedirs(expt_dir, exist_ok=True)\n    for experiment in self.experiments:\n        file_name: str = f'{experiment.name}.cif'\n        file_path: str = os.path.join(expt_dir, file_name)\n        with open(file_path, 'w') as f:\n            f.write(experiment.as_cif())\n            print(f'\u2705 experiments/{file_name}')\n\n    # Save analysis\n    with open(os.path.join(self.info.path, 'analysis.cif'), 'w') as f:\n        f.write(self.analysis.as_cif())\n        print('\u2705 analysis.cif')\n\n    # Save summary\n    with open(os.path.join(self.info.path, 'summary.cif'), 'w') as f:\n        f.write(self.summary.as_cif())\n        print('\u2705 summary.cif')\n\n    self.info.update_last_modified()\n    self._saved = True\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.Project.save_as","title":"<code>save_as(dir_path, temporary=False)</code>","text":"<p>Save the project into a new directory.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>def save_as(\n    self,\n    dir_path: str,\n    temporary: bool = False,\n) -&gt; None:\n    \"\"\"\n    Save the project into a new directory.\n    \"\"\"\n    if temporary:\n        tmp: str = tempfile.gettempdir()\n        dir_path = os.path.join(tmp, dir_path)\n    self.info.path = dir_path\n    self.save()\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.Project.set_experiments","title":"<code>set_experiments(experiments)</code>","text":"<p>Attach a collection of experiments to the project.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>def set_experiments(self, experiments: Experiments) -&gt; None:\n    \"\"\"Attach a collection of experiments to the project.\"\"\"\n    self.experiments = experiments\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.Project.set_sample_models","title":"<code>set_sample_models(sample_models)</code>","text":"<p>Attach a collection of sample models to the project.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>def set_sample_models(self, sample_models: SampleModels) -&gt; None:\n    \"\"\"Attach a collection of sample models to the project.\"\"\"\n    self.sample_models = sample_models\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.Project.update_pattern_d_spacing","title":"<code>update_pattern_d_spacing(expt_name)</code>","text":"<p>Update the pattern's d-spacing based on the experiment's beam mode.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>def update_pattern_d_spacing(self, expt_name: str) -&gt; None:\n    \"\"\"\n    Update the pattern's d-spacing based on the experiment's beam mode.\n    \"\"\"\n    experiment = self.experiments[expt_name]\n    pattern = experiment.datastore.pattern\n    expt_type = experiment.type\n    beam_mode = expt_type.beam_mode.value\n\n    if beam_mode == 'time-of-flight':\n        pattern.d = tof_to_d(\n            pattern.x,\n            experiment.instrument.calib_d_to_tof_offset.value,\n            experiment.instrument.calib_d_to_tof_linear.value,\n            experiment.instrument.calib_d_to_tof_quad.value,\n        )\n    elif beam_mode == 'constant wavelength':\n        pattern.d = twotheta_to_d(pattern.x, experiment.instrument.setup_wavelength.value)\n    else:\n        print(error(f'Unsupported beam mode: {beam_mode} for d-spacing update.'))\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo","title":"<code>ProjectInfo</code>","text":"<p>Stores metadata about the project, such as name, title, description, and file paths.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>class ProjectInfo:\n    \"\"\"\n    Stores metadata about the project, such as name, title, description,\n    and file paths.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self._name: str = 'untitled_project'\n        self._title: str = 'Untitled Project'\n        self._description: str = ''\n        self._path: str = os.getcwd()\n        self._created: datetime.datetime = datetime.datetime.now()\n        self._last_modified: datetime.datetime = datetime.datetime.now()\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Return the project name.\"\"\"\n        return self._name\n\n    @name.setter\n    def name(self, value: str) -&gt; None:\n        self._name = value\n\n    @property\n    def title(self) -&gt; str:\n        \"\"\"Return the project title.\"\"\"\n        return self._title\n\n    @title.setter\n    def title(self, value: str) -&gt; None:\n        self._title = value\n\n    @property\n    def description(self) -&gt; str:\n        \"\"\"Return sanitized description with single spaces.\"\"\"\n        return ' '.join(self._description.split())\n\n    @description.setter\n    def description(self, value: str) -&gt; None:\n        self._description = ' '.join(value.split())\n\n    @property\n    def path(self) -&gt; str:\n        \"\"\"Return the project path.\"\"\"\n        return self._path\n\n    @path.setter\n    def path(self, value: str) -&gt; None:\n        self._path = value\n\n    @property\n    def created(self) -&gt; datetime.datetime:\n        \"\"\"Return the creation timestamp.\"\"\"\n        return self._created\n\n    @property\n    def last_modified(self) -&gt; datetime.datetime:\n        \"\"\"Return the last modified timestamp.\"\"\"\n        return self._last_modified\n\n    def update_last_modified(self) -&gt; None:\n        \"\"\"Update the last modified timestamp.\"\"\"\n        self._last_modified = datetime.datetime.now()\n\n    def as_cif(self) -&gt; str:\n        \"\"\"Export project metadata to CIF.\"\"\"\n        wrapped_title: List[str] = wrap(self.title, width=46)\n        wrapped_description: List[str] = wrap(self.description, width=46)\n\n        title_str: str = f\"_project.title            '{wrapped_title[0]}'\"\n        for line in wrapped_title[1:]:\n            title_str += f\"\\n{' ' * 27}'{line}'\"\n\n        if wrapped_description:\n            base_indent: str = '_project.description      '\n            indent_spaces: str = ' ' * len(base_indent)\n            formatted_description: str = f\"{base_indent}'{wrapped_description[0]}\"\n            for line in wrapped_description[1:]:\n                formatted_description += f'\\n{indent_spaces}{line}'\n            formatted_description += \"'\"\n        else:\n            formatted_description: str = \"_project.description      ''\"\n\n        return (\n            f'_project.id               {self.name}\\n'\n            f'{title_str}\\n'\n            f'{formatted_description}\\n'\n            f\"_project.created          '{self._created.strftime('%d %b %Y %H:%M:%S')}'\\n\"\n            f\"_project.last_modified    '{self._last_modified.strftime('%d %b %Y %H:%M:%S')}'\\n\"\n        )\n\n    def show_as_cif(self) -&gt; None:\n        cif_text: str = self.as_cif()\n        paragraph_title: str = paragraph(f\"Project \ud83d\udce6 '{self.name}' info as cif\")\n        render_cif(cif_text, paragraph_title)\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo.as_cif","title":"<code>as_cif()</code>","text":"<p>Export project metadata to CIF.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>def as_cif(self) -&gt; str:\n    \"\"\"Export project metadata to CIF.\"\"\"\n    wrapped_title: List[str] = wrap(self.title, width=46)\n    wrapped_description: List[str] = wrap(self.description, width=46)\n\n    title_str: str = f\"_project.title            '{wrapped_title[0]}'\"\n    for line in wrapped_title[1:]:\n        title_str += f\"\\n{' ' * 27}'{line}'\"\n\n    if wrapped_description:\n        base_indent: str = '_project.description      '\n        indent_spaces: str = ' ' * len(base_indent)\n        formatted_description: str = f\"{base_indent}'{wrapped_description[0]}\"\n        for line in wrapped_description[1:]:\n            formatted_description += f'\\n{indent_spaces}{line}'\n        formatted_description += \"'\"\n    else:\n        formatted_description: str = \"_project.description      ''\"\n\n    return (\n        f'_project.id               {self.name}\\n'\n        f'{title_str}\\n'\n        f'{formatted_description}\\n'\n        f\"_project.created          '{self._created.strftime('%d %b %Y %H:%M:%S')}'\\n\"\n        f\"_project.last_modified    '{self._last_modified.strftime('%d %b %Y %H:%M:%S')}'\\n\"\n    )\n</code></pre>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo.created","title":"<code>created</code>  <code>property</code>","text":"<p>Return the creation timestamp.</p>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo.description","title":"<code>description</code>  <code>property</code> <code>writable</code>","text":"<p>Return sanitized description with single spaces.</p>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo.last_modified","title":"<code>last_modified</code>  <code>property</code>","text":"<p>Return the last modified timestamp.</p>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":"<p>Return the project name.</p>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo.path","title":"<code>path</code>  <code>property</code> <code>writable</code>","text":"<p>Return the project path.</p>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo.title","title":"<code>title</code>  <code>property</code> <code>writable</code>","text":"<p>Return the project title.</p>"},{"location":"api-reference/project/#easydiffraction.project.ProjectInfo.update_last_modified","title":"<code>update_last_modified()</code>","text":"<p>Update the last modified timestamp.</p> Source code in <code>src/easydiffraction/project.py</code> <pre><code>def update_last_modified(self) -&gt; None:\n    \"\"\"Update the last modified timestamp.\"\"\"\n    self._last_modified = datetime.datetime.now()\n</code></pre>"},{"location":"api-reference/sample_models/","title":"sample_models","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models","title":"<code>sample_models</code>","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models.collections","title":"<code>collections</code>","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models.collections.atom_sites","title":"<code>atom_sites</code>","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models.collections.atom_sites.AtomSite","title":"<code>AtomSite</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represents a single atom site within the crystal structure.</p> Source code in <code>src/easydiffraction/sample_models/collections/atom_sites.py</code> <pre><code>class AtomSite(Component):\n    \"\"\"\n    Represents a single atom site within the crystal structure.\n    \"\"\"\n\n    @property\n    def category_key(self):\n        return 'atom_sites'\n\n    @property\n    def cif_category_key(self):\n        return 'atom_site'\n\n    def __init__(\n        self,\n        label: str,\n        type_symbol: str,\n        fract_x: float,\n        fract_y: float,\n        fract_z: float,\n        wyckoff_letter: str = None,\n        occupancy: float = 1.0,\n        b_iso: float = 0.0,\n        adp_type: str = 'Biso',\n    ):  # TODO: add support for Uiso, Uani and Bani\n        super().__init__()\n\n        self.label = Descriptor(\n            value=label,\n            name='label',\n            cif_name='label',\n        )\n        self.type_symbol = Descriptor(\n            value=type_symbol,\n            name='type_symbol',\n            cif_name='type_symbol',\n        )\n        self.adp_type = Descriptor(\n            value=adp_type,\n            name='adp_type',\n            cif_name='ADP_type',\n        )\n        self.wyckoff_letter = Descriptor(\n            value=wyckoff_letter,\n            name='wyckoff_letter',\n            cif_name='Wyckoff_letter',\n        )\n        self.fract_x = Parameter(\n            value=fract_x,\n            name='fract_x',\n            cif_name='fract_x',\n        )\n        self.fract_y = Parameter(\n            value=fract_y,\n            name='fract_y',\n            cif_name='fract_y',\n        )\n        self.fract_z = Parameter(\n            value=fract_z,\n            name='fract_z',\n            cif_name='fract_z',\n        )\n        self.occupancy = Parameter(\n            value=occupancy,\n            name='occupancy',\n            cif_name='occupancy',\n        )\n        self.b_iso = Parameter(\n            value=b_iso,\n            name='b_iso',\n            units='\u00c5\u00b2',\n            cif_name='B_iso_or_equiv',\n        )\n        # Select which of the input parameters is used for the\n        # as ID for the whole object\n        self._entry_id = label\n\n        # Lock further attribute additions to prevent\n        # accidental modifications by users\n        self._locked = True\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.collections.atom_sites.AtomSites","title":"<code>AtomSites</code>","text":"<p>               Bases: <code>Collection</code></p> <p>Collection of AtomSite instances.</p> Source code in <code>src/easydiffraction/sample_models/collections/atom_sites.py</code> <pre><code>class AtomSites(Collection):\n    \"\"\"\n    Collection of AtomSite instances.\n    \"\"\"\n\n    # TODO: Check, if we can get rid of this property\n    #  We could use class name instead\n    @property\n    def _type(self):\n        return 'category'  # datablock or category\n\n    @property\n    def _child_class(self):\n        return AtomSite\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.components","title":"<code>components</code>","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models.components.cell","title":"<code>cell</code>","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models.components.cell.Cell","title":"<code>Cell</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represents the unit cell parameters of a sample model.</p> Source code in <code>src/easydiffraction/sample_models/components/cell.py</code> <pre><code>class Cell(Component):\n    \"\"\"\n    Represents the unit cell parameters of a sample model.\n    \"\"\"\n\n    @property\n    def category_key(self) -&gt; str:\n        return 'cell'\n\n    @property\n    def cif_category_key(self) -&gt; str:\n        return 'cell'\n\n    def __init__(\n        self,\n        length_a: float = 10.0,\n        length_b: float = 10.0,\n        length_c: float = 10.0,\n        angle_alpha: float = 90.0,\n        angle_beta: float = 90.0,\n        angle_gamma: float = 90.0,\n    ) -&gt; None:\n        super().__init__()\n\n        self.length_a = Parameter(\n            value=length_a,\n            name='length_a',\n            cif_name='length_a',\n            units='\u00c5',\n        )\n        self.length_b = Parameter(\n            value=length_b,\n            name='length_b',\n            cif_name='length_b',\n            units='\u00c5',\n        )\n        self.length_c = Parameter(\n            value=length_c,\n            name='length_c',\n            cif_name='length_c',\n            units='\u00c5',\n        )\n        self.angle_alpha = Parameter(\n            value=angle_alpha,\n            name='angle_alpha',\n            cif_name='angle_alpha',\n            units='deg',\n        )\n        self.angle_beta = Parameter(\n            value=angle_beta,\n            name='angle_beta',\n            cif_name='angle_beta',\n            units='deg',\n        )\n        self.angle_gamma = Parameter(\n            value=angle_gamma,\n            name='angle_gamma',\n            cif_name='angle_gamma',\n            units='deg',\n        )\n\n        # Lock further attribute additions to prevent\n        # accidental modifications by users\n        self._locked: bool = True\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.components.space_group","title":"<code>space_group</code>","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models.components.space_group.SpaceGroup","title":"<code>SpaceGroup</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represents the space group of a sample model.</p> Source code in <code>src/easydiffraction/sample_models/components/space_group.py</code> <pre><code>class SpaceGroup(Component):\n    \"\"\"\n    Represents the space group of a sample model.\n    \"\"\"\n\n    @property\n    def category_key(self) -&gt; str:\n        return 'space_group'\n\n    @property\n    def cif_category_key(self) -&gt; str:\n        return 'space_group'\n\n    def __init__(\n        self,\n        name_h_m: str = 'P 1',\n        it_coordinate_system_code: Optional[int] = None,\n    ) -&gt; None:\n        super().__init__()\n\n        self.name_h_m = Descriptor(\n            value=name_h_m,\n            name='name_h_m',\n            cif_name='name_H-M_alt',\n        )\n        self.it_coordinate_system_code = Descriptor(\n            value=it_coordinate_system_code,\n            name='it_coordinate_system_code',\n            cif_name='IT_coordinate_system_code',\n        )\n\n        # Lock further attribute additions to prevent\n        # accidental modifications by users\n        self._locked = True\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_model","title":"<code>sample_model</code>","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_model.SampleModel","title":"<code>SampleModel</code>","text":"<p>               Bases: <code>Datablock</code></p> <p>Represents an individual structural model of a sample. Wraps crystallographic information including space group, cell, and atomic sites.</p> Source code in <code>src/easydiffraction/sample_models/sample_model.py</code> <pre><code>class SampleModel(Datablock):\n    \"\"\"\n    Represents an individual structural model of a sample.\n    Wraps crystallographic information including space group, cell, and\n    atomic sites.\n    \"\"\"\n\n    # TODO: Move cif_path and cif_str out of __init__ and into separate methods\n    def __init__(self, name: str, cif_path: str = None, cif_str: str = None):\n        super().__init__()\n        self._name = name\n        self.space_group = SpaceGroup()\n        self.cell = Cell()\n        self.atom_sites = AtomSites()\n\n        if cif_path:\n            self.load_from_cif_file(cif_path)\n        elif cif_str:\n            self.load_from_cif_string(cif_str)\n\n    # ----------------------\n    # Name (ID) of the model\n    # ----------------------\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    @enforce_type\n    def name(self, new_name: str):\n        self._name = new_name\n\n    # -----------\n    # Space group\n    # -----------\n\n    @property\n    def space_group(self):\n        return self._space_group\n\n    @space_group.setter\n    @enforce_type\n    def space_group(self, new_space_group: SpaceGroup):\n        self._space_group = new_space_group\n\n    # ----\n    # Cell\n    # ----\n\n    @property\n    def cell(self):\n        return self._cell\n\n    @cell.setter\n    @enforce_type\n    def cell(self, new_cell: Cell):\n        self._cell = new_cell\n\n    # ----------\n    # Atom sites\n    # ----------\n\n    @property\n    def atom_sites(self):\n        return self._atom_sites\n\n    @atom_sites.setter\n    @enforce_type\n    def atom_sites(self, new_atom_sites: AtomSites):\n        self._atom_sites = new_atom_sites\n\n    # --------------------\n    # Symmetry constraints\n    # --------------------\n\n    def _apply_cell_symmetry_constraints(self):\n        dummy_cell = {\n            'lattice_a': self.cell.length_a.value,\n            'lattice_b': self.cell.length_b.value,\n            'lattice_c': self.cell.length_c.value,\n            'angle_alpha': self.cell.angle_alpha.value,\n            'angle_beta': self.cell.angle_beta.value,\n            'angle_gamma': self.cell.angle_gamma.value,\n        }\n        space_group_name = self.space_group.name_h_m.value\n        ecr.apply_cell_symmetry_constraints(cell=dummy_cell, name_hm=space_group_name)\n        self.cell.length_a.value = dummy_cell['lattice_a']\n        self.cell.length_b.value = dummy_cell['lattice_b']\n        self.cell.length_c.value = dummy_cell['lattice_c']\n        self.cell.angle_alpha.value = dummy_cell['angle_alpha']\n        self.cell.angle_beta.value = dummy_cell['angle_beta']\n        self.cell.angle_gamma.value = dummy_cell['angle_gamma']\n\n    def _apply_atomic_coordinates_symmetry_constraints(self):\n        space_group_name = self.space_group.name_h_m.value\n        space_group_coord_code = self.space_group.it_coordinate_system_code.value\n        for atom in self.atom_sites:\n            dummy_atom = {\n                'fract_x': atom.fract_x.value,\n                'fract_y': atom.fract_y.value,\n                'fract_z': atom.fract_z.value,\n            }\n            wl = atom.wyckoff_letter.value\n            if not wl:\n                # raise ValueError(\"Wyckoff letter is not defined for atom.\")\n                continue\n            ecr.apply_atom_site_symmetry_constraints(\n                atom_site=dummy_atom,\n                name_hm=space_group_name,\n                coord_code=space_group_coord_code,\n                wyckoff_letter=wl,\n            )\n            atom.fract_x.value = dummy_atom['fract_x']\n            atom.fract_y.value = dummy_atom['fract_y']\n            atom.fract_z.value = dummy_atom['fract_z']\n\n    def _apply_atomic_displacement_symmetry_constraints(self):\n        pass\n\n    def apply_symmetry_constraints(self):\n        self._apply_cell_symmetry_constraints()\n        self._apply_atomic_coordinates_symmetry_constraints()\n        self._apply_atomic_displacement_symmetry_constraints()\n\n    # -----------------\n    # Creation from CIF\n    # -----------------\n\n    def load_from_cif_file(self, cif_path: str):\n        \"\"\"Load model data from a CIF file.\"\"\"\n        # TODO: Implement CIF parsing here\n        print(f'Loading SampleModel from CIF file: {cif_path}')\n        # Example: self.id = extract_id_from_cif(cif_path)\n\n    def load_from_cif_string(self, cif_str: str):\n        \"\"\"Load model data from a CIF string.\"\"\"\n        # TODO: Implement CIF parsing from a string\n        print('Loading SampleModel from CIF string.')\n\n    # -----------------\n    # Convertion to CIF\n    # -----------------\n\n    def as_cif(self) -&gt; str:\n        \"\"\"\n        Export the sample model to CIF format.\n        Returns:\n            str: CIF string representation of the sample model.\n        \"\"\"\n        # Data block header\n        cif_lines = [f'data_{self.name}']\n\n        # Space Group\n        cif_lines += ['', self.space_group.as_cif()]\n\n        # Unit Cell\n        cif_lines += ['', self.cell.as_cif()]\n\n        # Atom Sites\n        cif_lines += ['', self.atom_sites.as_cif()]\n\n        return '\\n'.join(cif_lines)\n\n    # ------------\n    # Show methods\n    # ------------\n\n    def show_structure(self, plane='xy', grid_size=20):\n        \"\"\"\n        Show an ASCII projection of the structure on a 2D plane.\n\n        Args:\n            plane (str): 'xy', 'xz', or 'yz' plane to project.\n            grid_size (int): Size of the ASCII grid (default is 20).\n        \"\"\"\n\n        print(paragraph(f\"Sample model \ud83e\udde9 '{self.name}' structure view\"))\n        print('Not implemented yet.')\n\n    def show_params(self):\n        \"\"\"Display structural parameters (space group, unit cell, atomic sites).\"\"\"\n        print(f'\\nSampleModel ID: {self.name}')\n        print(f'Space group: {self.space_group.name_h_m}')\n        print(f'Cell parameters: {self.cell.as_dict()}')\n        print('Atom sites:')\n        self.atom_sites.show()\n\n    def show_as_cif(self) -&gt; None:\n        cif_text: str = self.as_cif()\n        paragraph_title: str = paragraph(f\"Sample model \ud83e\udde9 '{self.name}' as cif\")\n        render_cif(cif_text, paragraph_title)\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_model.SampleModel.as_cif","title":"<code>as_cif()</code>","text":"<p>Export the sample model to CIF format. Returns:     str: CIF string representation of the sample model.</p> Source code in <code>src/easydiffraction/sample_models/sample_model.py</code> <pre><code>def as_cif(self) -&gt; str:\n    \"\"\"\n    Export the sample model to CIF format.\n    Returns:\n        str: CIF string representation of the sample model.\n    \"\"\"\n    # Data block header\n    cif_lines = [f'data_{self.name}']\n\n    # Space Group\n    cif_lines += ['', self.space_group.as_cif()]\n\n    # Unit Cell\n    cif_lines += ['', self.cell.as_cif()]\n\n    # Atom Sites\n    cif_lines += ['', self.atom_sites.as_cif()]\n\n    return '\\n'.join(cif_lines)\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_model.SampleModel.load_from_cif_file","title":"<code>load_from_cif_file(cif_path)</code>","text":"<p>Load model data from a CIF file.</p> Source code in <code>src/easydiffraction/sample_models/sample_model.py</code> <pre><code>def load_from_cif_file(self, cif_path: str):\n    \"\"\"Load model data from a CIF file.\"\"\"\n    # TODO: Implement CIF parsing here\n    print(f'Loading SampleModel from CIF file: {cif_path}')\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_model.SampleModel.load_from_cif_string","title":"<code>load_from_cif_string(cif_str)</code>","text":"<p>Load model data from a CIF string.</p> Source code in <code>src/easydiffraction/sample_models/sample_model.py</code> <pre><code>def load_from_cif_string(self, cif_str: str):\n    \"\"\"Load model data from a CIF string.\"\"\"\n    # TODO: Implement CIF parsing from a string\n    print('Loading SampleModel from CIF string.')\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_model.SampleModel.show_params","title":"<code>show_params()</code>","text":"<p>Display structural parameters (space group, unit cell, atomic sites).</p> Source code in <code>src/easydiffraction/sample_models/sample_model.py</code> <pre><code>def show_params(self):\n    \"\"\"Display structural parameters (space group, unit cell, atomic sites).\"\"\"\n    print(f'\\nSampleModel ID: {self.name}')\n    print(f'Space group: {self.space_group.name_h_m}')\n    print(f'Cell parameters: {self.cell.as_dict()}')\n    print('Atom sites:')\n    self.atom_sites.show()\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_model.SampleModel.show_structure","title":"<code>show_structure(plane='xy', grid_size=20)</code>","text":"<p>Show an ASCII projection of the structure on a 2D plane.</p> <p>Parameters:</p> Name Type Description Default <code>plane</code> <code>str</code> <p>'xy', 'xz', or 'yz' plane to project.</p> <code>'xy'</code> <code>grid_size</code> <code>int</code> <p>Size of the ASCII grid (default is 20).</p> <code>20</code> Source code in <code>src/easydiffraction/sample_models/sample_model.py</code> <pre><code>def show_structure(self, plane='xy', grid_size=20):\n    \"\"\"\n    Show an ASCII projection of the structure on a 2D plane.\n\n    Args:\n        plane (str): 'xy', 'xz', or 'yz' plane to project.\n        grid_size (int): Size of the ASCII grid (default is 20).\n    \"\"\"\n\n    print(paragraph(f\"Sample model \ud83e\udde9 '{self.name}' structure view\"))\n    print('Not implemented yet.')\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models","title":"<code>sample_models</code>","text":""},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models.SampleModels","title":"<code>SampleModels</code>","text":"<p>               Bases: <code>Collection</code></p> <p>Collection manager for multiple SampleModel instances.</p> Source code in <code>src/easydiffraction/sample_models/sample_models.py</code> <pre><code>class SampleModels(Collection):\n    \"\"\"\n    Collection manager for multiple SampleModel instances.\n    \"\"\"\n\n    @property\n    def _child_class(self):\n        return SampleModel\n\n    def __init__(self) -&gt; None:\n        super().__init__()  # Initialize Collection\n        self._models = self._items  # Alias for legacy support\n\n    def add(\n        self,\n        model: Optional[SampleModel] = None,\n        name: Optional[str] = None,\n        cif_path: Optional[str] = None,\n        cif_str: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"\n        Add a new sample model to the collection.\n        Dispatches based on input type: pre-built model or parameters for new creation.\n\n        Args:\n            model: An existing SampleModel instance.\n            name: Name for a new model if created from scratch.\n            cif_path: Path to a CIF file to create a model from.\n            cif_str: CIF content as string to create a model from.\n        \"\"\"\n        if model:\n            self._add_prebuilt_sample_model(model)\n        else:\n            self._create_and_add_sample_model(name, cif_path, cif_str)\n\n    def remove(self, name: str) -&gt; None:\n        \"\"\"\n        Remove a sample model by its ID.\n\n        Args:\n            name: ID of the model to remove.\n        \"\"\"\n        if name in self._models:\n            del self._models[name]\n\n    def get_ids(self) -&gt; List[str]:\n        \"\"\"\n        Return a list of all model IDs in the collection.\n\n        Returns:\n            List of model IDs.\n        \"\"\"\n        return list(self._models.keys())\n\n    @property\n    def ids(self) -&gt; List[str]:\n        \"\"\"Property accessor for model IDs.\"\"\"\n        return self.get_ids()\n\n    def show_names(self) -&gt; None:\n        \"\"\"List all model IDs in the collection.\"\"\"\n        print(paragraph('Defined sample models' + ' \ud83e\udde9'))\n        print(self.get_ids())\n\n    def show_params(self) -&gt; None:\n        \"\"\"Show parameters of all sample models in the collection.\"\"\"\n        for model in self._models.values():\n            model.show_params()\n\n    def as_cif(self) -&gt; str:\n        \"\"\"\n        Export all sample models to CIF format.\n\n        Returns:\n            CIF string representation of all sample models.\n        \"\"\"\n        return '\\n'.join([model.as_cif() for model in self._models.values()])\n\n    @enforce_type\n    def _add_prebuilt_sample_model(self, sample_model: SampleModel) -&gt; None:\n        \"\"\"\n        Add a pre-built SampleModel instance.\n\n        Args:\n            model: The SampleModel instance to add.\n\n        Raises:\n            TypeError: If model is not a SampleModel instance.\n        \"\"\"\n        self._models[sample_model.name] = sample_model\n\n    def _create_and_add_sample_model(\n        self,\n        name: Optional[str] = None,\n        cif_path: Optional[str] = None,\n        cif_str: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"\n        Create a SampleModel instance and add it to the collection.\n\n        Args:\n            name: Name for the new model.\n            cif_path: Path to a CIF file.\n            cif_str: CIF content as string.\n\n        Raises:\n            ValueError: If neither name, cif_path, nor cif_str is provided.\n        \"\"\"\n        if cif_path:\n            model = SampleModel(cif_path=cif_path)\n        elif cif_str:\n            model = SampleModel(cif_str=cif_str)\n        elif name:\n            model = SampleModel(name=name)\n        else:\n            raise ValueError('You must provide a name, cif_path, or cif_str.')\n\n        self._models[model.name] = model\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models.SampleModels.add","title":"<code>add(model=None, name=None, cif_path=None, cif_str=None)</code>","text":"<p>Add a new sample model to the collection. Dispatches based on input type: pre-built model or parameters for new creation.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Optional[SampleModel]</code> <p>An existing SampleModel instance.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Name for a new model if created from scratch.</p> <code>None</code> <code>cif_path</code> <code>Optional[str]</code> <p>Path to a CIF file to create a model from.</p> <code>None</code> <code>cif_str</code> <code>Optional[str]</code> <p>CIF content as string to create a model from.</p> <code>None</code> Source code in <code>src/easydiffraction/sample_models/sample_models.py</code> <pre><code>def add(\n    self,\n    model: Optional[SampleModel] = None,\n    name: Optional[str] = None,\n    cif_path: Optional[str] = None,\n    cif_str: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\n    Add a new sample model to the collection.\n    Dispatches based on input type: pre-built model or parameters for new creation.\n\n    Args:\n        model: An existing SampleModel instance.\n        name: Name for a new model if created from scratch.\n        cif_path: Path to a CIF file to create a model from.\n        cif_str: CIF content as string to create a model from.\n    \"\"\"\n    if model:\n        self._add_prebuilt_sample_model(model)\n    else:\n        self._create_and_add_sample_model(name, cif_path, cif_str)\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models.SampleModels.as_cif","title":"<code>as_cif()</code>","text":"<p>Export all sample models to CIF format.</p> <p>Returns:</p> Type Description <code>str</code> <p>CIF string representation of all sample models.</p> Source code in <code>src/easydiffraction/sample_models/sample_models.py</code> <pre><code>def as_cif(self) -&gt; str:\n    \"\"\"\n    Export all sample models to CIF format.\n\n    Returns:\n        CIF string representation of all sample models.\n    \"\"\"\n    return '\\n'.join([model.as_cif() for model in self._models.values()])\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models.SampleModels.get_ids","title":"<code>get_ids()</code>","text":"<p>Return a list of all model IDs in the collection.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of model IDs.</p> Source code in <code>src/easydiffraction/sample_models/sample_models.py</code> <pre><code>def get_ids(self) -&gt; List[str]:\n    \"\"\"\n    Return a list of all model IDs in the collection.\n\n    Returns:\n        List of model IDs.\n    \"\"\"\n    return list(self._models.keys())\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models.SampleModels.ids","title":"<code>ids</code>  <code>property</code>","text":"<p>Property accessor for model IDs.</p>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models.SampleModels.remove","title":"<code>remove(name)</code>","text":"<p>Remove a sample model by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>ID of the model to remove.</p> required Source code in <code>src/easydiffraction/sample_models/sample_models.py</code> <pre><code>def remove(self, name: str) -&gt; None:\n    \"\"\"\n    Remove a sample model by its ID.\n\n    Args:\n        name: ID of the model to remove.\n    \"\"\"\n    if name in self._models:\n        del self._models[name]\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models.SampleModels.show_names","title":"<code>show_names()</code>","text":"<p>List all model IDs in the collection.</p> Source code in <code>src/easydiffraction/sample_models/sample_models.py</code> <pre><code>def show_names(self) -&gt; None:\n    \"\"\"List all model IDs in the collection.\"\"\"\n    print(paragraph('Defined sample models' + ' \ud83e\udde9'))\n    print(self.get_ids())\n</code></pre>"},{"location":"api-reference/sample_models/#easydiffraction.sample_models.sample_models.SampleModels.show_params","title":"<code>show_params()</code>","text":"<p>Show parameters of all sample models in the collection.</p> Source code in <code>src/easydiffraction/sample_models/sample_models.py</code> <pre><code>def show_params(self) -&gt; None:\n    \"\"\"Show parameters of all sample models in the collection.\"\"\"\n    for model in self._models.values():\n        model.show_params()\n</code></pre>"},{"location":"api-reference/summary/","title":"summary","text":""},{"location":"api-reference/summary/#easydiffraction.summary","title":"<code>summary</code>","text":""},{"location":"api-reference/summary/#easydiffraction.summary.Summary","title":"<code>Summary</code>","text":"<p>Generates reports and exports results from the project.</p> <p>This class collects and presents all relevant information about the fitted model, experiments, and analysis results.</p> Source code in <code>src/easydiffraction/summary.py</code> <pre><code>class Summary:\n    \"\"\"\n    Generates reports and exports results from the project.\n\n    This class collects and presents all relevant information\n    about the fitted model, experiments, and analysis results.\n    \"\"\"\n\n    def __init__(self, project) -&gt; None:\n        \"\"\"\n        Initialize the summary with a reference to the project.\n\n        Args:\n            project: The Project instance this summary belongs to.\n        \"\"\"\n        self.project = project\n\n    # ------------------------------------------\n    #  Report Generation\n    # ------------------------------------------\n\n    def show_report(self) -&gt; None:\n        self.show_project_info()\n        self.show_crystallographic_data()\n        self.show_experimental_data()\n        self.show_fitting_details()\n\n    def show_project_info(self) -&gt; None:\n        \"\"\"\n        Print the project title and description.\n        \"\"\"\n        print(section('Project info'))\n\n        print(paragraph('Title'))\n        print(self.project.info.title)\n\n        if self.project.info.description:\n            print(paragraph('Description'))\n            print('\\n'.join(wrap(self.project.info.description, width=60)))\n\n    def show_crystallographic_data(self) -&gt; None:\n        \"\"\"\n        Print crystallographic data including phase datablocks,\n        space groups, cell parameters, and atom sites.\n        \"\"\"\n        print(section('Crystallographic data'))\n\n        for model in self.project.sample_models._models.values():\n            print(paragraph('Phase datablock'))\n            print(f'\ud83e\udde9 {model.name}')\n\n            print(paragraph('Space group'))\n            print(model.space_group.name_h_m.value)\n\n            print(paragraph('Cell parameters'))\n            columns_alignment: List[str] = ['left', 'right']\n            cell_data = [[k.replace('length_', '').replace('angle_', ''), f'{v:.5f}'] for k, v in model.cell.as_dict().items()]\n            render_table(\n                columns_alignment=columns_alignment,\n                columns_data=cell_data,\n            )\n\n            print(paragraph('Atom sites'))\n            columns_headers = [\n                'Label',\n                'Type',\n                'fract_x',\n                'fract_y',\n                'fract_z',\n                'Occupancy',\n                'B_iso',\n            ]\n            columns_alignment = [\n                'left',\n                'left',\n                'right',\n                'right',\n                'right',\n                'right',\n                'right',\n            ]\n            atom_table = []\n            for site in model.atom_sites:\n                atom_table.append(\n                    [\n                        site.label.value,\n                        site.type_symbol.value,\n                        f'{site.fract_x.value:.5f}',\n                        f'{site.fract_y.value:.5f}',\n                        f'{site.fract_z.value:.5f}',\n                        f'{site.occupancy.value:.5f}',\n                        f'{site.b_iso.value:.5f}',\n                    ]\n                )\n            render_table(\n                columns_headers=columns_headers,\n                columns_alignment=columns_alignment,\n                columns_data=atom_table,\n            )\n\n    def show_experimental_data(self) -&gt; None:\n        \"\"\"\n        Print experimental data including experiment datablocks,\n        types, instrument settings, and peak profile information.\n        \"\"\"\n        print(section('Experiments'))\n\n        for expt in self.project.experiments._experiments.values():\n            print(paragraph('Experiment datablock'))\n            print(f'\ud83d\udd2c {expt.name}')\n\n            print(paragraph('Experiment type'))\n            print(f'{expt.type.sample_form.value}, {expt.type.radiation_probe.value}, {expt.type.beam_mode.value}')\n\n            if hasattr(expt, 'instrument'):\n                if hasattr(expt.instrument, 'setup_wavelength'):\n                    print(paragraph('Wavelength'))\n                    print(f'{expt.instrument.setup_wavelength.value:.5f}')\n                if hasattr(expt.instrument, 'calib_twotheta_offset'):\n                    print(paragraph('2\u03b8 offset'))\n                    print(f'{expt.instrument.calib_twotheta_offset.value:.5f}')\n\n            if hasattr(expt, 'peak_profile_type'):\n                print(paragraph('Profile type'))\n                print(expt.peak_profile_type)\n\n            if hasattr(expt, 'peak'):\n                if hasattr(expt.peak, 'broad_gauss_u'):\n                    print(paragraph('Peak broadening (Gaussian)'))\n                    columns_alignment = ['left', 'right']\n                    columns_data = [\n                        ['U', f'{expt.peak.broad_gauss_u.value:.5f}'],\n                        ['V', f'{expt.peak.broad_gauss_v.value:.5f}'],\n                        ['W', f'{expt.peak.broad_gauss_w.value:.5f}'],\n                    ]\n                    render_table(\n                        columns_alignment=columns_alignment,\n                        columns_data=columns_data,\n                    )\n                if hasattr(expt.peak, 'broad_lorentz_x'):\n                    print(paragraph('Peak broadening (Lorentzian)'))\n                    columns_alignment = ['left', 'right']\n                    columns_data = [\n                        ['X', f'{expt.peak.broad_lorentz_x.value:.5f}'],\n                        ['Y', f'{expt.peak.broad_lorentz_y.value:.5f}'],\n                    ]\n                    render_table(\n                        columns_alignment=columns_alignment,\n                        columns_data=columns_data,\n                    )\n\n    def show_fitting_details(self) -&gt; None:\n        \"\"\"\n        Print fitting details including calculation and minimization engines,\n        and fit quality metrics.\n        \"\"\"\n        print(section('Fitting'))\n\n        print(paragraph('Calculation engine'))\n        print(self.project.analysis.current_calculator)\n\n        print(paragraph('Minimization engine'))\n        print(self.project.analysis.current_minimizer)\n\n        print(paragraph('Fit quality'))\n        columns_alignment = ['left', 'right']\n        fit_metrics = [\n            [\n                'Goodness-of-fit (reduced \u03c7\u00b2)',\n                f'{self.project.analysis.fit_results.reduced_chi_square:.2f}',\n            ]\n        ]\n        render_table(\n            columns_alignment=columns_alignment,\n            columns_data=fit_metrics,\n        )\n\n    # ------------------------------------------\n    #  Exporting\n    # ------------------------------------------\n\n    def as_cif(self) -&gt; str:\n        \"\"\"\n        Export the final fitted data and analysis results as CIF format.\n        \"\"\"\n        return 'To be added...'\n</code></pre>"},{"location":"api-reference/summary/#easydiffraction.summary.Summary.__init__","title":"<code>__init__(project)</code>","text":"<p>Initialize the summary with a reference to the project.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <p>The Project instance this summary belongs to.</p> required Source code in <code>src/easydiffraction/summary.py</code> <pre><code>def __init__(self, project) -&gt; None:\n    \"\"\"\n    Initialize the summary with a reference to the project.\n\n    Args:\n        project: The Project instance this summary belongs to.\n    \"\"\"\n    self.project = project\n</code></pre>"},{"location":"api-reference/summary/#easydiffraction.summary.Summary.as_cif","title":"<code>as_cif()</code>","text":"<p>Export the final fitted data and analysis results as CIF format.</p> Source code in <code>src/easydiffraction/summary.py</code> <pre><code>def as_cif(self) -&gt; str:\n    \"\"\"\n    Export the final fitted data and analysis results as CIF format.\n    \"\"\"\n    return 'To be added...'\n</code></pre>"},{"location":"api-reference/summary/#easydiffraction.summary.Summary.show_crystallographic_data","title":"<code>show_crystallographic_data()</code>","text":"<p>Print crystallographic data including phase datablocks, space groups, cell parameters, and atom sites.</p> Source code in <code>src/easydiffraction/summary.py</code> <pre><code>def show_crystallographic_data(self) -&gt; None:\n    \"\"\"\n    Print crystallographic data including phase datablocks,\n    space groups, cell parameters, and atom sites.\n    \"\"\"\n    print(section('Crystallographic data'))\n\n    for model in self.project.sample_models._models.values():\n        print(paragraph('Phase datablock'))\n        print(f'\ud83e\udde9 {model.name}')\n\n        print(paragraph('Space group'))\n        print(model.space_group.name_h_m.value)\n\n        print(paragraph('Cell parameters'))\n        columns_alignment: List[str] = ['left', 'right']\n        cell_data = [[k.replace('length_', '').replace('angle_', ''), f'{v:.5f}'] for k, v in model.cell.as_dict().items()]\n        render_table(\n            columns_alignment=columns_alignment,\n            columns_data=cell_data,\n        )\n\n        print(paragraph('Atom sites'))\n        columns_headers = [\n            'Label',\n            'Type',\n            'fract_x',\n            'fract_y',\n            'fract_z',\n            'Occupancy',\n            'B_iso',\n        ]\n        columns_alignment = [\n            'left',\n            'left',\n            'right',\n            'right',\n            'right',\n            'right',\n            'right',\n        ]\n        atom_table = []\n        for site in model.atom_sites:\n            atom_table.append(\n                [\n                    site.label.value,\n                    site.type_symbol.value,\n                    f'{site.fract_x.value:.5f}',\n                    f'{site.fract_y.value:.5f}',\n                    f'{site.fract_z.value:.5f}',\n                    f'{site.occupancy.value:.5f}',\n                    f'{site.b_iso.value:.5f}',\n                ]\n            )\n        render_table(\n            columns_headers=columns_headers,\n            columns_alignment=columns_alignment,\n            columns_data=atom_table,\n        )\n</code></pre>"},{"location":"api-reference/summary/#easydiffraction.summary.Summary.show_experimental_data","title":"<code>show_experimental_data()</code>","text":"<p>Print experimental data including experiment datablocks, types, instrument settings, and peak profile information.</p> Source code in <code>src/easydiffraction/summary.py</code> <pre><code>def show_experimental_data(self) -&gt; None:\n    \"\"\"\n    Print experimental data including experiment datablocks,\n    types, instrument settings, and peak profile information.\n    \"\"\"\n    print(section('Experiments'))\n\n    for expt in self.project.experiments._experiments.values():\n        print(paragraph('Experiment datablock'))\n        print(f'\ud83d\udd2c {expt.name}')\n\n        print(paragraph('Experiment type'))\n        print(f'{expt.type.sample_form.value}, {expt.type.radiation_probe.value}, {expt.type.beam_mode.value}')\n\n        if hasattr(expt, 'instrument'):\n            if hasattr(expt.instrument, 'setup_wavelength'):\n                print(paragraph('Wavelength'))\n                print(f'{expt.instrument.setup_wavelength.value:.5f}')\n            if hasattr(expt.instrument, 'calib_twotheta_offset'):\n                print(paragraph('2\u03b8 offset'))\n                print(f'{expt.instrument.calib_twotheta_offset.value:.5f}')\n\n        if hasattr(expt, 'peak_profile_type'):\n            print(paragraph('Profile type'))\n            print(expt.peak_profile_type)\n\n        if hasattr(expt, 'peak'):\n            if hasattr(expt.peak, 'broad_gauss_u'):\n                print(paragraph('Peak broadening (Gaussian)'))\n                columns_alignment = ['left', 'right']\n                columns_data = [\n                    ['U', f'{expt.peak.broad_gauss_u.value:.5f}'],\n                    ['V', f'{expt.peak.broad_gauss_v.value:.5f}'],\n                    ['W', f'{expt.peak.broad_gauss_w.value:.5f}'],\n                ]\n                render_table(\n                    columns_alignment=columns_alignment,\n                    columns_data=columns_data,\n                )\n            if hasattr(expt.peak, 'broad_lorentz_x'):\n                print(paragraph('Peak broadening (Lorentzian)'))\n                columns_alignment = ['left', 'right']\n                columns_data = [\n                    ['X', f'{expt.peak.broad_lorentz_x.value:.5f}'],\n                    ['Y', f'{expt.peak.broad_lorentz_y.value:.5f}'],\n                ]\n                render_table(\n                    columns_alignment=columns_alignment,\n                    columns_data=columns_data,\n                )\n</code></pre>"},{"location":"api-reference/summary/#easydiffraction.summary.Summary.show_fitting_details","title":"<code>show_fitting_details()</code>","text":"<p>Print fitting details including calculation and minimization engines, and fit quality metrics.</p> Source code in <code>src/easydiffraction/summary.py</code> <pre><code>def show_fitting_details(self) -&gt; None:\n    \"\"\"\n    Print fitting details including calculation and minimization engines,\n    and fit quality metrics.\n    \"\"\"\n    print(section('Fitting'))\n\n    print(paragraph('Calculation engine'))\n    print(self.project.analysis.current_calculator)\n\n    print(paragraph('Minimization engine'))\n    print(self.project.analysis.current_minimizer)\n\n    print(paragraph('Fit quality'))\n    columns_alignment = ['left', 'right']\n    fit_metrics = [\n        [\n            'Goodness-of-fit (reduced \u03c7\u00b2)',\n            f'{self.project.analysis.fit_results.reduced_chi_square:.2f}',\n        ]\n    ]\n    render_table(\n        columns_alignment=columns_alignment,\n        columns_data=fit_metrics,\n    )\n</code></pre>"},{"location":"api-reference/summary/#easydiffraction.summary.Summary.show_project_info","title":"<code>show_project_info()</code>","text":"<p>Print the project title and description.</p> Source code in <code>src/easydiffraction/summary.py</code> <pre><code>def show_project_info(self) -&gt; None:\n    \"\"\"\n    Print the project title and description.\n    \"\"\"\n    print(section('Project info'))\n\n    print(paragraph('Title'))\n    print(self.project.info.title)\n\n    if self.project.info.description:\n        print(paragraph('Description'))\n        print('\\n'.join(wrap(self.project.info.description, width=60)))\n</code></pre>"},{"location":"api-reference/utils/","title":"utils","text":""},{"location":"api-reference/utils/#easydiffraction.utils","title":"<code>utils</code>","text":""},{"location":"api-reference/utils/#easydiffraction.utils.formatting","title":"<code>formatting</code>","text":""},{"location":"api-reference/utils/#easydiffraction.utils.formatting.chapter","title":"<code>chapter(title)</code>","text":"<p>Formats a chapter header with bold magenta text, uppercase, and padding.</p> Source code in <code>src/easydiffraction/utils/formatting.py</code> <pre><code>def chapter(title: str) -&gt; str:\n    \"\"\"Formats a chapter header with bold magenta text, uppercase, and padding.\"\"\"\n    full_title = f' {title.upper()} '\n    pad_len = (WIDTH - len(full_title)) // 2\n    padding = SYMBOL * pad_len\n    line = f'{Fore.LIGHTMAGENTA_EX + Style.BRIGHT}{padding}{full_title}{padding}{Style.RESET_ALL}'\n    if len(line) &lt; WIDTH:\n        line += SYMBOL\n    return f'\\n{line}'\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.formatting.error","title":"<code>error(title)</code>","text":"<p>Formats an error message with red text.</p> Source code in <code>src/easydiffraction/utils/formatting.py</code> <pre><code>def error(title: str) -&gt; str:\n    \"\"\"Formats an error message with red text.\"\"\"\n    return f'\\n\u274c {Fore.LIGHTRED_EX}Error{Style.RESET_ALL}\\n{title}'\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.formatting.info","title":"<code>info(title)</code>","text":"<p>Formats an info message with cyan text.</p> Source code in <code>src/easydiffraction/utils/formatting.py</code> <pre><code>def info(title: str) -&gt; str:\n    \"\"\"Formats an info message with cyan text.\"\"\"\n    return f'\\n\u2139\ufe0f {Fore.LIGHTCYAN_EX}Info{Style.RESET_ALL}\\n{title}'\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.formatting.paragraph","title":"<code>paragraph(title)</code>","text":"<p>Formats a subsection header with bold blue text while keeping quoted text unformatted.</p> Source code in <code>src/easydiffraction/utils/formatting.py</code> <pre><code>def paragraph(title: str) -&gt; str:\n    \"\"\"Formats a subsection header with bold blue text while keeping quoted text unformatted.\"\"\"\n    import re\n\n    parts = re.split(r\"('.*?')\", title)\n    formatted = f'{Fore.LIGHTBLUE_EX + Style.BRIGHT}'\n    for part in parts:\n        if part.startswith(\"'\") and part.endswith(\"'\"):\n            formatted += Style.RESET_ALL + part + Fore.LIGHTBLUE_EX + Style.BRIGHT\n        else:\n            formatted += part\n    formatted += Style.RESET_ALL\n    return f'\\n{formatted}'\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.formatting.section","title":"<code>section(title)</code>","text":"<p>Formats a section header with bold green text.</p> Source code in <code>src/easydiffraction/utils/formatting.py</code> <pre><code>def section(title: str) -&gt; str:\n    \"\"\"Formats a section header with bold green text.\"\"\"\n    full_title = f'*** {title.upper()} ***'\n    return f'\\n{Fore.LIGHTGREEN_EX + Style.BRIGHT}{full_title}{Style.RESET_ALL}'\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.formatting.warning","title":"<code>warning(title)</code>","text":"<p>Formats a warning message with yellow text.</p> Source code in <code>src/easydiffraction/utils/formatting.py</code> <pre><code>def warning(title: str) -&gt; str:\n    \"\"\"Formats a warning message with yellow text.\"\"\"\n    return f'\\n\u26a0\ufe0f {Fore.LIGHTYELLOW_EX}Warning{Style.RESET_ALL}\\n{title}'\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.utils","title":"<code>utils</code>","text":"<p>General utilities and helpers for easydiffraction.</p>"},{"location":"api-reference/utils/#easydiffraction.utils.utils.download_from_repository","title":"<code>download_from_repository(file_name, branch=None, destination='data', overwrite=False)</code>","text":"<p>Download a data file from the EasyDiffraction repository on GitHub.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The file name to fetch (e.g., \"NaCl.gr\").</p> required <code>branch</code> <code>str | None</code> <p>Branch to fetch from. If None, uses DATA_REPO_BRANCH.</p> <code>None</code> <code>destination</code> <code>str</code> <p>Directory to save the file into (created if missing).</p> <code>'data'</code> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the file if it already exists. Defaults to False.</p> <code>False</code> Source code in <code>src/easydiffraction/utils/utils.py</code> <pre><code>def download_from_repository(\n    file_name: str,\n    branch: str | None = None,\n    destination: str = 'data',\n    overwrite: bool = False,\n) -&gt; None:\n    \"\"\"Download a data file from the EasyDiffraction repository on GitHub.\n\n    Args:\n        file_name: The file name to fetch (e.g., \"NaCl.gr\").\n        branch: Branch to fetch from. If None, uses DATA_REPO_BRANCH.\n        destination: Directory to save the file into (created if missing).\n        overwrite: Whether to overwrite the file if it already exists. Defaults to False.\n    \"\"\"\n    file_path = os.path.join(destination, file_name)\n    if os.path.exists(file_path):\n        if not overwrite:\n            print(warning(f\"File '{file_path}' already exists and will not be overwritten.\"))\n            return\n        else:\n            print(warning(f\"File '{file_path}' already exists and will be overwritten.\"))\n            os.remove(file_path)\n\n    base = 'https://raw.githubusercontent.com'\n    org = 'easyscience'\n    repo = 'diffraction-lib'\n    branch = 'docs'  # branch or DATA_REPO_BRANCH  # Use the global branch variable if not provided\n    path_in_repo = 'tutorials/data'\n    url = f'{base}/{org}/{repo}/refs/heads/{branch}/{path_in_repo}/{file_name}'\n\n    pooch.retrieve(\n        url=url,\n        known_hash=None,\n        fname=file_name,\n        path=destination,\n    )\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.utils.get_value_from_xye_header","title":"<code>get_value_from_xye_header(file_path, key)</code>","text":"<p>Extracts a floating point value from the first line of the file, corresponding to the given key.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the input file.</p> required <code>key</code> <code>str</code> <p>The key to extract ('DIFC' or 'two_theta').</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The extracted value.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the key is not found.</p> Source code in <code>src/easydiffraction/utils/utils.py</code> <pre><code>def get_value_from_xye_header(file_path, key):\n    \"\"\"\n    Extracts a floating point value from the first line of the file, corresponding to the given key.\n\n    Parameters:\n        file_path (str): Path to the input file.\n        key (str): The key to extract ('DIFC' or 'two_theta').\n\n    Returns:\n        float: The extracted value.\n\n    Raises:\n        ValueError: If the key is not found.\n    \"\"\"\n    pattern = rf'{key}\\s*=\\s*([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)'\n\n    with open(file_path, 'r') as f:\n        first_line = f.readline()\n\n    match = re.search(pattern, first_line)\n    if match:\n        return float(match.group(1))\n    else:\n        raise ValueError(f'{key} not found in the header.')\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.utils.is_notebook","title":"<code>is_notebook()</code>","text":"<p>Determines if the current environment is a Jupyter Notebook.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if running inside a Jupyter Notebook, False otherwise.</p> Source code in <code>src/easydiffraction/utils/utils.py</code> <pre><code>def is_notebook() -&gt; bool:\n    \"\"\"\n    Determines if the current environment is a Jupyter Notebook.\n\n    Returns:\n        bool: True if running inside a Jupyter Notebook, False otherwise.\n    \"\"\"\n    if IPython is None:\n        return False\n\n    try:\n        shell = get_ipython().__class__.__name__  # noqa: F821\n        if shell == 'ZMQInteractiveShell':\n            return True  # Jupyter notebook or qtconsole\n        elif shell == 'TerminalInteractiveShell':\n            return False  # Terminal running IPython\n        else:\n            return False  # Other type (unlikely)\n    except NameError:\n        return False  # Probably standard Python interpreter\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.utils.is_pycharm","title":"<code>is_pycharm()</code>","text":"<p>Determines if the current environment is PyCharm.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if running inside PyCharm, False otherwise.</p> Source code in <code>src/easydiffraction/utils/utils.py</code> <pre><code>def is_pycharm() -&gt; bool:\n    \"\"\"\n    Determines if the current environment is PyCharm.\n\n    Returns:\n        bool: True if running inside PyCharm, False otherwise.\n    \"\"\"\n    return os.environ.get('PYCHARM_HOSTED') == '1'\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.utils.render_cif","title":"<code>render_cif(cif_text, paragraph_title)</code>","text":"<p>Display the CIF text as a formatted table in Jupyter Notebook or terminal.</p> Source code in <code>src/easydiffraction/utils/utils.py</code> <pre><code>def render_cif(cif_text, paragraph_title) -&gt; None:\n    \"\"\"\n    Display the CIF text as a formatted table in Jupyter Notebook or terminal.\n    \"\"\"\n    # Split into lines and replace empty ones with a '&amp;nbsp;'\n    # (non-breaking space) to force empty lines to be rendered in\n    # full height in the table. This is only needed in Jupyter Notebook.\n    if is_notebook():\n        lines: List[str] = [line if line.strip() else '&amp;nbsp;' for line in cif_text.splitlines()]\n    else:\n        lines: List[str] = [line for line in cif_text.splitlines()]\n\n    # Convert each line into a single-column format for table rendering\n    columns: List[List[str]] = [[line] for line in lines]\n\n    # Print title paragraph\n    print(paragraph_title)\n\n    # Render the table using left alignment and no headers\n    render_table(columns_data=columns, columns_alignment=['left'])\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.utils.render_table","title":"<code>render_table(columns_data, columns_alignment, columns_headers=None, show_index=False, display_handle=None)</code>","text":"<p>Renders a table either as an HTML (in Jupyter Notebook) or ASCII (in terminal), with aligned columns.</p> <p>Parameters:</p> Name Type Description Default <code>columns_data</code> <code>list</code> <p>List of lists, where each inner list represents a row of data.</p> required <code>columns_alignment</code> <code>list</code> <p>Corresponding text alignment for each column (e.g., 'left', 'center', 'right').</p> required <code>columns_headers</code> <code>list</code> <p>List of column headers.</p> <code>None</code> <code>show_index</code> <code>bool</code> <p>Whether to show the index column.</p> <code>False</code> Source code in <code>src/easydiffraction/utils/utils.py</code> <pre><code>def render_table(\n    columns_data,\n    columns_alignment,\n    columns_headers=None,\n    show_index=False,\n    display_handle=None,\n):\n    \"\"\"\n    Renders a table either as an HTML (in Jupyter Notebook) or ASCII (in terminal),\n    with aligned columns.\n\n    Args:\n        columns_data (list): List of lists, where each inner list represents a row of data.\n        columns_alignment (list): Corresponding text alignment for each column (e.g., 'left', 'center', 'right').\n        columns_headers (list): List of column headers.\n        show_index (bool): Whether to show the index column.\n    \"\"\"\n\n    # Use pandas DataFrame for Jupyter Notebook rendering\n    if is_notebook():\n        # Create DataFrame\n        if columns_headers is None:\n            df = pd.DataFrame(columns_data)\n            df.columns = range(df.shape[1])  # Ensure numeric column labels\n            columns_headers = df.columns.tolist()\n            skip_headers = True\n        else:\n            df = pd.DataFrame(columns_data, columns=columns_headers)\n            skip_headers = False\n\n        # Force starting index from 1\n        if show_index:\n            df.index += 1\n\n        # Replace None/NaN values with empty strings\n        df.fillna('', inplace=True)\n\n        # Formatters for data cell alignment and replacing None with empty string\n        def make_formatter(align):\n            return lambda x: f'&lt;div style=\"text-align: {align};\"&gt;{x}&lt;/div&gt;'\n\n        formatters = {col: make_formatter(align) for col, align in zip(columns_headers, columns_alignment)}\n\n        # Convert DataFrame to HTML\n        html = df.to_html(\n            escape=False,\n            index=show_index,\n            formatters=formatters,\n            border=0,\n            header=not skip_headers,\n        )\n\n        # Add inline CSS to align the entire table to the left and show border\n        html = html.replace(\n            '&lt;table class=\"dataframe\"&gt;',\n            '&lt;table class=\"dataframe\" '\n            'style=\"'\n            'border-collapse: collapse; '\n            'border: 1px solid #515155; '\n            'margin-left: 0.5em;'\n            'margin-top: 0.5em;'\n            'margin-bottom: 1em;'\n            '\"&gt;',\n        )\n\n        # Manually apply text alignment to headers\n        if not skip_headers:\n            for col, align in zip(columns_headers, columns_alignment):\n                html = html.replace(f'&lt;th&gt;{col}', f'&lt;th style=\"text-align: {align};\"&gt;{col}')\n\n        # Display or update the table in Jupyter Notebook\n        if display_handle is not None:\n            display_handle.update(HTML(html))\n        else:\n            display(HTML(html))\n\n    # Use tabulate for terminal rendering\n    else:\n        if columns_headers is None:\n            columns_headers = []\n\n        indices = show_index\n        if show_index:\n            # Force starting index from 1\n            indices = range(1, len(columns_data) + 1)\n\n        table = tabulate(\n            columns_data,\n            headers=columns_headers,\n            tablefmt='fancy_outline',\n            numalign='left',\n            stralign='left',\n            showindex=indices,\n        )\n\n        print(table)\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.utils.tof_to_d","title":"<code>tof_to_d(tof, offset, linear, quad, quad_eps=1e-20)</code>","text":"<p>Convert time-of-flight (TOF) to d-spacing using a quadratic calibration.</p> Model <p>TOF = offset + linear * d + quad * d\u00b2</p> The function <ul> <li>Uses a linear fallback when the quadratic term is effectively zero.</li> <li>Solves the quadratic for d and selects the smallest positive, finite root.</li> <li>Returns NaN where no valid solution exists.</li> <li>Expects <code>tof</code> as a NumPy array; output matches its shape.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>tof</code> <code>ndarray</code> <p>Time-of-flight values (\u00b5s). Must be a NumPy array.</p> required <code>offset</code> <code>float</code> <p>Calibration offset (\u00b5s).</p> required <code>linear</code> <code>float</code> <p>Linear calibration coefficient (\u00b5s/\u00c5).</p> required <code>quad</code> <code>float</code> <p>Quadratic calibration coefficient (\u00b5s/\u00c5\u00b2).</p> required <code>quad_eps</code> <code>float</code> <p>Threshold to treat <code>quad</code> as zero. Defaults to 1e-20.</p> <code>1e-20</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: d-spacing values (\u00c5), NaN where invalid.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>tof</code> is not a NumPy array or coefficients are not real numbers.</p> Source code in <code>src/easydiffraction/utils/utils.py</code> <pre><code>def tof_to_d(\n    tof: np.ndarray,\n    offset: float,\n    linear: float,\n    quad: float,\n    quad_eps=1e-20,\n) -&gt; np.ndarray:\n    \"\"\"Convert time-of-flight (TOF) to d-spacing using a quadratic calibration.\n\n    Model:\n        TOF = offset + linear * d + quad * d\u00b2\n\n    The function:\n      - Uses a linear fallback when the quadratic term is effectively zero.\n      - Solves the quadratic for d and selects the smallest positive, finite root.\n      - Returns NaN where no valid solution exists.\n      - Expects ``tof`` as a NumPy array; output matches its shape.\n\n    Args:\n        tof (np.ndarray): Time-of-flight values (\u00b5s). Must be a NumPy array.\n        offset (float): Calibration offset (\u00b5s).\n        linear (float): Linear calibration coefficient (\u00b5s/\u00c5).\n        quad (float): Quadratic calibration coefficient (\u00b5s/\u00c5\u00b2).\n        quad_eps (float, optional): Threshold to treat ``quad`` as zero. Defaults to 1e-20.\n\n    Returns:\n        np.ndarray: d-spacing values (\u00c5), NaN where invalid.\n\n    Raises:\n        TypeError: If ``tof`` is not a NumPy array or coefficients are not real numbers.\n    \"\"\"\n    # Type checks\n    if not isinstance(tof, np.ndarray):\n        raise TypeError(f\"'tof' must be a NumPy array, got {type(tof).__name__}\")\n    for name, val in (('offset', offset), ('linear', linear), ('quad', quad), ('quad_eps', quad_eps)):\n        if not isinstance(val, (int, float, np.integer, np.floating)):\n            raise TypeError(f\"'{name}' must be a real number, got {type(val).__name__}\")\n\n    # Output initialized to NaN\n    d_out = np.full_like(tof, np.nan, dtype=float)\n\n    # 1) If quadratic term is effectively zero, use linear formula:\n    #    TOF \u2248 offset + linear * d =&gt;\n    #    d \u2248 (tof - offset) / linear\n    if abs(quad) &lt; quad_eps:\n        if linear != 0.0:\n            d = (tof - offset) / linear\n            # Keep only positive, finite results\n            valid = np.isfinite(d) &amp; (d &gt; 0)\n            d_out[valid] = d[valid]\n        # If B == 0 too, there's no solution; leave NaN\n        return d_out\n\n    # 2) If quadratic term is significant, solve the quadratic equation:\n    #    TOF = offset + linear * d + quad * d\u00b2 =&gt;\n    #    quad * d\u00b2 + linear * d + (offset - tof) = 0\n    discr = linear**2 - 4 * quad * (offset - tof)\n    has_real_roots = discr &gt;= 0\n\n    if np.any(has_real_roots):\n        sqrt_discr = np.sqrt(discr[has_real_roots])\n\n        root_1 = (-linear + sqrt_discr) / (2 * quad)\n        root_2 = (-linear - sqrt_discr) / (2 * quad)\n\n        # Pick smallest positive, finite root per element\n        roots = np.stack((root_1, root_2), axis=0)  # Stack roots for comparison\n        roots = np.where(np.isfinite(roots) &amp; (roots &gt; 0), roots, np.nan)  # Replace non-finite or negative roots with NaN\n        chosen = np.nanmin(roots, axis=0)  # Choose the smallest positive root or NaN if none are valid\n\n        d_out[has_real_roots] = chosen\n\n    return d_out\n</code></pre>"},{"location":"api-reference/utils/#easydiffraction.utils.utils.twotheta_to_d","title":"<code>twotheta_to_d(twotheta, wavelength)</code>","text":"<p>Convert 2-theta to d-spacing using Bragg's law.</p> <p>Parameters:</p> Name Type Description Default <code>twotheta</code> <code>float or ndarray</code> <p>2-theta angle in degrees.</p> required <code>wavelength</code> <code>float</code> <p>Wavelength in \u00c5.</p> required <p>Returns:</p> Name Type Description <code>d</code> <code>float or ndarray</code> <p>d-spacing in \u00c5.</p> Source code in <code>src/easydiffraction/utils/utils.py</code> <pre><code>def twotheta_to_d(twotheta, wavelength):\n    \"\"\"\n    Convert 2-theta to d-spacing using Bragg's law.\n\n    Parameters:\n        twotheta (float or np.ndarray): 2-theta angle in degrees.\n        wavelength (float): Wavelength in \u00c5.\n\n    Returns:\n        d (float or np.ndarray): d-spacing in \u00c5.\n    \"\"\"\n    # Convert twotheta from degrees to radians\n    theta_rad = np.radians(twotheta / 2)\n\n    # Calculate d-spacing using Bragg's law\n    d = wavelength / (2 * np.sin(theta_rad))\n\n    return d\n</code></pre>"},{"location":"installation-and-setup/","title":"Installation &amp; Setup","text":""},{"location":"installation-and-setup/#requirements","title":"Requirements","text":"<p>EasyDiffraction is a cross-platform Python library compatible with Python 3.10 through 3.12. Make sure Python is installed on your system before proceeding with the installation.</p>"},{"location":"installation-and-setup/#environment-setup","title":"Environment Setup optional","text":"<p>We recommend using a virtual environment to isolate dependencies and avoid conflicts with system-wide packages. If any issues arise, you can simply delete and recreate the environment.</p>"},{"location":"installation-and-setup/#creating-and-activating-a-virtual-environment","title":"Creating and Activating a Virtual Environment:","text":"<ul> <li>Create a new virtual environment:   <pre><code>python3 -m venv venv\n</code></pre></li> </ul> <ul> <li> <p>Activate the environment:</p>  macOS Linux Windows <pre><code>. venv/bin/activate\n</code></pre> <pre><code>. venv/bin/activate\n</code></pre> <pre><code>. venv/Scripts/activate      # Windows with Unix-like shells\n.\\venv\\Scripts\\activate.bat  # Windows with CMD\n.\\venv\\Scripts\\activate.ps1  # Windows with PowerShell\n</code></pre> </li> </ul> <ul> <li>The terminal should now show <code>(venv)</code>, indicating that the virtual environment   is active.</li> </ul>"},{"location":"installation-and-setup/#deactivating-and-removing-the-virtual-environment","title":"Deactivating and Removing the Virtual Environment:","text":"<ul> <li>Exit the environment:   <pre><code>deactivate\n</code></pre></li> </ul> <ul> <li> <p>If this environment is no longer needed, delete it:</p>  macOS Linux Windows <pre><code>rm -rf venv\n</code></pre> <pre><code>rm -rf venv\n</code></pre> <pre><code>rmdir /s /q venv\n</code></pre> </li> </ul>"},{"location":"installation-and-setup/#installation-guide","title":"Installation Guide","text":""},{"location":"installation-and-setup/#from-pypi","title":"Installing from PyPI recommended","text":"<p>EasyDiffraction is available on PyPI (Python Package Index) and can be installed using <code>pip</code>. We strongly recommend installing it within a virtual environment, as described in the Environment Setup section.</p> <p>We recommend installing the latest release of EasyDiffraction with the <code>visualization</code> extras, which include optional dependencies used for simplified visualization of charts and tables. This can be especially useful for running the Jupyter Notebook examples. To do so, use the following command:</p> <pre><code>pip install 'easydiffraction[visualization]'\n</code></pre> <p>If only the core functionality is needed, the library can be installed simply with:</p> <pre><code>pip install easydiffraction\n</code></pre> <p>To install a specific version of EasyDiffraction, e.g., 1.0.3:</p> <pre><code>pip install 'easydiffraction==1.0.3'\n</code></pre> <p>To upgrade to the latest version:</p> <pre><code>pip install --upgrade --force-reinstall easydiffraction\n</code></pre> <p>To check the installed version:</p> <pre><code>pip show easydiffraction\n</code></pre>"},{"location":"installation-and-setup/#installing-from-github","title":"Installing from GitHub","text":"<p>Installing unreleased versions is generally not recommended but may be useful for testing.</p> <p>To install EasyDiffraction from, e.g., the <code>develop</code> branch of GitHub:</p> <pre><code>pip install git+https://github.com/easyscience/diffraction-lib@develop\n</code></pre> <p>To include extra dependencies (e.g., visualization):</p> <pre><code>pip install 'easydiffraction[visualization] @ git+https://github.com/easyscience/diffraction-lib@develop'\n</code></pre>"},{"location":"installation-and-setup/#how-to-run-tutorials","title":"How to Run Tutorials","text":"<p>EasyDiffraction includes a collection of Jupyter Notebook examples that demonstrate key functionality. These tutorials serve as step-by-step guides to help users understand the diffraction data analysis workflow.</p> <p>They are available as static HTML pages in the  Tutorials section. You can also run them interactively in two ways:</p> <ul> <li>Run Locally \u2013 Download the notebook via the  Download button and run it on your computer.</li> <li>Run Online \u2013 Use the  Open in Google Colab button to run   the tutorial directly in your browser (no setup required).</li> </ul> <p>Note</p> <p>You can also download all Jupyter notebooks at once as a zip archive from the EasyDiffraction Releases.</p>"},{"location":"installation-and-setup/#run-tutorials-locally","title":"Run Tutorials Locally","text":"<p>To run tutorials locally, install Jupyter Notebook or JupyterLab. Here are the steps to follow in the case of Jupyter Notebook:</p> <ul> <li>Install Jupyter Notebook:   <pre><code>pip install notebook\n</code></pre></li> <li>Download the latest EasyDiffraction tutorial examples from GitHub, e.g., using   curl:   <pre><code>curl --location --remote-name https://github.com/easyscience/diffraction-lib/releases/latest/download/examples.zip\n</code></pre></li> <li>Unzip the archive:   <pre><code>unzip examples.zip\n</code></pre></li> <li>Launch the Jupyter Notebook server in the <code>examples/</code> directory:   <pre><code>jupyter notebook examples/\n</code></pre></li> <li>In your web browser, go to:   <pre><code>http://localhost:8888/\n</code></pre></li> <li>Open one of the <code>*.ipynb</code> files.</li> </ul>"},{"location":"installation-and-setup/#run-tutorials-via-google-colab","title":"Run Tutorials via Google Colab","text":"<p>Google Colab lets you run Jupyter Notebooks in the cloud without any local installation.</p> <p>To use Google Colab:</p> <ul> <li>Ensure you have a Google account.</li> <li>Go to the  Tutorials section.</li> <li>Click the  Open in Google Colab button on any tutorial.</li> </ul> <p>This is the fastest way to start experimenting with EasyDiffraction, without setting up Python on your system.</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#description","title":"Description","text":"<p>EasyDiffraction is scientific software for calculating diffraction patterns based on structural models and refining model parameters against experimental data.</p> <p>It is available as both a cross-platform desktop application and a Python library.</p> <p>This documentation covers the usage of the EasyDiffraction Python library. For the graphical user interface (GUI) version, refer to the GUI documentation.</p>"},{"location":"introduction/#easyscience","title":"EasyScience","text":"<p>EasyDiffraction is developed using the EasyScience framework, which provides tools for building modular and flexible scientific libraries and applications.</p>"},{"location":"introduction/#license","title":"License","text":"<p>EasyDiffraction is released under the BSD 3-Clause License.</p>"},{"location":"introduction/#releases","title":"Releases","text":"<p>The latest version of the EasyDiffraction Python library is .</p> <p>For a complete list of new features, bug fixes, and improvements, see the GitHub Releases page.</p>"},{"location":"introduction/#citation","title":"Citation","text":"<p>If you use EasyDiffraction in your work, please cite the specific version you used.</p> <p>All official releases of the EasyDiffraction library are archived on Zenodo, each with a version-specific Digital Object Identifier (DOI).</p> <p>Citation details in various styles (e.g., APA, MLA) and formats (e.g., BibTeX, JSON) are available on the Zenodo archive page.</p>"},{"location":"introduction/#contributing","title":"Contributing","text":"<p>We welcome contributions from the community! EasyDiffraction is intended to be a community-driven, open-source project supported by a diverse group of contributors.</p> <p>The project is maintained by the European Spallation Source (ESS).</p> <p>To contribute, see our  Contributing Guidelines on GitHub.</p>"},{"location":"introduction/#get-in-touch","title":"Get in Touch","text":"<p>For general questions or feedback, contact us at support@easydiffraction.org.</p> <p>To report bugs or request features, please use the GitHub Issue Tracker (free registration required).</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This section presents a collection of Jupyter Notebook tutorials that demonstrate how to use EasyDiffraction for various tasks. These tutorials serve as self-contained, step-by-step guides to help users grasp the workflow of diffraction data analysis using EasyDiffraction.</p> <p>Instructions on how to run the tutorials are provided in the  Installation &amp; Setup section of the documentation.</p> <p>The tutorials are organized into the following categories.</p>"},{"location":"tutorials/#getting-started","title":"Getting Started","text":"<ul> <li>LBCO <code>quick</code> \u2013 A minimal   example intended as a quick reference for users already familiar with the   EasyDiffraction API or who want to see an example refinement in code. This   tutorial covers a Rietveld refinement of the La0.5Ba0.5CoO3 crystal structure   using constant wavelength neutron powder diffraction data from HRPT at PSI.</li> <li>LBCO <code>basic</code> \u2013 Demonstrates   the use of the EasyDiffraction API in a simplified, user-friendly manner that   closely follows the GUI workflow for a Rietveld refinement of the   La0.5Ba0.5CoO3 crystal structure using constant wavelength neutron powder   diffraction data from HRPT at PSI. This tutorial provides a full explanation   of the workflow with detailed comments and descriptions of every step, making   it suitable for users who are new to EasyDiffraction or those who prefer a   more guided approach.</li> <li>PbSO4 <code>advanced</code> \u2013   Demonstrates a more flexible and advanced approach to using the   EasyDiffraction library, intended for users who are more comfortable with   Python programming. This tutorial covers a Rietveld refinement of the PbSO4   crystal structure based on the joint fit of both X-ray and neutron diffraction   data.</li> </ul>"},{"location":"tutorials/#standard-diffraction","title":"Standard Diffraction","text":"<ul> <li>HS <code>pd-neut-cwl</code> \u2013 Demonstrates a   Rietveld refinement of the HS crystal structure using constant wavelength   neutron powder diffraction data from HRPT at PSI.</li> <li>Si <code>pd-neut-tof</code> \u2013 Demonstrates a   Rietveld refinement of the Si crystal structure using time-of-flight neutron   powder diffraction data from SEPD at Argonne.</li> <li>NCAF <code>pd-neut-tof</code> \u2013   Demonstrates a Rietveld refinement of the Na2Ca3Al2F14 crystal structure using   two time-of-flight neutron powder diffraction datasets (from two detector   banks) of the WISH instrument at ISIS.</li> <li>LBCO+Si McStas \u2013   Demonstrates a Rietveld refinement of the La0.5Ba0.5CoO3 crystal structure   with a small amount of Si impurity as a secondary phase using time-of-flight   neutron powder diffraction data simulated with McStas.</li> </ul>"},{"location":"tutorials/#pair-distribution-function-pdf","title":"Pair Distribution Function (PDF)","text":"<ul> <li>Ni <code>pd-neut-cwl</code> \u2013 Demonstrates a PDF analysis of   Ni using data collected from a constant wavelength neutron powder diffraction   experiment.</li> <li>Si <code>pd-neut-tof</code> \u2013 Demonstrates a PDF   analysis of Si using data collected from a time-of-flight neutron powder   diffraction experiment at NOMAD at SNS.</li> <li>NaCl <code>pd-xray</code> \u2013 Demonstrates a PDF analysis of NaCl   using data collected from an X-ray powder diffraction experiment.</li> </ul>"},{"location":"tutorials/#workshops-schools","title":"Workshops &amp; Schools","text":"<ul> <li>2025 DMSC \u2013 A   workshop tutorial that demonstrates a Rietveld refinement of the   La0.5Ba0.5CoO3 crystal structure using time-of-flight neutron powder   diffraction data simulated with McStas. This tutorial is designed for the ESS   DMSC Summer School 2025.</li> </ul>"},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/","title":"PbSO4 advanced","text":"In\u00a0[2]: Copied! <pre>from easydiffraction import Experiment\nfrom easydiffraction import Project\nfrom easydiffraction import SampleModel\nfrom easydiffraction import download_from_repository\n</pre> from easydiffraction import Experiment from easydiffraction import Project from easydiffraction import SampleModel from easydiffraction import download_from_repository <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>model = SampleModel('pbso4')\n</pre> model = SampleModel('pbso4') In\u00a0[4]: Copied! <pre>model.space_group.name_h_m = 'P n m a'\n</pre> model.space_group.name_h_m = 'P n m a' In\u00a0[5]: Copied! <pre>model.cell.length_a = 8.47\nmodel.cell.length_b = 5.39\nmodel.cell.length_c = 6.95\n</pre> model.cell.length_a = 8.47 model.cell.length_b = 5.39 model.cell.length_c = 6.95 In\u00a0[6]: Copied! <pre>model.atom_sites.add('Pb', 'Pb', 0.1876, 0.25, 0.167, b_iso=1.37)\nmodel.atom_sites.add('S', 'S', 0.0654, 0.25, 0.684, b_iso=0.3777)\nmodel.atom_sites.add('O1', 'O', 0.9082, 0.25, 0.5954, b_iso=1.9764)\nmodel.atom_sites.add('O2', 'O', 0.1935, 0.25, 0.5432, b_iso=1.4456)\nmodel.atom_sites.add('O3', 'O', 0.0811, 0.0272, 0.8086, b_iso=1.2822)\n</pre> model.atom_sites.add('Pb', 'Pb', 0.1876, 0.25, 0.167, b_iso=1.37) model.atom_sites.add('S', 'S', 0.0654, 0.25, 0.684, b_iso=0.3777) model.atom_sites.add('O1', 'O', 0.9082, 0.25, 0.5954, b_iso=1.9764) model.atom_sites.add('O2', 'O', 0.1935, 0.25, 0.5432, b_iso=1.4456) model.atom_sites.add('O3', 'O', 0.0811, 0.0272, 0.8086, b_iso=1.2822) In\u00a0[7]: Copied! <pre>download_from_repository('d1a_pbso4.dat', destination='data')\n</pre> download_from_repository('d1a_pbso4.dat', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/d1a_pbso4.dat' already exists and will not be overwritten.\n</pre> In\u00a0[8]: Copied! <pre>expt1 = Experiment('npd', radiation_probe='neutron', data_path='data/d1a_pbso4.dat')\n</pre> expt1 = Experiment('npd', radiation_probe='neutron', data_path='data/d1a_pbso4.dat') <pre>\nData loaded successfully\nExperiment \ud83d\udd2c 'npd'. Number of data points: 1801\n</pre> In\u00a0[9]: Copied! <pre>expt1.instrument.setup_wavelength = 1.91\nexpt1.instrument.calib_twotheta_offset = -0.1406\n</pre> expt1.instrument.setup_wavelength = 1.91 expt1.instrument.calib_twotheta_offset = -0.1406 In\u00a0[10]: Copied! <pre>expt1.peak.broad_gauss_u = 0.139\nexpt1.peak.broad_gauss_v = -0.412\nexpt1.peak.broad_gauss_w = 0.386\nexpt1.peak.broad_lorentz_x = 0\nexpt1.peak.broad_lorentz_y = 0.088\n</pre> expt1.peak.broad_gauss_u = 0.139 expt1.peak.broad_gauss_v = -0.412 expt1.peak.broad_gauss_w = 0.386 expt1.peak.broad_lorentz_x = 0 expt1.peak.broad_lorentz_y = 0.088 <p>Select the background type.</p> In\u00a0[11]: Copied! <pre>expt1.background_type = 'line-segment'\n</pre> expt1.background_type = 'line-segment' <pre>\nBackground type for experiment 'npd' changed to\nline-segment\n</pre> <p>Add background points.</p> In\u00a0[12]: Copied! <pre>for x, y in [\n    (11.0, 206.1624),\n    (15.0, 194.75),\n    (20.0, 194.505),\n    (30.0, 188.4375),\n    (50.0, 207.7633),\n    (70.0, 201.7002),\n    (120.0, 244.4525),\n    (153.0, 226.0595),\n]:\n    expt1.background.add(x, y)\n</pre> for x, y in [     (11.0, 206.1624),     (15.0, 194.75),     (20.0, 194.505),     (30.0, 188.4375),     (50.0, 207.7633),     (70.0, 201.7002),     (120.0, 244.4525),     (153.0, 226.0595), ]:     expt1.background.add(x, y) In\u00a0[13]: Copied! <pre>expt1.linked_phases.add('pbso4', scale=1.5)\n</pre> expt1.linked_phases.add('pbso4', scale=1.5) In\u00a0[14]: Copied! <pre>download_from_repository('lab_pbso4.dat', destination='data')\n</pre> download_from_repository('lab_pbso4.dat', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/lab_pbso4.dat' already exists and will not be overwritten.\n</pre> In\u00a0[15]: Copied! <pre>expt2 = Experiment('xrd', radiation_probe='xray', data_path='data/lab_pbso4.dat')\n</pre> expt2 = Experiment('xrd', radiation_probe='xray', data_path='data/lab_pbso4.dat') <pre>\nData loaded successfully\nExperiment \ud83d\udd2c 'xrd'. Number of data points: 3601\n</pre> In\u00a0[16]: Copied! <pre>expt2.instrument.setup_wavelength = 1.540567\nexpt2.instrument.calib_twotheta_offset = -0.05181\n</pre> expt2.instrument.setup_wavelength = 1.540567 expt2.instrument.calib_twotheta_offset = -0.05181 In\u00a0[17]: Copied! <pre>expt2.peak.broad_gauss_u = 0.304138\nexpt2.peak.broad_gauss_v = -0.112622\nexpt2.peak.broad_gauss_w = 0.021272\nexpt2.peak.broad_lorentz_x = 0\nexpt2.peak.broad_lorentz_y = 0.057691\n</pre> expt2.peak.broad_gauss_u = 0.304138 expt2.peak.broad_gauss_v = -0.112622 expt2.peak.broad_gauss_w = 0.021272 expt2.peak.broad_lorentz_x = 0 expt2.peak.broad_lorentz_y = 0.057691 <p>Select background type.</p> In\u00a0[18]: Copied! <pre>expt2.background_type = 'chebyshev polynomial'\n</pre> expt2.background_type = 'chebyshev polynomial' <pre>\nBackground type for experiment 'xrd' changed to\nchebyshev polynomial\n</pre> <p>Add background points.</p> In\u00a0[19]: Copied! <pre>for x, y in [\n    (0, 119.195),\n    (1, 6.221),\n    (2, -45.725),\n    (3, 8.119),\n    (4, 54.552),\n    (5, -20.661),\n]:\n    expt2.background.add(x, y)\n</pre> for x, y in [     (0, 119.195),     (1, 6.221),     (2, -45.725),     (3, 8.119),     (4, 54.552),     (5, -20.661), ]:     expt2.background.add(x, y) In\u00a0[20]: Copied! <pre>expt2.linked_phases.add('pbso4', scale=0.001)\n</pre> expt2.linked_phases.add('pbso4', scale=0.001) In\u00a0[21]: Copied! <pre>project = Project()\n</pre> project = Project() In\u00a0[22]: Copied! <pre>project.sample_models.add(model)\n</pre> project.sample_models.add(model) In\u00a0[23]: Copied! <pre>project.experiments.add(expt1)\nproject.experiments.add(expt2)\n</pre> project.experiments.add(expt1) project.experiments.add(expt2) In\u00a0[24]: Copied! <pre>project.analysis.current_calculator = 'cryspy'\n</pre> project.analysis.current_calculator = 'cryspy' <pre>\nCurrent calculator changed to\ncryspy\n</pre> In\u00a0[25]: Copied! <pre>project.analysis.fit_mode = 'joint'\n</pre> project.analysis.fit_mode = 'joint' <pre>\nCurrent fit mode changed to\njoint\n</pre> In\u00a0[26]: Copied! <pre>project.analysis.current_minimizer = 'lmfit (leastsq)'\n</pre> project.analysis.current_minimizer = 'lmfit (leastsq)' <pre>\nCurrent minimizer changed to\nlmfit (leastsq)\n</pre> In\u00a0[27]: Copied! <pre>model.cell.length_a.free = True\nmodel.cell.length_b.free = True\nmodel.cell.length_c.free = True\n</pre> model.cell.length_a.free = True model.cell.length_b.free = True model.cell.length_c.free = True <p>Set experiment parameters to be optimized.</p> In\u00a0[28]: Copied! <pre>expt1.linked_phases['pbso4'].scale.free = True\n\nexpt1.instrument.calib_twotheta_offset.free = True\n\nexpt1.peak.broad_gauss_u.free = True\nexpt1.peak.broad_gauss_v.free = True\nexpt1.peak.broad_gauss_w.free = True\nexpt1.peak.broad_lorentz_y.free = True\n</pre> expt1.linked_phases['pbso4'].scale.free = True  expt1.instrument.calib_twotheta_offset.free = True  expt1.peak.broad_gauss_u.free = True expt1.peak.broad_gauss_v.free = True expt1.peak.broad_gauss_w.free = True expt1.peak.broad_lorentz_y.free = True In\u00a0[29]: Copied! <pre>expt2.linked_phases['pbso4'].scale.free = True\n\nexpt2.instrument.calib_twotheta_offset.free = True\n\nexpt2.peak.broad_gauss_u.free = True\nexpt2.peak.broad_gauss_v.free = True\nexpt2.peak.broad_gauss_w.free = True\nexpt2.peak.broad_lorentz_y.free = True\n\nfor term in expt2.background:\n    term.coef.free = True\n</pre> expt2.linked_phases['pbso4'].scale.free = True  expt2.instrument.calib_twotheta_offset.free = True  expt2.peak.broad_gauss_u.free = True expt2.peak.broad_gauss_v.free = True expt2.peak.broad_gauss_w.free = True expt2.peak.broad_lorentz_y.free = True  for term in expt2.background:     term.coef.free = True In\u00a0[30]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing all experiments \ud83d\udd2c ['npd', 'xrd'] for 'joint' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 37.01 25 16.30 56.0% \u2193 136 16.21 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 16.21 at iteration 135\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 6.63 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 16.21\n\ud83d\udccf R-factor (Rf): 13.18%\n\ud83d\udccf R-factor squared (Rf\u00b2): 17.19%\n\ud83d\udccf Weighted R-factor (wR): 17.09%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 pbso4 cell length_a 8.4700 8.4693 0.0002 \u00c5 0.01 % \u2193 2 pbso4 cell length_b 5.3900 5.3912 0.0001 \u00c5 0.02 % \u2191 3 pbso4 cell length_c 6.9500 6.9504 0.0002 \u00c5 0.01 % \u2191 4 npd instrument twotheta_offset -0.1406 -0.1385 0.0019 deg 1.47 % \u2193 5 npd linked_phases pbso4 scale 1.5000 1.4622 0.0049 2.52 % \u2193 6 npd peak broad_gauss_u 0.1390 0.2901 0.0350 deg\u00b2 108.67 % \u2191 7 npd peak broad_gauss_v -0.4120 -0.6390 0.0531 deg\u00b2 55.10 % \u2191 8 npd peak broad_gauss_w 0.3860 0.4552 0.0186 deg\u00b2 17.92 % \u2191 9 npd peak broad_lorentz_y 0.0880 0.0931 0.0034 deg 5.76 % \u2191 10 xrd background 0 chebyshev_coef 119.1950 85.8587 1.3293 27.97 % \u2193 11 xrd background 1 chebyshev_coef 6.2210 -19.3112 1.8805 410.42 % \u2193 12 xrd background 2 chebyshev_coef -45.7250 5.3658 1.7778 111.74 % \u2193 13 xrd background 3 chebyshev_coef 8.1190 11.8842 1.7472 46.37 % \u2191 14 xrd background 4 chebyshev_coef 54.5520 18.5560 1.5670 65.98 % \u2193 15 xrd background 5 chebyshev_coef -20.6610 -6.4093 1.5359 68.98 % \u2193 16 xrd instrument twotheta_offset -0.0518 -0.0637 0.0009 deg 22.93 % \u2191 17 xrd linked_phases pbso4 scale 0.0010 0.0010 0.0000 1.52 % \u2193 18 xrd peak broad_gauss_u 0.3041 0.5724 0.0196 deg\u00b2 88.21 % \u2191 19 xrd peak broad_gauss_v -0.1126 -0.2799 0.0142 deg\u00b2 148.57 % \u2191 20 xrd peak broad_gauss_w 0.0213 0.0452 0.0024 deg\u00b2 112.27 % \u2191 21 xrd peak broad_lorentz_y 0.0577 0.0587 0.0014 deg 1.75 % \u2191 In\u00a0[31]: Copied! <pre>project.plot_meas_vs_calc(expt_name='npd', x_min=35.5, x_max=38.3, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='npd', x_min=35.5, x_max=38.3, show_residual=True) In\u00a0[32]: Copied! <pre>project.plot_meas_vs_calc(expt_name='xrd', x_min=29.0, x_max=30.4, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='xrd', x_min=29.0, x_max=30.4, show_residual=True)"},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#structure-refinement-pbso4-npd-xrd","title":"Structure Refinement: PbSO4, NPD + XRD\u00b6","text":"<p>This example demonstrates a more advanced use of the EasyDiffraction library by explicitly creating and configuring sample models and experiments before adding them to a project. It could be more suitable for users who are interested in creating custom workflows. This tutorial provides minimal explanation and is intended for users already familiar with EasyDiffraction.</p> <p>The tutorial covers a Rietveld refinement of PbSO4 crystal structure based on the joint fit of both X-ray and neutron diffraction data.</p>"},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#define-sample-model","title":"Define Sample Model\u00b6","text":"<p>This section shows how to add sample models and modify their parameters.</p>"},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#create-sample-model","title":"Create Sample Model\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-space-group","title":"Set Space Group\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-unit-cell","title":"Set Unit Cell\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-atom-sites","title":"Set Atom Sites\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#define-experiments","title":"Define Experiments\u00b6","text":"<p>This section shows how to add experiments, configure their parameters, and link the sample models defined in the previous step.</p>"},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#experiment-1-npd","title":"Experiment 1: npd\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#download-data","title":"Download Data\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#create-experiment","title":"Create Experiment\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-instrument","title":"Set Instrument\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-peak-profile","title":"Set Peak Profile\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-background","title":"Set Background\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-linked-phases","title":"Set Linked Phases\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#experiment-2-xrd","title":"Experiment 2: xrd\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#download-data","title":"Download Data\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#create-experiment","title":"Create Experiment\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-instrument","title":"Set Instrument\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-peak-profile","title":"Set Peak Profile\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-background","title":"Set Background\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-linked-phases","title":"Set Linked Phases\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#define-project","title":"Define Project\u00b6","text":"<p>The project object is used to manage sample models, experiments, and analysis.</p>"},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#add-experiments","title":"Add Experiments\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#perform-analysis","title":"Perform Analysis\u00b6","text":"<p>This section outlines the analysis process, including how to configure calculation and fitting engines.</p>"},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-calculator","title":"Set Calculator\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-fit-mode","title":"Set Fit Mode\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-minimizer","title":"Set Minimizer\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#set-fitting-parameters","title":"Set Fitting Parameters\u00b6","text":"<p>Set sample model parameters to be optimized.</p>"},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#perform-fit","title":"Perform Fit\u00b6","text":""},{"location":"tutorials/advanced_joint-fit_pd-neut-xray-cwl_PbSO4/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/","title":"LBCO basic","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>project = ed.Project(name='lbco_hrpt')\n</pre> project = ed.Project(name='lbco_hrpt') In\u00a0[4]: Copied! <pre>project.info.title = 'La0.5Ba0.5CoO3 at HRPT@PSI'\nproject.info.description = \"\"\"This project demonstrates a standard\nrefinement of La0.5Ba0.5CoO3, which crystallizes in a perovskite-type\nstructure, using neutron powder diffraction data collected in constant\nwavelength mode at the HRPT diffractometer (PSI).\"\"\"\n</pre> project.info.title = 'La0.5Ba0.5CoO3 at HRPT@PSI' project.info.description = \"\"\"This project demonstrates a standard refinement of La0.5Ba0.5CoO3, which crystallizes in a perovskite-type structure, using neutron powder diffraction data collected in constant wavelength mode at the HRPT diffractometer (PSI).\"\"\" In\u00a0[5]: Copied! <pre>project.info.show_as_cif()\n</pre> project.info.show_as_cif() <pre>\nProject \ud83d\udce6 'lbco_hrpt' info as cif\n</pre> _project.id               lbco_hrpt _project.title            'La0.5Ba0.5CoO3 at HRPT@PSI' _project.description      'This project demonstrates a standard                           refinement of La0.5Ba0.5CoO3, which                           crystallizes in a perovskite-type structure,                           using neutron powder diffraction data                           collected in constant wavelength mode at the                           HRPT diffractometer (PSI).' _project.created          '11 Aug 2025 20:06:24' _project.last_modified    '11 Aug 2025 20:06:24' In\u00a0[6]: Copied! <pre>project.save_as(dir_path='lbco_hrpt', temporary=True)\n</pre> project.save_as(dir_path='lbco_hrpt', temporary=True) <pre>\nSaving project \ud83d\udce6 'lbco_hrpt' to\n/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/lbco_hrpt\n\u2705 project.cif\n\u2705 analysis.cif\n\u2705 summary.cif\n</pre> <p>Show supported plotting engines.</p> In\u00a0[7]: Copied! <pre>project.plotter.show_supported_engines()\n</pre> project.plotter.show_supported_engines() <pre>\nSupported plotter engines\n</pre> Engine Description asciichartpy Console ASCII line charts plotly Interactive browser-based graphing library <p>Show current plotting configuration.</p> In\u00a0[8]: Copied! <pre>project.plotter.show_config()\n</pre> project.plotter.show_config() <pre>\nCurrent plotter configuration\n</pre> Parameter Value Plotting engine plotly x-axis limits [-inf, inf] Chart height 9 <p>Set plotting engine.</p> In\u00a0[9]: Copied! <pre>project.plotter.engine = 'plotly'\n</pre> project.plotter.engine = 'plotly' <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[10]: Copied! <pre>project.sample_models.add(name='lbco')\n</pre> project.sample_models.add(name='lbco') In\u00a0[11]: Copied! <pre>project.sample_models.show_names()\n</pre> project.sample_models.show_names() <pre>\nDefined sample models \ud83e\udde9\n['lbco']\n</pre> In\u00a0[12]: Copied! <pre>project.sample_models['lbco'].space_group.name_h_m = 'P m -3 m'\nproject.sample_models['lbco'].space_group.it_coordinate_system_code = '1'\n</pre> project.sample_models['lbco'].space_group.name_h_m = 'P m -3 m' project.sample_models['lbco'].space_group.it_coordinate_system_code = '1' In\u00a0[13]: Copied! <pre>project.sample_models['lbco'].cell.length_a = 3.88\n</pre> project.sample_models['lbco'].cell.length_a = 3.88 In\u00a0[14]: Copied! <pre>project.sample_models['lbco'].atom_sites.add(\n    label='La',\n    type_symbol='La',\n    fract_x=0,\n    fract_y=0,\n    fract_z=0,\n    wyckoff_letter='a',\n    b_iso=0.5,\n    occupancy=0.5,\n)\nproject.sample_models['lbco'].atom_sites.add(\n    label='Ba',\n    type_symbol='Ba',\n    fract_x=0,\n    fract_y=0,\n    fract_z=0,\n    wyckoff_letter='a',\n    b_iso=0.5,\n    occupancy=0.5,\n)\nproject.sample_models['lbco'].atom_sites.add(\n    label='Co',\n    type_symbol='Co',\n    fract_x=0.5,\n    fract_y=0.5,\n    fract_z=0.5,\n    wyckoff_letter='b',\n    b_iso=0.5,\n)\nproject.sample_models['lbco'].atom_sites.add(\n    label='O',\n    type_symbol='O',\n    fract_x=0,\n    fract_y=0.5,\n    fract_z=0.5,\n    wyckoff_letter='c',\n    b_iso=0.5,\n)\n</pre> project.sample_models['lbco'].atom_sites.add(     label='La',     type_symbol='La',     fract_x=0,     fract_y=0,     fract_z=0,     wyckoff_letter='a',     b_iso=0.5,     occupancy=0.5, ) project.sample_models['lbco'].atom_sites.add(     label='Ba',     type_symbol='Ba',     fract_x=0,     fract_y=0,     fract_z=0,     wyckoff_letter='a',     b_iso=0.5,     occupancy=0.5, ) project.sample_models['lbco'].atom_sites.add(     label='Co',     type_symbol='Co',     fract_x=0.5,     fract_y=0.5,     fract_z=0.5,     wyckoff_letter='b',     b_iso=0.5, ) project.sample_models['lbco'].atom_sites.add(     label='O',     type_symbol='O',     fract_x=0,     fract_y=0.5,     fract_z=0.5,     wyckoff_letter='c',     b_iso=0.5, ) In\u00a0[15]: Copied! <pre>project.sample_models['lbco'].apply_symmetry_constraints()\n</pre> project.sample_models['lbco'].apply_symmetry_constraints() In\u00a0[16]: Copied! <pre>project.sample_models['lbco'].show_as_cif()\n</pre> project.sample_models['lbco'].show_as_cif() <pre>\nSample model \ud83e\udde9 'lbco' as cif\n</pre> data_lbco _space_group.IT_coordinate_system_code  1 _space_group.name_H-M_alt  \"P m -3 m\" _cell.angle_alpha  90 _cell.angle_beta  90 _cell.angle_gamma  90 _cell.length_a  3.88 _cell.length_b  3.88 _cell.length_c  3.88 loop_ _atom_site.ADP_type _atom_site.B_iso_or_equiv _atom_site.fract_x _atom_site.fract_y _atom_site.fract_z _atom_site.label _atom_site.occupancy _atom_site.type_symbol _atom_site.Wyckoff_letter Biso 0.5 0.0 0.0 0.0 La 0.5 La a Biso 0.5 0.0 0.0 0.0 Ba 0.5 Ba a Biso 0.5 0.5 0.5 0.5 Co 1.0 Co b Biso 0.5 0.0 0.5 0.5 O 1.0 O c In\u00a0[17]: Copied! <pre>project.sample_models['lbco'].show_structure()\n</pre> project.sample_models['lbco'].show_structure() <pre>\nSample model \ud83e\udde9 'lbco' structure view\nNot implemented yet.\n</pre> In\u00a0[18]: Copied! <pre>project.save()\n</pre> project.save() <pre>\nSaving project \ud83d\udce6 'lbco_hrpt' to\n/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/lbco_hrpt\n\u2705 project.cif\n\u2705 sample_models/lbco.cif\n\u2705 analysis.cif\n\u2705 summary.cif\n</pre> In\u00a0[19]: Copied! <pre>ed.download_from_repository('hrpt_lbco.xye', destination='data')\n</pre> ed.download_from_repository('hrpt_lbco.xye', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/hrpt_lbco.xye' already exists and will not be overwritten.\n</pre> In\u00a0[20]: Copied! <pre>project.experiments.add(\n    name='hrpt',\n    sample_form='powder',\n    beam_mode='constant wavelength',\n    radiation_probe='neutron',\n    data_path='data/hrpt_lbco.xye',\n)\n</pre> project.experiments.add(     name='hrpt',     sample_form='powder',     beam_mode='constant wavelength',     radiation_probe='neutron',     data_path='data/hrpt_lbco.xye', ) <pre>\nLoading measured data from ASCII file\n/Users/runner/work/diffraction-lib/diffraction-lib/docs/tutorials/data/hrpt_lbco.xye\n\nData loaded successfully\nExperiment \ud83d\udd2c 'hrpt'. Number of data points: 3098\n</pre> In\u00a0[21]: Copied! <pre>project.experiments.show_names()\n</pre> project.experiments.show_names() <pre>\nDefined experiments \ud83d\udd2c\n['hrpt']\n</pre> In\u00a0[22]: Copied! <pre>project.plot_meas(expt_name='hrpt')\n</pre> project.plot_meas(expt_name='hrpt') In\u00a0[23]: Copied! <pre>project.experiments['hrpt'].instrument.setup_wavelength = 1.494\nproject.experiments['hrpt'].instrument.calib_twotheta_offset = 0.6\n</pre> project.experiments['hrpt'].instrument.setup_wavelength = 1.494 project.experiments['hrpt'].instrument.calib_twotheta_offset = 0.6 In\u00a0[24]: Copied! <pre>project.experiments['hrpt'].show_supported_peak_profile_types()\n</pre> project.experiments['hrpt'].show_supported_peak_profile_types() <pre>\nSupported peak profile types\n</pre> Peak profile type Description pseudo-voigt Pseudo-Voigt profile split pseudo-voigt Split pseudo-Voigt profile thompson-cox-hastings Thompson-Cox-Hastings profile <p>Show the current peak profile type.</p> In\u00a0[25]: Copied! <pre>project.experiments['hrpt'].show_current_peak_profile_type()\n</pre> project.experiments['hrpt'].show_current_peak_profile_type() <pre>\nCurrent peak profile type\npseudo-voigt\n</pre> <p>Select the desired peak profile type.</p> In\u00a0[26]: Copied! <pre>project.experiments['hrpt'].peak_profile_type = 'pseudo-voigt'\n</pre> project.experiments['hrpt'].peak_profile_type = 'pseudo-voigt' <pre>\nPeak profile type for experiment 'hrpt' changed to\npseudo-voigt\n</pre> <p>Modify default peak profile parameters.</p> In\u00a0[27]: Copied! <pre>project.experiments['hrpt'].peak.broad_gauss_u = 0.1\nproject.experiments['hrpt'].peak.broad_gauss_v = -0.1\nproject.experiments['hrpt'].peak.broad_gauss_w = 0.1\nproject.experiments['hrpt'].peak.broad_lorentz_x = 0\nproject.experiments['hrpt'].peak.broad_lorentz_y = 0.1\n</pre> project.experiments['hrpt'].peak.broad_gauss_u = 0.1 project.experiments['hrpt'].peak.broad_gauss_v = -0.1 project.experiments['hrpt'].peak.broad_gauss_w = 0.1 project.experiments['hrpt'].peak.broad_lorentz_x = 0 project.experiments['hrpt'].peak.broad_lorentz_y = 0.1 <p>Show supported background types.</p> In\u00a0[28]: Copied! <pre>project.experiments['hrpt'].show_supported_background_types()\n</pre> project.experiments['hrpt'].show_supported_background_types() <pre>\nSupported background types\n</pre> Background type Description line-segment Linear interpolation between points chebyshev polynomial Chebyshev polynomial background <p>Show current background type.</p> In\u00a0[29]: Copied! <pre>project.experiments['hrpt'].show_current_background_type()\n</pre> project.experiments['hrpt'].show_current_background_type() <pre>\nCurrent background type\nline-segment\n</pre> <p>Select the desired background type.</p> In\u00a0[30]: Copied! <pre>project.experiments['hrpt'].background_type = 'line-segment'\n</pre> project.experiments['hrpt'].background_type = 'line-segment' <pre>\nBackground type for experiment 'hrpt' changed to\nline-segment\n</pre> <p>Add background points.</p> In\u00a0[31]: Copied! <pre>project.experiments['hrpt'].background.add(x=10, y=170)\nproject.experiments['hrpt'].background.add(x=30, y=170)\nproject.experiments['hrpt'].background.add(x=50, y=170)\nproject.experiments['hrpt'].background.add(x=110, y=170)\nproject.experiments['hrpt'].background.add(x=165, y=170)\n</pre> project.experiments['hrpt'].background.add(x=10, y=170) project.experiments['hrpt'].background.add(x=30, y=170) project.experiments['hrpt'].background.add(x=50, y=170) project.experiments['hrpt'].background.add(x=110, y=170) project.experiments['hrpt'].background.add(x=165, y=170) <p>Show current background points.</p> In\u00a0[32]: Copied! <pre>project.experiments['hrpt'].background.show()\n</pre> project.experiments['hrpt'].background.show() <pre>\nLine-segment background points\n</pre> X Intensity 10 170 30 170 50 170 110 170 165 170 In\u00a0[33]: Copied! <pre>project.experiments['hrpt'].linked_phases.add(id='lbco', scale=10.0)\n</pre> project.experiments['hrpt'].linked_phases.add(id='lbco', scale=10.0) In\u00a0[34]: Copied! <pre>project.experiments['hrpt'].show_as_cif()\n</pre> project.experiments['hrpt'].show_as_cif() <pre>\nExperiment \ud83d\udd2c 'hrpt' as cif\n</pre> data_hrpt _expt_type.beam_mode  \"constant wavelength\" _expt_type.radiation_probe  neutron _expt_type.sample_form  powder _expt_type.scattering_type  bragg _instr.2theta_offset  0.6 _instr.wavelength  1.494 _peak.broad_gauss_u  0.1 _peak.broad_gauss_v  -0.1 _peak.broad_gauss_w  0.1 _peak.broad_lorentz_x  0 _peak.broad_lorentz_y  0.1 loop_ _pd_phase_block.id _pd_phase_block.scale lbco 10.0 loop_ _pd_background.line_segment_X _pd_background.line_segment_intensity 10 170 30 170 50 170 110 170 165 170 loop_ _pd_meas.2theta_scan _pd_meas.intensity_total _pd_meas.intensity_total_su 10.0 167.0 12.6 10.05 157.0 12.5 10.1 187.0 13.3 10.15 197.0 14.0 10.2 164.0 12.5 ... 164.65 173.0 30.1 164.7 187.0 27.9 164.75 175.0 38.2 164.8 168.0 30.9 164.85 109.0 41.2 In\u00a0[35]: Copied! <pre>project.save()\n</pre> project.save() <pre>\nSaving project \ud83d\udce6 'lbco_hrpt' to\n/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/lbco_hrpt\n\u2705 project.cif\n\u2705 sample_models/lbco.cif\n\u2705 experiments/hrpt.cif\n\u2705 analysis.cif\n\u2705 summary.cif\n</pre> In\u00a0[36]: Copied! <pre>project.analysis.show_supported_calculators()\n</pre> project.analysis.show_supported_calculators() <pre>\nSupported calculators\n</pre> Calculator Description cryspy CrysPy library for crystallographic calculations pdffit PDFfit2 library for pair distribution function calculations <p>Show current calculation engine.</p> In\u00a0[37]: Copied! <pre>project.analysis.show_current_calculator()\n</pre> project.analysis.show_current_calculator() <pre>\nCurrent calculator\ncryspy\n</pre> <p>Select the desired calculation engine.</p> In\u00a0[38]: Copied! <pre>project.analysis.current_calculator = 'cryspy'\n</pre> project.analysis.current_calculator = 'cryspy' <pre>\nCurrent calculator changed to\ncryspy\n</pre> In\u00a0[39]: Copied! <pre>project.plot_calc(expt_name='hrpt')\n</pre> project.plot_calc(expt_name='hrpt') In\u00a0[40]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[41]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True) In\u00a0[42]: Copied! <pre>project.analysis.show_all_params()\n</pre> project.analysis.show_all_params() <pre>\nAll parameters for all sample models (\ud83e\udde9 data blocks)\n</pre> datablock category entry parameter value fittable 1 lbco atom_sites La adp_type Biso False 2 lbco atom_sites La b_iso 0.5000 True 3 lbco atom_sites La fract_x 0.0000 True 4 lbco atom_sites La fract_y 0.0000 True 5 lbco atom_sites La fract_z 0.0000 True 6 lbco atom_sites La label La False 7 lbco atom_sites La occupancy 0.5000 True 8 lbco atom_sites La type_symbol La False 9 lbco atom_sites La wyckoff_letter a False 10 lbco atom_sites Ba adp_type Biso False 11 lbco atom_sites Ba b_iso 0.5000 True 12 lbco atom_sites Ba fract_x 0.0000 True 13 lbco atom_sites Ba fract_y 0.0000 True 14 lbco atom_sites Ba fract_z 0.0000 True 15 lbco atom_sites Ba label Ba False 16 lbco atom_sites Ba occupancy 0.5000 True 17 lbco atom_sites Ba type_symbol Ba False 18 lbco atom_sites Ba wyckoff_letter a False 19 lbco atom_sites Co adp_type Biso False 20 lbco atom_sites Co b_iso 0.5000 True 21 lbco atom_sites Co fract_x 0.5000 True 22 lbco atom_sites Co fract_y 0.5000 True 23 lbco atom_sites Co fract_z 0.5000 True 24 lbco atom_sites Co label Co False 25 lbco atom_sites Co occupancy 1.0000 True 26 lbco atom_sites Co type_symbol Co False 27 lbco atom_sites Co wyckoff_letter b False 28 lbco atom_sites O adp_type Biso False 29 lbco atom_sites O b_iso 0.5000 True 30 lbco atom_sites O fract_x 0.0000 True 31 lbco atom_sites O fract_y 0.5000 True 32 lbco atom_sites O fract_z 0.5000 True 33 lbco atom_sites O label O False 34 lbco atom_sites O occupancy 1.0000 True 35 lbco atom_sites O type_symbol O False 36 lbco atom_sites O wyckoff_letter c False 37 lbco cell angle_alpha 90.0000 True 38 lbco cell angle_beta 90.0000 True 39 lbco cell angle_gamma 90.0000 True 40 lbco cell length_a 3.8800 True 41 lbco cell length_b 3.8800 True 42 lbco cell length_c 3.8800 True 43 lbco space_group it_coordinate_system_code 1 False 44 lbco space_group name_h_m P m -3 m False <pre>\nAll parameters for all experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value fittable 1 hrpt background 10 x 10 False 2 hrpt background 10 y 170.0000 True 3 hrpt background 30 x 30 False 4 hrpt background 30 y 170.0000 True 5 hrpt background 50 x 50 False 6 hrpt background 50 y 170.0000 True 7 hrpt background 110 x 110 False 8 hrpt background 110 y 170.0000 True 9 hrpt background 165 x 165 False 10 hrpt background 165 y 170.0000 True 11 hrpt instrument twotheta_offset 0.6000 True 12 hrpt instrument wavelength 1.4940 True 13 hrpt linked_phases lbco id lbco False 14 hrpt linked_phases lbco scale 10.0000 True 15 hrpt peak broad_gauss_u 0.1000 True 16 hrpt peak broad_gauss_v -0.1000 True 17 hrpt peak broad_gauss_w 0.1000 True 18 hrpt peak broad_lorentz_x 0.0000 True 19 hrpt peak broad_lorentz_y 0.1000 True 20 hrpt expt_type beam_mode constant wavelength False 21 hrpt expt_type radiation_probe neutron False 22 hrpt expt_type sample_form powder False 23 hrpt expt_type scattering_type bragg False <p>Show all fittable parameters.</p> In\u00a0[43]: Copied! <pre>project.analysis.show_fittable_params()\n</pre> project.analysis.show_fittable_params() <pre>\nFittable parameters for all sample models (\ud83e\udde9 data blocks)\n</pre> datablock category entry parameter value uncertainty units free 1 lbco atom_sites La b_iso 0.5000 \u00c5\u00b2 False 2 lbco atom_sites La fract_x 0.0000 False 3 lbco atom_sites La fract_y 0.0000 False 4 lbco atom_sites La fract_z 0.0000 False 5 lbco atom_sites La occupancy 0.5000 False 6 lbco atom_sites Ba b_iso 0.5000 \u00c5\u00b2 False 7 lbco atom_sites Ba fract_x 0.0000 False 8 lbco atom_sites Ba fract_y 0.0000 False 9 lbco atom_sites Ba fract_z 0.0000 False 10 lbco atom_sites Ba occupancy 0.5000 False 11 lbco atom_sites Co b_iso 0.5000 \u00c5\u00b2 False 12 lbco atom_sites Co fract_x 0.5000 False 13 lbco atom_sites Co fract_y 0.5000 False 14 lbco atom_sites Co fract_z 0.5000 False 15 lbco atom_sites Co occupancy 1.0000 False 16 lbco atom_sites O b_iso 0.5000 \u00c5\u00b2 False 17 lbco atom_sites O fract_x 0.0000 False 18 lbco atom_sites O fract_y 0.5000 False 19 lbco atom_sites O fract_z 0.5000 False 20 lbco atom_sites O occupancy 1.0000 False 21 lbco cell angle_alpha 90.0000 deg False 22 lbco cell angle_beta 90.0000 deg False 23 lbco cell angle_gamma 90.0000 deg False 24 lbco cell length_a 3.8800 \u00c5 False 25 lbco cell length_b 3.8800 \u00c5 False 26 lbco cell length_c 3.8800 \u00c5 False <pre>\nFittable parameters for all experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty units free 1 hrpt background 10 y 170.0000 False 2 hrpt background 30 y 170.0000 False 3 hrpt background 50 y 170.0000 False 4 hrpt background 110 y 170.0000 False 5 hrpt background 165 y 170.0000 False 6 hrpt instrument twotheta_offset 0.6000 deg False 7 hrpt instrument wavelength 1.4940 \u00c5 False 8 hrpt linked_phases lbco scale 10.0000 False 9 hrpt peak broad_gauss_u 0.1000 deg\u00b2 False 10 hrpt peak broad_gauss_v -0.1000 deg\u00b2 False 11 hrpt peak broad_gauss_w 0.1000 deg\u00b2 False 12 hrpt peak broad_lorentz_x 0.0000 deg False 13 hrpt peak broad_lorentz_y 0.1000 deg False <p>Show only free parameters.</p> In\u00a0[44]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\n\u26a0\ufe0f Warning\nNo free parameters found.\n</pre> <p>Show how to access parameters in the code.</p> In\u00a0[45]: Copied! <pre>project.analysis.how_to_access_parameters()\n</pre> project.analysis.how_to_access_parameters() <pre>\nHow to access parameters\n</pre> datablock category entry parameter How to Access in Python Code Unique Identifier for CIF Constraints 1 lbco atom_sites La adp_type project.sample_models['lbco'].atom_sites['La'].adp_type lbco.atom_site.La.ADP_type 2 lbco atom_sites La b_iso project.sample_models['lbco'].atom_sites['La'].b_iso lbco.atom_site.La.B_iso_or_equiv 3 lbco atom_sites La fract_x project.sample_models['lbco'].atom_sites['La'].fract_x lbco.atom_site.La.fract_x 4 lbco atom_sites La fract_y project.sample_models['lbco'].atom_sites['La'].fract_y lbco.atom_site.La.fract_y 5 lbco atom_sites La fract_z project.sample_models['lbco'].atom_sites['La'].fract_z lbco.atom_site.La.fract_z 6 lbco atom_sites La label project.sample_models['lbco'].atom_sites['La'].label lbco.atom_site.La.label 7 lbco atom_sites La occupancy project.sample_models['lbco'].atom_sites['La'].occupancy lbco.atom_site.La.occupancy 8 lbco atom_sites La type_symbol project.sample_models['lbco'].atom_sites['La'].type_symbol lbco.atom_site.La.type_symbol 9 lbco atom_sites La wyckoff_letter project.sample_models['lbco'].atom_sites['La'].wyckoff_letter lbco.atom_site.La.Wyckoff_letter 10 lbco atom_sites Ba adp_type project.sample_models['lbco'].atom_sites['Ba'].adp_type lbco.atom_site.Ba.ADP_type 11 lbco atom_sites Ba b_iso project.sample_models['lbco'].atom_sites['Ba'].b_iso lbco.atom_site.Ba.B_iso_or_equiv 12 lbco atom_sites Ba fract_x project.sample_models['lbco'].atom_sites['Ba'].fract_x lbco.atom_site.Ba.fract_x 13 lbco atom_sites Ba fract_y project.sample_models['lbco'].atom_sites['Ba'].fract_y lbco.atom_site.Ba.fract_y 14 lbco atom_sites Ba fract_z project.sample_models['lbco'].atom_sites['Ba'].fract_z lbco.atom_site.Ba.fract_z 15 lbco atom_sites Ba label project.sample_models['lbco'].atom_sites['Ba'].label lbco.atom_site.Ba.label 16 lbco atom_sites Ba occupancy project.sample_models['lbco'].atom_sites['Ba'].occupancy lbco.atom_site.Ba.occupancy 17 lbco atom_sites Ba type_symbol project.sample_models['lbco'].atom_sites['Ba'].type_symbol lbco.atom_site.Ba.type_symbol 18 lbco atom_sites Ba wyckoff_letter project.sample_models['lbco'].atom_sites['Ba'].wyckoff_letter lbco.atom_site.Ba.Wyckoff_letter 19 lbco atom_sites Co adp_type project.sample_models['lbco'].atom_sites['Co'].adp_type lbco.atom_site.Co.ADP_type 20 lbco atom_sites Co b_iso project.sample_models['lbco'].atom_sites['Co'].b_iso lbco.atom_site.Co.B_iso_or_equiv 21 lbco atom_sites Co fract_x project.sample_models['lbco'].atom_sites['Co'].fract_x lbco.atom_site.Co.fract_x 22 lbco atom_sites Co fract_y project.sample_models['lbco'].atom_sites['Co'].fract_y lbco.atom_site.Co.fract_y 23 lbco atom_sites Co fract_z project.sample_models['lbco'].atom_sites['Co'].fract_z lbco.atom_site.Co.fract_z 24 lbco atom_sites Co label project.sample_models['lbco'].atom_sites['Co'].label lbco.atom_site.Co.label 25 lbco atom_sites Co occupancy project.sample_models['lbco'].atom_sites['Co'].occupancy lbco.atom_site.Co.occupancy 26 lbco atom_sites Co type_symbol project.sample_models['lbco'].atom_sites['Co'].type_symbol lbco.atom_site.Co.type_symbol 27 lbco atom_sites Co wyckoff_letter project.sample_models['lbco'].atom_sites['Co'].wyckoff_letter lbco.atom_site.Co.Wyckoff_letter 28 lbco atom_sites O adp_type project.sample_models['lbco'].atom_sites['O'].adp_type lbco.atom_site.O.ADP_type 29 lbco atom_sites O b_iso project.sample_models['lbco'].atom_sites['O'].b_iso lbco.atom_site.O.B_iso_or_equiv 30 lbco atom_sites O fract_x project.sample_models['lbco'].atom_sites['O'].fract_x lbco.atom_site.O.fract_x 31 lbco atom_sites O fract_y project.sample_models['lbco'].atom_sites['O'].fract_y lbco.atom_site.O.fract_y 32 lbco atom_sites O fract_z project.sample_models['lbco'].atom_sites['O'].fract_z lbco.atom_site.O.fract_z 33 lbco atom_sites O label project.sample_models['lbco'].atom_sites['O'].label lbco.atom_site.O.label 34 lbco atom_sites O occupancy project.sample_models['lbco'].atom_sites['O'].occupancy lbco.atom_site.O.occupancy 35 lbco atom_sites O type_symbol project.sample_models['lbco'].atom_sites['O'].type_symbol lbco.atom_site.O.type_symbol 36 lbco atom_sites O wyckoff_letter project.sample_models['lbco'].atom_sites['O'].wyckoff_letter lbco.atom_site.O.Wyckoff_letter 37 lbco cell angle_alpha project.sample_models['lbco'].cell.angle_alpha lbco.cell.angle_alpha 38 lbco cell angle_beta project.sample_models['lbco'].cell.angle_beta lbco.cell.angle_beta 39 lbco cell angle_gamma project.sample_models['lbco'].cell.angle_gamma lbco.cell.angle_gamma 40 lbco cell length_a project.sample_models['lbco'].cell.length_a lbco.cell.length_a 41 lbco cell length_b project.sample_models['lbco'].cell.length_b lbco.cell.length_b 42 lbco cell length_c project.sample_models['lbco'].cell.length_c lbco.cell.length_c 43 lbco space_group it_coordinate_system_code project.sample_models['lbco'].space_group.it_coordinate_system_code lbco.space_group.IT_coordinate_system_code 44 lbco space_group name_h_m project.sample_models['lbco'].space_group.name_h_m lbco.space_group.name_H-M_alt 45 hrpt background 10 x project.experiments['hrpt'].background['10'].x hrpt.pd_background.10.line_segment_X 46 hrpt background 10 y project.experiments['hrpt'].background['10'].y hrpt.pd_background.10.line_segment_intensity 47 hrpt background 30 x project.experiments['hrpt'].background['30'].x hrpt.pd_background.30.line_segment_X 48 hrpt background 30 y project.experiments['hrpt'].background['30'].y hrpt.pd_background.30.line_segment_intensity 49 hrpt background 50 x project.experiments['hrpt'].background['50'].x hrpt.pd_background.50.line_segment_X 50 hrpt background 50 y project.experiments['hrpt'].background['50'].y hrpt.pd_background.50.line_segment_intensity 51 hrpt background 110 x project.experiments['hrpt'].background['110'].x hrpt.pd_background.110.line_segment_X 52 hrpt background 110 y project.experiments['hrpt'].background['110'].y hrpt.pd_background.110.line_segment_intensity 53 hrpt background 165 x project.experiments['hrpt'].background['165'].x hrpt.pd_background.165.line_segment_X 54 hrpt background 165 y project.experiments['hrpt'].background['165'].y hrpt.pd_background.165.line_segment_intensity 55 hrpt instrument twotheta_offset project.experiments['hrpt'].instrument.twotheta_offset hrpt.instr.2theta_offset 56 hrpt instrument wavelength project.experiments['hrpt'].instrument.wavelength hrpt.instr.wavelength 57 hrpt linked_phases lbco id project.experiments['hrpt'].linked_phases['lbco'].id hrpt.pd_phase_block.lbco.id 58 hrpt linked_phases lbco scale project.experiments['hrpt'].linked_phases['lbco'].scale hrpt.pd_phase_block.lbco.scale 59 hrpt peak broad_gauss_u project.experiments['hrpt'].peak.broad_gauss_u hrpt.peak.broad_gauss_u 60 hrpt peak broad_gauss_v project.experiments['hrpt'].peak.broad_gauss_v hrpt.peak.broad_gauss_v 61 hrpt peak broad_gauss_w project.experiments['hrpt'].peak.broad_gauss_w hrpt.peak.broad_gauss_w 62 hrpt peak broad_lorentz_x project.experiments['hrpt'].peak.broad_lorentz_x hrpt.peak.broad_lorentz_x 63 hrpt peak broad_lorentz_y project.experiments['hrpt'].peak.broad_lorentz_y hrpt.peak.broad_lorentz_y 64 hrpt expt_type beam_mode project.experiments['hrpt'].expt_type.beam_mode hrpt.expt_type.beam_mode 65 hrpt expt_type radiation_probe project.experiments['hrpt'].expt_type.radiation_probe hrpt.expt_type.radiation_probe 66 hrpt expt_type sample_form project.experiments['hrpt'].expt_type.sample_form hrpt.expt_type.sample_form 67 hrpt expt_type scattering_type project.experiments['hrpt'].expt_type.scattering_type hrpt.expt_type.scattering_type In\u00a0[46]: Copied! <pre>project.analysis.show_available_fit_modes()\n</pre> project.analysis.show_available_fit_modes() <pre>\nAvailable fit modes\n</pre> Strategy Description single Independent fitting of each experiment; no shared parameters joint Simultaneous fitting of all experiments; some parameters are shared <p>Show current fit mode.</p> In\u00a0[47]: Copied! <pre>project.analysis.show_current_fit_mode()\n</pre> project.analysis.show_current_fit_mode() <pre>\nCurrent fit mode\nsingle\n</pre> <p>Select desired fit mode.</p> In\u00a0[48]: Copied! <pre>project.analysis.fit_mode = 'single'\n</pre> project.analysis.fit_mode = 'single' <pre>\nCurrent fit mode changed to\nsingle\n</pre> In\u00a0[49]: Copied! <pre>project.analysis.show_available_minimizers()\n</pre> project.analysis.show_available_minimizers() <pre>\nSupported minimizers\n</pre> Minimizer Description lmfit LMFIT library using the default Levenberg-Marquardt least squares method lmfit (leastsq) LMFIT library with Levenberg-Marquardt least squares method lmfit (least_squares) LMFIT library with SciPy\u2019s trust region reflective algorithm dfols DFO-LS library for derivative-free least-squares optimization <p>Show current fitting engine.</p> In\u00a0[50]: Copied! <pre>project.analysis.show_current_minimizer()\n</pre> project.analysis.show_current_minimizer() <pre>\nCurrent minimizer\nlmfit (leastsq)\n</pre> <p>Select desired fitting engine.</p> In\u00a0[51]: Copied! <pre>project.analysis.current_minimizer = 'lmfit (leastsq)'\n</pre> project.analysis.current_minimizer = 'lmfit (leastsq)' <pre>\nCurrent minimizer changed to\nlmfit (leastsq)\n</pre> In\u00a0[52]: Copied! <pre>project.sample_models['lbco'].cell.length_a.free = True\n</pre> project.sample_models['lbco'].cell.length_a.free = True <p>Set experiment parameters to be refined.</p> In\u00a0[53]: Copied! <pre>project.experiments['hrpt'].linked_phases['lbco'].scale.free = True\nproject.experiments['hrpt'].instrument.calib_twotheta_offset.free = True\nproject.experiments['hrpt'].background['10'].y.free = True\nproject.experiments['hrpt'].background['30'].y.free = True\nproject.experiments['hrpt'].background['50'].y.free = True\nproject.experiments['hrpt'].background['110'].y.free = True\nproject.experiments['hrpt'].background['165'].y.free = True\n</pre> project.experiments['hrpt'].linked_phases['lbco'].scale.free = True project.experiments['hrpt'].instrument.calib_twotheta_offset.free = True project.experiments['hrpt'].background['10'].y.free = True project.experiments['hrpt'].background['30'].y.free = True project.experiments['hrpt'].background['50'].y.free = True project.experiments['hrpt'].background['110'].y.free = True project.experiments['hrpt'].background['165'].y.free = True <p>Show free parameters after selection.</p> In\u00a0[54]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 lbco cell length_a 3.8800 \u00c5 2 hrpt background 10 y 170.0000 3 hrpt background 30 y 170.0000 4 hrpt background 50 y 170.0000 5 hrpt background 110 y 170.0000 6 hrpt background 165 y 170.0000 7 hrpt instrument twotheta_offset 0.6000 deg 8 hrpt linked_phases lbco scale 10.0000 In\u00a0[55]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 164.59 12 33.43 79.7% \u2193 21 13.22 60.4% \u2193 30 5.78 56.3% \u2193 39 3.15 45.6% \u2193 77 3.14 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 3.14 at iteration 73\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 0.60 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 3.14\n\ud83d\udccf R-factor (Rf): 8.42%\n\ud83d\udccf R-factor squared (Rf\u00b2): 11.79%\n\ud83d\udccf Weighted R-factor (wR): 11.62%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco cell length_a 3.8800 3.8910 0.0001 \u00c5 0.28 % \u2191 2 hrpt background 10 y 170.0000 167.7066 2.1300 1.35 % \u2193 3 hrpt background 30 y 170.0000 166.0338 1.5404 2.33 % \u2193 4 hrpt background 50 y 170.0000 169.9495 1.1025 0.03 % \u2193 5 hrpt background 110 y 170.0000 170.0802 0.9788 0.05 % \u2191 6 hrpt background 165 y 170.0000 179.6656 1.3289 5.69 % \u2191 7 hrpt instrument twotheta_offset 0.6000 0.6243 0.0018 deg 4.05 % \u2191 8 hrpt linked_phases lbco scale 10.0000 7.3409 0.0350 26.59 % \u2193 In\u00a0[56]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[57]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True) In\u00a0[58]: Copied! <pre>project.save_as(dir_path='lbco_hrpt', temporary=True)\n</pre> project.save_as(dir_path='lbco_hrpt', temporary=True) <pre>\nSaving project \ud83d\udce6 'lbco_hrpt' to\n/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/lbco_hrpt\n\u2705 project.cif\n\u2705 sample_models/lbco.cif\n\u2705 experiments/hrpt.cif\n\u2705 analysis.cif\n\u2705 summary.cif\n</pre> In\u00a0[59]: Copied! <pre>project.experiments['hrpt'].peak.broad_gauss_u.free = True\nproject.experiments['hrpt'].peak.broad_gauss_v.free = True\nproject.experiments['hrpt'].peak.broad_gauss_w.free = True\nproject.experiments['hrpt'].peak.broad_lorentz_y.free = True\n</pre> project.experiments['hrpt'].peak.broad_gauss_u.free = True project.experiments['hrpt'].peak.broad_gauss_v.free = True project.experiments['hrpt'].peak.broad_gauss_w.free = True project.experiments['hrpt'].peak.broad_lorentz_y.free = True <p>Show free parameters after selection.</p> In\u00a0[60]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 lbco cell length_a 3.8910 0.0001 \u00c5 2 hrpt background 10 y 167.7066 2.1300 3 hrpt background 30 y 166.0338 1.5404 4 hrpt background 50 y 169.9495 1.1025 5 hrpt background 110 y 170.0802 0.9788 6 hrpt background 165 y 179.6656 1.3289 7 hrpt instrument twotheta_offset 0.6243 0.0018 deg 8 hrpt linked_phases lbco scale 7.3409 0.0350 9 hrpt peak broad_gauss_u 0.1000 deg\u00b2 10 hrpt peak broad_gauss_v -0.1000 deg\u00b2 11 hrpt peak broad_gauss_w 0.1000 deg\u00b2 12 hrpt peak broad_lorentz_y 0.1000 deg In\u00a0[61]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 3.14 16 2.85 9.1% \u2193 69 2.85 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 2.85 at iteration 68\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 0.58 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 2.85\n\ud83d\udccf R-factor (Rf): 8.30%\n\ud83d\udccf R-factor squared (Rf\u00b2): 11.85%\n\ud83d\udccf Weighted R-factor (wR): 11.91%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco cell length_a 3.8910 3.8909 0.0001 \u00c5 0.00 % \u2193 2 hrpt background 10 y 167.7066 167.5167 2.0311 0.11 % \u2193 3 hrpt background 30 y 166.0338 166.7627 1.4794 0.44 % \u2191 4 hrpt background 50 y 169.9495 170.8330 1.0808 0.52 % \u2191 5 hrpt background 110 y 170.0802 172.2546 0.9660 1.28 % \u2191 6 hrpt background 165 y 179.6656 180.6405 1.2737 0.54 % \u2191 7 hrpt instrument twotheta_offset 0.6243 0.6231 0.0017 deg 0.19 % \u2193 8 hrpt linked_phases lbco scale 7.3409 7.2120 0.0406 1.76 % \u2193 9 hrpt peak broad_gauss_u 0.1000 0.0803 0.0047 deg\u00b2 19.74 % \u2193 10 hrpt peak broad_gauss_v -0.1000 -0.1029 0.0104 deg\u00b2 2.93 % \u2191 11 hrpt peak broad_gauss_w 0.1000 0.1077 0.0051 deg\u00b2 7.66 % \u2191 12 hrpt peak broad_lorentz_y 0.1000 0.0893 0.0032 deg 10.67 % \u2193 In\u00a0[62]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[63]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True) In\u00a0[64]: Copied! <pre>project.save_as(dir_path='lbco_hrpt', temporary=True)\n</pre> project.save_as(dir_path='lbco_hrpt', temporary=True) <pre>\nSaving project \ud83d\udce6 'lbco_hrpt' to\n/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/lbco_hrpt\n\u2705 project.cif\n\u2705 sample_models/lbco.cif\n\u2705 experiments/hrpt.cif\n\u2705 analysis.cif\n\u2705 summary.cif\n</pre> In\u00a0[65]: Copied! <pre>project.sample_models['lbco'].atom_sites['La'].b_iso.free = True\nproject.sample_models['lbco'].atom_sites['Ba'].b_iso.free = True\nproject.sample_models['lbco'].atom_sites['Co'].b_iso.free = True\nproject.sample_models['lbco'].atom_sites['O'].b_iso.free = True\n</pre> project.sample_models['lbco'].atom_sites['La'].b_iso.free = True project.sample_models['lbco'].atom_sites['Ba'].b_iso.free = True project.sample_models['lbco'].atom_sites['Co'].b_iso.free = True project.sample_models['lbco'].atom_sites['O'].b_iso.free = True <p>Show free parameters after selection.</p> In\u00a0[66]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 lbco atom_sites La b_iso 0.5000 \u00c5\u00b2 2 lbco atom_sites Ba b_iso 0.5000 \u00c5\u00b2 3 lbco atom_sites Co b_iso 0.5000 \u00c5\u00b2 4 lbco atom_sites O b_iso 0.5000 \u00c5\u00b2 5 lbco cell length_a 3.8909 0.0001 \u00c5 6 hrpt background 10 y 167.5167 2.0311 7 hrpt background 30 y 166.7627 1.4794 8 hrpt background 50 y 170.8330 1.0808 9 hrpt background 110 y 172.2546 0.9660 10 hrpt background 165 y 180.6405 1.2737 11 hrpt instrument twotheta_offset 0.6231 0.0017 deg 12 hrpt linked_phases lbco scale 7.2120 0.0406 13 hrpt peak broad_gauss_u 0.0803 0.0047 deg\u00b2 14 hrpt peak broad_gauss_v -0.1029 0.0104 deg\u00b2 15 hrpt peak broad_gauss_w 0.1077 0.0051 deg\u00b2 16 hrpt peak broad_lorentz_y 0.0893 0.0032 deg In\u00a0[67]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 2.85 28 2.28 19.9% \u2193 45 1.62 28.9% \u2193 62 1.47 9.6% \u2193 79 1.36 7.0% \u2193 97 1.29 5.4% \u2193 204 1.29 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 1.29 at iteration 186\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 1.70 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 1.29\n\ud83d\udccf R-factor (Rf): 5.63%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.27%\n\ud83d\udccf Weighted R-factor (wR): 4.41%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco atom_sites La b_iso 0.5000 0.5051 1216.0297 \u00c5\u00b2 1.02 % \u2191 2 lbco atom_sites Ba b_iso 0.5000 0.5048 1976.1470 \u00c5\u00b2 0.96 % \u2191 3 lbco atom_sites Co b_iso 0.5000 0.2371 0.0612 \u00c5\u00b2 52.59 % \u2193 4 lbco atom_sites O b_iso 0.5000 1.3935 0.0167 \u00c5\u00b2 178.71 % \u2191 5 lbco cell length_a 3.8909 3.8909 0.0000 \u00c5 0.00 % \u2193 6 hrpt background 10 y 167.5167 168.5585 1.3671 0.62 % \u2191 7 hrpt background 30 y 166.7627 164.3357 0.9992 1.46 % \u2193 8 hrpt background 50 y 170.8330 166.8881 0.7388 2.31 % \u2193 9 hrpt background 110 y 172.2546 175.4004 0.6571 1.83 % \u2191 10 hrpt background 165 y 180.6405 174.2811 0.9113 3.52 % \u2193 11 hrpt instrument twotheta_offset 0.6231 0.6226 0.0010 deg 0.09 % \u2193 12 hrpt linked_phases lbco scale 7.2120 9.1350 0.0641 26.66 % \u2191 13 hrpt peak broad_gauss_u 0.0803 0.0816 0.0031 deg\u00b2 1.63 % \u2191 14 hrpt peak broad_gauss_v -0.1029 -0.1159 0.0067 deg\u00b2 12.62 % \u2191 15 hrpt peak broad_gauss_w 0.1077 0.1204 0.0033 deg\u00b2 11.88 % \u2191 16 hrpt peak broad_lorentz_y 0.0893 0.0844 0.0021 deg 5.47 % \u2193 In\u00a0[68]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[69]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True) In\u00a0[70]: Copied! <pre>project.save_as(dir_path='lbco_hrpt', temporary=True)\n</pre> project.save_as(dir_path='lbco_hrpt', temporary=True) <pre>\nSaving project \ud83d\udce6 'lbco_hrpt' to\n/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/lbco_hrpt\n\u2705 project.cif\n\u2705 sample_models/lbco.cif\n\u2705 experiments/hrpt.cif\n\u2705 analysis.cif\n\u2705 summary.cif\n</pre> In\u00a0[71]: Copied! <pre>project.analysis.aliases.add(label='biso_La', param_uid=project.sample_models['lbco'].atom_sites['La'].b_iso.uid)\nproject.analysis.aliases.add(label='biso_Ba', param_uid=project.sample_models['lbco'].atom_sites['Ba'].b_iso.uid)\n</pre> project.analysis.aliases.add(label='biso_La', param_uid=project.sample_models['lbco'].atom_sites['La'].b_iso.uid) project.analysis.aliases.add(label='biso_Ba', param_uid=project.sample_models['lbco'].atom_sites['Ba'].b_iso.uid) <p>Set constraints.</p> In\u00a0[72]: Copied! <pre>project.analysis.constraints.add(lhs_alias='biso_Ba', rhs_expr='biso_La')\n</pre> project.analysis.constraints.add(lhs_alias='biso_Ba', rhs_expr='biso_La') <p>Show defined constraints.</p> In\u00a0[73]: Copied! <pre>project.analysis.show_constraints()\n</pre> project.analysis.show_constraints() <pre>\nUser defined constraints\n</pre> lhs_alias rhs_expr full expression biso_Ba biso_La biso_Ba = biso_La <p>Show free parameters before applying constraints.</p> In\u00a0[74]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 lbco atom_sites La b_iso 0.5051 1216.0297 \u00c5\u00b2 2 lbco atom_sites Ba b_iso 0.5048 1976.1470 \u00c5\u00b2 3 lbco atom_sites Co b_iso 0.2371 0.0612 \u00c5\u00b2 4 lbco atom_sites O b_iso 1.3935 0.0167 \u00c5\u00b2 5 lbco cell length_a 3.8909 0.0000 \u00c5 6 hrpt background 10 y 168.5585 1.3671 7 hrpt background 30 y 164.3357 0.9992 8 hrpt background 50 y 166.8881 0.7388 9 hrpt background 110 y 175.4004 0.6571 10 hrpt background 165 y 174.2811 0.9113 11 hrpt instrument twotheta_offset 0.6226 0.0010 deg 12 hrpt linked_phases lbco scale 9.1350 0.0641 13 hrpt peak broad_gauss_u 0.0816 0.0031 deg\u00b2 14 hrpt peak broad_gauss_v -0.1159 0.0067 deg\u00b2 15 hrpt peak broad_gauss_w 0.1204 0.0033 deg\u00b2 16 hrpt peak broad_lorentz_y 0.0844 0.0021 deg <p>Apply constraints.</p> In\u00a0[75]: Copied! <pre>project.analysis.apply_constraints()\n</pre> project.analysis.apply_constraints() <p>Show free parameters after applying constraints.</p> In\u00a0[76]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 lbco atom_sites La b_iso 0.5051 1216.0297 \u00c5\u00b2 2 lbco atom_sites Co b_iso 0.2371 0.0612 \u00c5\u00b2 3 lbco atom_sites O b_iso 1.3935 0.0167 \u00c5\u00b2 4 lbco cell length_a 3.8909 0.0000 \u00c5 5 hrpt background 10 y 168.5585 1.3671 6 hrpt background 30 y 164.3357 0.9992 7 hrpt background 50 y 166.8881 0.7388 8 hrpt background 110 y 175.4004 0.6571 9 hrpt background 165 y 174.2811 0.9113 10 hrpt instrument twotheta_offset 0.6226 0.0010 deg 11 hrpt linked_phases lbco scale 9.1350 0.0641 12 hrpt peak broad_gauss_u 0.0816 0.0031 deg\u00b2 13 hrpt peak broad_gauss_v -0.1159 0.0067 deg\u00b2 14 hrpt peak broad_gauss_w 0.1204 0.0033 deg\u00b2 15 hrpt peak broad_lorentz_y 0.0844 0.0021 deg In\u00a0[77]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 1.29 20 1.29 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 1.29 at iteration 19\n\u2705 Fitting complete.\n</pre> <pre>\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 0.19 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 1.29\n\ud83d\udccf R-factor (Rf): 5.63%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.27%\n\ud83d\udccf Weighted R-factor (wR): 4.41%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco atom_sites La b_iso 0.5051 0.5051 0.0278 \u00c5\u00b2 0.00 % \u2193 2 lbco atom_sites Co b_iso 0.2371 0.2370 0.0564 \u00c5\u00b2 0.03 % \u2193 3 lbco atom_sites O b_iso 1.3935 1.3935 0.0160 \u00c5\u00b2 0.00 % \u2191 4 lbco cell length_a 3.8909 3.8909 0.0000 \u00c5 0.00 % \u2191 5 hrpt background 10 y 168.5585 168.5585 1.3669 0.00 % \u2193 6 hrpt background 30 y 164.3357 164.3357 0.9990 0.00 % \u2193 7 hrpt background 50 y 166.8881 166.8881 0.7386 0.00 % \u2193 8 hrpt background 110 y 175.4004 175.4006 0.6488 0.00 % \u2191 9 hrpt background 165 y 174.2811 174.2812 0.8944 0.00 % \u2191 10 hrpt instrument twotheta_offset 0.6226 0.6226 0.0010 deg 0.00 % \u2191 11 hrpt linked_phases lbco scale 9.1350 9.1351 0.0538 0.00 % \u2191 12 hrpt peak broad_gauss_u 0.0816 0.0816 0.0031 deg\u00b2 0.00 % \u2191 13 hrpt peak broad_gauss_v -0.1159 -0.1159 0.0066 deg\u00b2 0.00 % \u2191 14 hrpt peak broad_gauss_w 0.1204 0.1204 0.0032 deg\u00b2 0.00 % \u2191 15 hrpt peak broad_lorentz_y 0.0844 0.0844 0.0021 deg 0.00 % \u2193 In\u00a0[78]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[79]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True) In\u00a0[80]: Copied! <pre>project.save_as(dir_path='lbco_hrpt', temporary=True)\n</pre> project.save_as(dir_path='lbco_hrpt', temporary=True) <pre>\nSaving project \ud83d\udce6 'lbco_hrpt' to\n/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/lbco_hrpt\n\u2705 project.cif\n\u2705 sample_models/lbco.cif\n\u2705 experiments/hrpt.cif\n\u2705 analysis.cif\n\u2705 summary.cif\n</pre> In\u00a0[81]: Copied! <pre>project.analysis.aliases.add(\n    label='occ_La',\n    param_uid=project.sample_models['lbco'].atom_sites['La'].occupancy.uid,\n)\nproject.analysis.aliases.add(\n    label='occ_Ba',\n    param_uid=project.sample_models['lbco'].atom_sites['Ba'].occupancy.uid,\n)\n</pre> project.analysis.aliases.add(     label='occ_La',     param_uid=project.sample_models['lbco'].atom_sites['La'].occupancy.uid, ) project.analysis.aliases.add(     label='occ_Ba',     param_uid=project.sample_models['lbco'].atom_sites['Ba'].occupancy.uid, ) <p>Set more constraints.</p> In\u00a0[82]: Copied! <pre>project.analysis.constraints.add(\n    lhs_alias='occ_Ba',\n    rhs_expr='1 - occ_La',\n)\n</pre> project.analysis.constraints.add(     lhs_alias='occ_Ba',     rhs_expr='1 - occ_La', ) <p>Show defined constraints.</p> In\u00a0[83]: Copied! <pre>project.analysis.show_constraints()\n</pre> project.analysis.show_constraints() <pre>\nUser defined constraints\n</pre> lhs_alias rhs_expr full expression biso_Ba biso_La biso_Ba = biso_La occ_Ba 1 - occ_La occ_Ba = 1 - occ_La <p>Apply constraints.</p> In\u00a0[84]: Copied! <pre>project.analysis.apply_constraints()\n</pre> project.analysis.apply_constraints() <p>Set sample model parameters to be refined.</p> In\u00a0[85]: Copied! <pre>project.sample_models['lbco'].atom_sites['La'].occupancy.free = True\n</pre> project.sample_models['lbco'].atom_sites['La'].occupancy.free = True <p>Show free parameters after selection.</p> In\u00a0[86]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 lbco atom_sites La b_iso 0.5051 0.0278 \u00c5\u00b2 2 lbco atom_sites La occupancy 0.5000 3 lbco atom_sites Co b_iso 0.2370 0.0564 \u00c5\u00b2 4 lbco atom_sites O b_iso 1.3935 0.0160 \u00c5\u00b2 5 lbco cell length_a 3.8909 0.0000 \u00c5 6 hrpt background 10 y 168.5585 1.3669 7 hrpt background 30 y 164.3357 0.9990 8 hrpt background 50 y 166.8881 0.7386 9 hrpt background 110 y 175.4006 0.6488 10 hrpt background 165 y 174.2812 0.8944 11 hrpt instrument twotheta_offset 0.6226 0.0010 deg 12 hrpt linked_phases lbco scale 9.1351 0.0538 13 hrpt peak broad_gauss_u 0.0816 0.0031 deg\u00b2 14 hrpt peak broad_gauss_v -0.1159 0.0066 deg\u00b2 15 hrpt peak broad_gauss_w 0.1204 0.0032 deg\u00b2 16 hrpt peak broad_lorentz_y 0.0844 0.0021 deg In\u00a0[87]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 1.29 55 1.28 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 1.28 at iteration 54\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 0.43 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 1.28\n\ud83d\udccf R-factor (Rf): 5.61%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.25%\n\ud83d\udccf Weighted R-factor (wR): 4.39%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco atom_sites La b_iso 0.5051 0.5983 0.0355 \u00c5\u00b2 18.46 % \u2191 2 lbco atom_sites La occupancy 0.5000 0.5840 0.0203 16.81 % \u2191 3 lbco atom_sites Co b_iso 0.2370 0.1665 0.0580 \u00c5\u00b2 29.74 % \u2193 4 lbco atom_sites O b_iso 1.3935 1.3491 0.0192 \u00c5\u00b2 3.19 % \u2193 5 lbco cell length_a 3.8909 3.8909 0.0000 \u00c5 0.00 % \u2191 6 hrpt background 10 y 168.5585 168.9780 1.3666 0.25 % \u2191 7 hrpt background 30 y 164.3357 164.0535 0.9992 0.17 % \u2193 8 hrpt background 50 y 166.8881 166.9125 0.7364 0.01 % \u2191 9 hrpt background 110 y 175.4006 175.2699 0.6479 0.07 % \u2193 10 hrpt background 165 y 174.2812 174.5580 0.8935 0.16 % \u2191 11 hrpt instrument twotheta_offset 0.6226 0.6226 0.0010 deg 0.00 % \u2191 12 hrpt linked_phases lbco scale 9.1351 8.9057 0.0761 2.51 % \u2193 13 hrpt peak broad_gauss_u 0.0816 0.0812 0.0031 deg\u00b2 0.43 % \u2193 14 hrpt peak broad_gauss_v -0.1159 -0.1154 0.0066 deg\u00b2 0.48 % \u2193 15 hrpt peak broad_gauss_w 0.1204 0.1203 0.0032 deg\u00b2 0.14 % \u2193 16 hrpt peak broad_lorentz_y 0.0844 0.0846 0.0021 deg 0.18 % \u2191 In\u00a0[88]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[89]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=38, x_max=41, show_residual=True) In\u00a0[90]: Copied! <pre>project.save_as(dir_path='lbco_hrpt', temporary=True)\n</pre> project.save_as(dir_path='lbco_hrpt', temporary=True) <pre>\nSaving project \ud83d\udce6 'lbco_hrpt' to\n/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/lbco_hrpt\n\u2705 project.cif\n\u2705 sample_models/lbco.cif\n\u2705 experiments/hrpt.cif\n\u2705 analysis.cif\n\u2705 summary.cif\n</pre> In\u00a0[91]: Copied! <pre>project.summary.show_report()\n</pre> project.summary.show_report() <pre>\n*** PROJECT INFO ***\n\nTitle\nLa0.5Ba0.5CoO3 at HRPT@PSI\n\nDescription\nThis project demonstrates a standard refinement of\nLa0.5Ba0.5CoO3, which crystallizes in a perovskite-type\nstructure, using neutron powder diffraction data collected\nin constant wavelength mode at the HRPT diffractometer\n(PSI).\n\n*** CRYSTALLOGRAPHIC DATA ***\n\nPhase datablock\n\ud83e\udde9 lbco\n\nSpace group\nP m -3 m\n\nCell parameters\n</pre> alpha 90.00000 beta 90.00000 gamma 90.00000 a 3.89087 b 3.89087 c 3.89087 <pre>\nAtom sites\n</pre> Label Type fract_x fract_y fract_z Occupancy B_iso La La 0.00000 0.00000 0.00000 0.58403 0.59832 Ba Ba 0.00000 0.00000 0.00000 0.41597 0.59832 Co Co 0.50000 0.50000 0.50000 1.00000 0.16651 O O 0.00000 0.50000 0.50000 1.00000 1.34914 <pre>\n*** EXPERIMENTS ***\n\nExperiment datablock\n\ud83d\udd2c hrpt\n\nExperiment type\npowder, neutron, constant wavelength\n\nWavelength\n1.49400\n\n2\u03b8 offset\n0.62261\n\nProfile type\npseudo-voigt\n\nPeak broadening (Gaussian)\n</pre> U 0.08122 V -0.11537 W 0.12028 <pre>\nPeak broadening (Lorentzian)\n</pre> X 0.00000 Y 0.08460 <pre>\n*** FITTING ***\n\nCalculation engine\ncryspy\n\nMinimization engine\nlmfit (leastsq)\n\nFit quality\n</pre> Goodness-of-fit (reduced \u03c7\u00b2) 1.28"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#structure-refinement-lbco-hrpt","title":"Structure Refinement: LBCO, HRPT\u00b6","text":"<p>This example demonstrates how to use the EasyDiffraction API in a simplified, user-friendly manner that closely follows the GUI workflow for a Rietveld refinement of La0.5Ba0.5CoO3 crystal structure using constant wavelength neutron powder diffraction data from HRPT at PSI.</p> <p>It is intended for users with minimal programming experience who want to learn how to perform standard crystal structure fitting using diffraction data. This script covers creating a project, adding sample models and experiments, performing analysis, and refining parameters.</p> <p>Only a single import of <code>easydiffraction</code> is required, and all operations are performed through high-level components of the <code>project</code> object, such as <code>project.sample_models</code>, <code>project.experiments</code>, and <code>project.analysis</code>. The <code>project</code> object is the main container for all information.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#step-1-create-a-project","title":"Step 1: Create a Project\u00b6","text":"<p>This section explains how to create a project and define its metadata.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-project-metadata","title":"Set Project Metadata\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-project-metadata-as-cif","title":"Show Project Metadata as CIF\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#save-project","title":"Save Project\u00b6","text":"<p>When saving the project for the first time, you need to specify the directory path. In the example below, the project is saved to a temporary location defined by the system.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-up-data-plotter","title":"Set Up Data Plotter\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#step-2-define-sample-model","title":"Step 2: Define Sample Model\u00b6","text":"<p>This section shows how to add sample models and modify their parameters.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-defined-sample-models","title":"Show Defined Sample Models\u00b6","text":"<p>Show the names of the models added. These names are used to access the model using the syntax: <code>project.sample_models['model_name']</code>. All model parameters can be accessed via the <code>project</code> object.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-space-group","title":"Set Space Group\u00b6","text":"<p>Modify the default space group parameters.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-unit-cell","title":"Set Unit Cell\u00b6","text":"<p>Modify the default unit cell parameters.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-atom-sites","title":"Set Atom Sites\u00b6","text":"<p>Add atom sites to the sample model.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#apply-symmetry-constraints","title":"Apply Symmetry Constraints\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-sample-model-as-cif","title":"Show Sample Model as CIF\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-sample-model-structure","title":"Show Sample Model Structure\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#save-project-state","title":"Save Project State\u00b6","text":"<p>Save the project state after adding the sample model. This ensures that all changes are stored and can be accessed later. The project state is saved in the directory specified during project creation.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#step-3-define-experiment","title":"Step 3: Define Experiment\u00b6","text":"<p>This section shows how to add experiments, configure their parameters, and link the sample models defined in the previous step.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#download-measured-data","title":"Download Measured Data\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#add-diffraction-experiment","title":"Add Diffraction Experiment\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-defined-experiments","title":"Show Defined Experiments\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-measured-data","title":"Show Measured Data\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-instrument","title":"Set Instrument\u00b6","text":"<p>Modify the default instrument parameters.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-peak-profile","title":"Set Peak Profile\u00b6","text":"<p>Show supported peak profile types.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-background","title":"Set Background\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-linked-phases","title":"Set Linked Phases\u00b6","text":"<p>Link the sample model defined in the previous step to the experiment.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-experiment-as-cif","title":"Show Experiment as CIF\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#save-project-state","title":"Save Project State\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#step-4-perform-analysis","title":"Step 4: Perform Analysis\u00b6","text":"<p>This section explains the analysis process, including how to set up calculation and fitting engines.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-calculator","title":"Set Calculator\u00b6","text":"<p>Show supported calculation engines.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-calculated-data","title":"Show Calculated Data\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-parameters","title":"Show Parameters\u00b6","text":"<p>Show all parameters of the project.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-fit-mode","title":"Set Fit Mode\u00b6","text":"<p>Show supported fit modes.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-minimizer","title":"Set Minimizer\u00b6","text":"<p>Show supported fitting engines.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#perform-fit-15","title":"Perform Fit 1/5\u00b6","text":"<p>Set sample model parameters to be refined.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#save-project-state","title":"Save Project State\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#perform-fit-25","title":"Perform Fit 2/5\u00b6","text":"<p>Set more parameters to be refined.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#save-project-state","title":"Save Project State\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#perform-fit-35","title":"Perform Fit 3/5\u00b6","text":"<p>Set more parameters to be refined.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#save-project-state","title":"Save Project State\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#perform-fit-45","title":"Perform Fit 4/5\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-constraints","title":"Set Constraints\u00b6","text":"<p>Set aliases for parameters.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#save-project-state","title":"Save Project State\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#perform-fit-55","title":"Perform Fit 5/5\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#set-constraints","title":"Set Constraints\u00b6","text":"<p>Set more aliases for parameters.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#save-project-state","title":"Save Project State\u00b6","text":""},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#step-5-summary","title":"Step 5: Summary\u00b6","text":"<p>This final section shows how to review the results of the analysis.</p>"},{"location":"tutorials/basic_single-fit_pd-neut-cwl_LBCO-HRPT/#show-project-summary","title":"Show Project Summary\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/","title":"Co2SiO4 pd-neut-cwl","text":"In\u00a0[2]: Copied! <pre>from easydiffraction import Experiment\nfrom easydiffraction import Project\nfrom easydiffraction import SampleModel\nfrom easydiffraction import download_from_repository\n</pre> from easydiffraction import Experiment from easydiffraction import Project from easydiffraction import SampleModel from easydiffraction import download_from_repository <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>model = SampleModel('cosio')\n</pre> model = SampleModel('cosio') In\u00a0[4]: Copied! <pre>model.space_group.name_h_m = 'P n m a'\nmodel.space_group.it_coordinate_system_code = 'abc'\n</pre> model.space_group.name_h_m = 'P n m a' model.space_group.it_coordinate_system_code = 'abc' In\u00a0[5]: Copied! <pre>model.cell.length_a = 10.3\nmodel.cell.length_b = 6.0\nmodel.cell.length_c = 4.8\n</pre> model.cell.length_a = 10.3 model.cell.length_b = 6.0 model.cell.length_c = 4.8 In\u00a0[6]: Copied! <pre>model.atom_sites.add('Co1', 'Co', 0, 0, 0, wyckoff_letter='a', b_iso=0.5)\nmodel.atom_sites.add('Co2', 'Co', 0.279, 0.25, 0.985, wyckoff_letter='c', b_iso=0.5)\nmodel.atom_sites.add('Si', 'Si', 0.094, 0.25, 0.429, wyckoff_letter='c', b_iso=0.5)\nmodel.atom_sites.add('O1', 'O', 0.091, 0.25, 0.771, wyckoff_letter='c', b_iso=0.5)\nmodel.atom_sites.add('O2', 'O', 0.448, 0.25, 0.217, wyckoff_letter='c', b_iso=0.5)\nmodel.atom_sites.add('O3', 'O', 0.164, 0.032, 0.28, wyckoff_letter='d', b_iso=0.5)\n</pre> model.atom_sites.add('Co1', 'Co', 0, 0, 0, wyckoff_letter='a', b_iso=0.5) model.atom_sites.add('Co2', 'Co', 0.279, 0.25, 0.985, wyckoff_letter='c', b_iso=0.5) model.atom_sites.add('Si', 'Si', 0.094, 0.25, 0.429, wyckoff_letter='c', b_iso=0.5) model.atom_sites.add('O1', 'O', 0.091, 0.25, 0.771, wyckoff_letter='c', b_iso=0.5) model.atom_sites.add('O2', 'O', 0.448, 0.25, 0.217, wyckoff_letter='c', b_iso=0.5) model.atom_sites.add('O3', 'O', 0.164, 0.032, 0.28, wyckoff_letter='d', b_iso=0.5) In\u00a0[7]: Copied! <pre>model.show_as_cif()\n</pre> model.show_as_cif() <pre>\nSample model \ud83e\udde9 'cosio' as cif\n</pre> data_cosio _space_group.IT_coordinate_system_code  abc _space_group.name_H-M_alt  \"P n m a\" _cell.angle_alpha  90.0 _cell.angle_beta  90.0 _cell.angle_gamma  90.0 _cell.length_a  10.3 _cell.length_b  6.0 _cell.length_c  4.8 loop_ _atom_site.ADP_type _atom_site.B_iso_or_equiv _atom_site.fract_x _atom_site.fract_y _atom_site.fract_z _atom_site.label _atom_site.occupancy _atom_site.type_symbol _atom_site.Wyckoff_letter Biso 0.5 0 0 0 Co1 1.0 Co a Biso 0.5 0.279 0.25 0.985 Co2 1.0 Co c Biso 0.5 0.094 0.25 0.429 Si 1.0 Si c Biso 0.5 0.091 0.25 0.771 O1 1.0 O c Biso 0.5 0.448 0.25 0.217 O2 1.0 O c Biso 0.5 0.164 0.032 0.28 O3 1.0 O d <p>Apply symmetry constraints.</p> In\u00a0[8]: Copied! <pre>model.apply_symmetry_constraints()\n</pre> model.apply_symmetry_constraints() <p>Show CIF output after applying symmetry constraints.</p> In\u00a0[9]: Copied! <pre>model.show_as_cif()\n</pre> model.show_as_cif() <pre>\nSample model \ud83e\udde9 'cosio' as cif\n</pre> data_cosio _space_group.IT_coordinate_system_code  abc _space_group.name_H-M_alt  \"P n m a\" _cell.angle_alpha  90 _cell.angle_beta  90 _cell.angle_gamma  90 _cell.length_a  10.3 _cell.length_b  6.0 _cell.length_c  4.8 loop_ _atom_site.ADP_type _atom_site.B_iso_or_equiv _atom_site.fract_x _atom_site.fract_y _atom_site.fract_z _atom_site.label _atom_site.occupancy _atom_site.type_symbol _atom_site.Wyckoff_letter Biso 0.5 0.0 0.0 0.0 Co1 1.0 Co a Biso 0.5 0.279 0.25 0.985 Co2 1.0 Co c Biso 0.5 0.094 0.25 0.429 Si 1.0 Si c Biso 0.5 0.091 0.25 0.771 O1 1.0 O c Biso 0.5 0.448 0.25 0.217 O2 1.0 O c Biso 0.5 0.164 0.032 0.28 O3 1.0 O d In\u00a0[10]: Copied! <pre>download_from_repository('co2sio4_d20.xye', destination='data')\n</pre> download_from_repository('co2sio4_d20.xye', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/co2sio4_d20.xye' already exists and will not be overwritten.\n</pre> In\u00a0[11]: Copied! <pre>expt = Experiment('d20', data_path='data/co2sio4_d20.xye')\n</pre> expt = Experiment('d20', data_path='data/co2sio4_d20.xye') <pre>\nData loaded successfully\nExperiment \ud83d\udd2c 'd20'. Number of data points: 1418\n</pre> In\u00a0[12]: Copied! <pre>expt.instrument.setup_wavelength = 1.87\nexpt.instrument.calib_twotheta_offset = 0.1\n</pre> expt.instrument.setup_wavelength = 1.87 expt.instrument.calib_twotheta_offset = 0.1 In\u00a0[13]: Copied! <pre>expt.peak.broad_gauss_u = 0.3\nexpt.peak.broad_gauss_v = -0.5\nexpt.peak.broad_gauss_w = 0.4\n</pre> expt.peak.broad_gauss_u = 0.3 expt.peak.broad_gauss_v = -0.5 expt.peak.broad_gauss_w = 0.4 In\u00a0[14]: Copied! <pre>expt.background.add(x=8, y=500)\nexpt.background.add(x=9, y=500)\nexpt.background.add(x=10, y=500)\nexpt.background.add(x=11, y=500)\nexpt.background.add(x=12, y=500)\nexpt.background.add(x=15, y=500)\nexpt.background.add(x=25, y=500)\nexpt.background.add(x=30, y=500)\nexpt.background.add(x=50, y=500)\nexpt.background.add(x=70, y=500)\nexpt.background.add(x=90, y=500)\nexpt.background.add(x=110, y=500)\nexpt.background.add(x=130, y=500)\nexpt.background.add(x=150, y=500)\n</pre> expt.background.add(x=8, y=500) expt.background.add(x=9, y=500) expt.background.add(x=10, y=500) expt.background.add(x=11, y=500) expt.background.add(x=12, y=500) expt.background.add(x=15, y=500) expt.background.add(x=25, y=500) expt.background.add(x=30, y=500) expt.background.add(x=50, y=500) expt.background.add(x=70, y=500) expt.background.add(x=90, y=500) expt.background.add(x=110, y=500) expt.background.add(x=130, y=500) expt.background.add(x=150, y=500) In\u00a0[15]: Copied! <pre>expt.linked_phases.add('cosio', scale=1.0)\n</pre> expt.linked_phases.add('cosio', scale=1.0) In\u00a0[16]: Copied! <pre>project = Project()\n</pre> project = Project() In\u00a0[17]: Copied! <pre>project.plotter.engine = 'plotly'\n</pre> project.plotter.engine = 'plotly' <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[18]: Copied! <pre>project.sample_models.add(model)\n</pre> project.sample_models.add(model) In\u00a0[19]: Copied! <pre>project.experiments.add(expt)\n</pre> project.experiments.add(expt) In\u00a0[20]: Copied! <pre>project.analysis.current_calculator = 'cryspy'\n</pre> project.analysis.current_calculator = 'cryspy' <pre>\nCurrent calculator changed to\ncryspy\n</pre> In\u00a0[21]: Copied! <pre>project.analysis.current_minimizer = 'lmfit (leastsq)'\n</pre> project.analysis.current_minimizer = 'lmfit (leastsq)' <pre>\nCurrent minimizer changed to\nlmfit (leastsq)\n</pre> In\u00a0[22]: Copied! <pre>project.plot_meas_vs_calc(expt_name='d20', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='d20', show_residual=True) In\u00a0[23]: Copied! <pre>project.plot_meas_vs_calc(expt_name='d20', x_min=41, x_max=54, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='d20', x_min=41, x_max=54, show_residual=True) In\u00a0[24]: Copied! <pre>model.cell.length_a.free = True\nmodel.cell.length_b.free = True\nmodel.cell.length_c.free = True\n\nmodel.atom_sites['Co2'].fract_x.free = True\nmodel.atom_sites['Co2'].fract_z.free = True\nmodel.atom_sites['Si'].fract_x.free = True\nmodel.atom_sites['Si'].fract_z.free = True\nmodel.atom_sites['O1'].fract_x.free = True\nmodel.atom_sites['O1'].fract_z.free = True\nmodel.atom_sites['O2'].fract_x.free = True\nmodel.atom_sites['O2'].fract_z.free = True\nmodel.atom_sites['O3'].fract_x.free = True\nmodel.atom_sites['O3'].fract_y.free = True\nmodel.atom_sites['O3'].fract_z.free = True\n\nmodel.atom_sites['Co1'].b_iso.free = True\nmodel.atom_sites['Co2'].b_iso.free = True\nmodel.atom_sites['Si'].b_iso.free = True\nmodel.atom_sites['O1'].b_iso.free = True\nmodel.atom_sites['O2'].b_iso.free = True\nmodel.atom_sites['O3'].b_iso.free = True\n</pre> model.cell.length_a.free = True model.cell.length_b.free = True model.cell.length_c.free = True  model.atom_sites['Co2'].fract_x.free = True model.atom_sites['Co2'].fract_z.free = True model.atom_sites['Si'].fract_x.free = True model.atom_sites['Si'].fract_z.free = True model.atom_sites['O1'].fract_x.free = True model.atom_sites['O1'].fract_z.free = True model.atom_sites['O2'].fract_x.free = True model.atom_sites['O2'].fract_z.free = True model.atom_sites['O3'].fract_x.free = True model.atom_sites['O3'].fract_y.free = True model.atom_sites['O3'].fract_z.free = True  model.atom_sites['Co1'].b_iso.free = True model.atom_sites['Co2'].b_iso.free = True model.atom_sites['Si'].b_iso.free = True model.atom_sites['O1'].b_iso.free = True model.atom_sites['O2'].b_iso.free = True model.atom_sites['O3'].b_iso.free = True In\u00a0[25]: Copied! <pre>expt.linked_phases['cosio'].scale.free = True\n\nexpt.instrument.calib_twotheta_offset.free = True\n\nexpt.peak.broad_gauss_u.free = True\nexpt.peak.broad_gauss_v.free = True\nexpt.peak.broad_gauss_w.free = True\nexpt.peak.broad_lorentz_y.free = True\n\nfor point in expt.background:\n    point.y.free = True\n</pre> expt.linked_phases['cosio'].scale.free = True  expt.instrument.calib_twotheta_offset.free = True  expt.peak.broad_gauss_u.free = True expt.peak.broad_gauss_v.free = True expt.peak.broad_gauss_w.free = True expt.peak.broad_lorentz_y.free = True  for point in expt.background:     point.y.free = True In\u00a0[26]: Copied! <pre>project.analysis.aliases.add(\n    label='biso_Co1',\n    param_uid=project.sample_models['cosio'].atom_sites['Co1'].b_iso.uid,\n)\nproject.analysis.aliases.add(\n    label='biso_Co2',\n    param_uid=project.sample_models['cosio'].atom_sites['Co2'].b_iso.uid,\n)\n</pre> project.analysis.aliases.add(     label='biso_Co1',     param_uid=project.sample_models['cosio'].atom_sites['Co1'].b_iso.uid, ) project.analysis.aliases.add(     label='biso_Co2',     param_uid=project.sample_models['cosio'].atom_sites['Co2'].b_iso.uid, ) <p>Set constraints.</p> In\u00a0[27]: Copied! <pre>project.analysis.constraints.add(\n    lhs_alias='biso_Co2',\n    rhs_expr='biso_Co1',\n)\n</pre> project.analysis.constraints.add(     lhs_alias='biso_Co2',     rhs_expr='biso_Co1', ) <p>Apply constraints.</p> In\u00a0[28]: Copied! <pre>project.analysis.apply_constraints()\n</pre> project.analysis.apply_constraints() In\u00a0[29]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'd20' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 423.20 43 71.71 83.1% \u2193 83 40.43 43.6% \u2193 123 17.05 57.8% \u2193 163 10.78 36.8% \u2193 203 9.26 14.1% \u2193 243 8.08 12.7% \u2193 283 5.66 30.0% \u2193 323 4.67 17.4% \u2193 363 4.57 2.3% \u2193 564 4.56 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 4.56 at iteration 562\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 9.53 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 4.56\n\ud83d\udccf R-factor (Rf): 3.04%\n\ud83d\udccf R-factor squared (Rf\u00b2): 4.54%\n\ud83d\udccf Weighted R-factor (wR): 4.87%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 cosio atom_sites Co1 b_iso 0.5000 0.2770 0.0802 \u00c5\u00b2 44.59 % \u2193 2 cosio atom_sites Co2 fract_x 0.2790 0.2794 0.0007 0.14 % \u2191 3 cosio atom_sites Co2 fract_z 0.9850 0.9847 0.0015 0.03 % \u2193 4 cosio atom_sites Si b_iso 0.5000 0.3519 0.0625 \u00c5\u00b2 29.62 % \u2193 5 cosio atom_sites Si fract_x 0.0940 0.0937 0.0004 0.31 % \u2193 6 cosio atom_sites Si fract_z 0.4290 0.4290 0.0008 0.01 % \u2191 7 cosio atom_sites O1 b_iso 0.5000 0.6457 0.0581 \u00c5\u00b2 29.14 % \u2191 8 cosio atom_sites O1 fract_x 0.0910 0.0911 0.0003 0.08 % \u2191 9 cosio atom_sites O1 fract_z 0.7710 0.7714 0.0006 0.05 % \u2191 10 cosio atom_sites O2 b_iso 0.5000 0.5778 0.0582 \u00c5\u00b2 15.57 % \u2191 11 cosio atom_sites O2 fract_x 0.4480 0.4482 0.0003 0.06 % \u2191 12 cosio atom_sites O2 fract_z 0.2170 0.2167 0.0007 0.14 % \u2193 13 cosio atom_sites O3 b_iso 0.5000 0.8389 0.0485 \u00c5\u00b2 67.79 % \u2191 14 cosio atom_sites O3 fract_x 0.1640 0.1636 0.0002 0.26 % \u2193 15 cosio atom_sites O3 fract_y 0.0320 0.0317 0.0003 1.08 % \u2193 16 cosio atom_sites O3 fract_z 0.2800 0.2800 0.0005 0.02 % \u2191 17 cosio cell length_a 10.3000 10.3090 0.0003 \u00c5 0.09 % \u2191 18 cosio cell length_b 6.0000 6.0039 0.0002 \u00c5 0.07 % \u2191 19 cosio cell length_c 4.8000 4.7868 0.0001 \u00c5 0.28 % \u2193 20 d20 background 8 y 500.0000 608.6305 14.5414 21.73 % \u2191 21 d20 background 9 y 500.0000 580.6214 9.7278 16.12 % \u2191 22 d20 background 10 y 500.0000 562.8991 9.2422 12.58 % \u2191 23 d20 background 11 y 500.0000 540.2882 8.7695 8.06 % \u2191 24 d20 background 12 y 500.0000 519.8428 6.0496 3.97 % \u2191 25 d20 background 15 y 500.0000 507.3838 3.4846 1.48 % \u2191 26 d20 background 25 y 500.0000 463.0794 3.1898 7.38 % \u2193 27 d20 background 30 y 500.0000 434.2455 2.3904 13.15 % \u2193 28 d20 background 50 y 500.0000 450.8166 2.2505 9.84 % \u2193 29 d20 background 70 y 500.0000 430.3828 2.0250 13.92 % \u2193 30 d20 background 90 y 500.0000 413.7132 2.2594 17.26 % \u2193 31 d20 background 110 y 500.0000 361.2599 2.0915 27.75 % \u2193 32 d20 background 130 y 500.0000 291.0612 1.9671 41.79 % \u2193 33 d20 background 150 y 500.0000 238.7749 2.9764 52.25 % \u2193 34 d20 instrument twotheta_offset 0.1000 0.2884 0.0020 deg 188.44 % \u2191 35 d20 linked_phases cosio scale 1.0000 1.1957 0.0106 19.57 % \u2191 36 d20 peak broad_gauss_u 0.3000 0.2423 0.0068 deg\u00b2 19.22 % \u2193 37 d20 peak broad_gauss_v -0.5000 -0.5288 0.0145 deg\u00b2 5.76 % \u2191 38 d20 peak broad_gauss_w 0.4000 0.3840 0.0090 deg\u00b2 4.01 % \u2193 39 d20 peak broad_lorentz_y 0.0000 0.0159 0.0045 deg N/A In\u00a0[30]: Copied! <pre>project.plot_meas_vs_calc(expt_name='d20', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='d20', show_residual=True) In\u00a0[31]: Copied! <pre>project.plot_meas_vs_calc(expt_name='d20', x_min=41, x_max=54, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='d20', x_min=41, x_max=54, show_residual=True) In\u00a0[32]: Copied! <pre>project.summary.show_report()\n</pre> project.summary.show_report() <pre>\n*** PROJECT INFO ***\n\nTitle\nUntitled Project\n\n*** CRYSTALLOGRAPHIC DATA ***\n\nPhase datablock\n\ud83e\udde9 cosio\n\nSpace group\nP n m a\n\nCell parameters\n</pre> alpha 90.00000 beta 90.00000 gamma 90.00000 a 10.30896 b 6.00391 c 4.78675 <pre>\nAtom sites\n</pre> Label Type fract_x fract_y fract_z Occupancy B_iso Co1 Co 0.00000 0.00000 0.00000 1.00000 0.27703 Co2 Co 0.27938 0.25000 0.98470 1.00000 0.27703 Si Si 0.09371 0.25000 0.42904 1.00000 0.35192 O1 O 0.09107 0.25000 0.77140 1.00000 0.64570 O2 O 0.44825 0.25000 0.21671 1.00000 0.57784 O3 O 0.16358 0.03165 0.28005 1.00000 0.83894 <pre>\n*** EXPERIMENTS ***\n\nExperiment datablock\n\ud83d\udd2c d20\n\nExperiment type\npowder, neutron, constant wavelength\n\nWavelength\n1.87000\n\n2\u03b8 offset\n0.28844\n\nProfile type\npseudo-voigt\n\nPeak broadening (Gaussian)\n</pre> U 0.24233 V -0.52880 W 0.38395 <pre>\nPeak broadening (Lorentzian)\n</pre> X 0.00000 Y 0.01591 <pre>\n*** FITTING ***\n\nCalculation engine\ncryspy\n\nMinimization engine\nlmfit (leastsq)\n\nFit quality\n</pre> Goodness-of-fit (reduced \u03c7\u00b2) 4.56"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#structure-refinement-co2sio4-d20","title":"Structure Refinement: Co2SiO4, D20\u00b6","text":"<p>This example demonstrates a Rietveld refinement of Co2SiO4 crystal structure using constant wavelength neutron powder diffraction data from D20 at ILL.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#define-sample-model","title":"Define Sample Model\u00b6","text":"<p>This section shows how to add sample models and modify their parameters.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#create-sample-model","title":"Create Sample Model\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-space-group","title":"Set Space Group\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-unit-cell","title":"Set Unit Cell\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-atom-sites","title":"Set Atom Sites\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#symmetry-constraints","title":"Symmetry Constraints\u00b6","text":"<p>Show CIF output before applying symmetry constraints.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#define-experiment","title":"Define Experiment\u00b6","text":"<p>This section shows how to add experiments, configure their parameters, and link the sample models defined in the previous step.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#download-measured-data","title":"Download Measured Data\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#create-experiment","title":"Create Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-instrument","title":"Set Instrument\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-peak-profile","title":"Set Peak Profile\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-background","title":"Set Background\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-linked-phases","title":"Set Linked Phases\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#define-project","title":"Define Project\u00b6","text":"<p>The project object is used to manage the sample model, experiment, and analysis.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-plotting-engine","title":"Set Plotting Engine\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#add-experiment","title":"Add Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#perform-analysis","title":"Perform Analysis\u00b6","text":"<p>This section shows the analysis process, including how to set up calculation and fitting engines.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-calculator","title":"Set Calculator\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-minimizer","title":"Set Minimizer\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-free-parameters","title":"Set Free Parameters\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#set-constraints","title":"Set Constraints\u00b6","text":"<p>Set aliases for parameters.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#summary","title":"Summary\u00b6","text":"<p>This final section shows how to review the results of the analysis.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_CoSiO4-D20/#show-project-summary","title":"Show Project Summary\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/","title":"HS pd-neut-cwl","text":"In\u00a0[2]: Copied! <pre>from easydiffraction import Experiment\nfrom easydiffraction import Project\nfrom easydiffraction import SampleModel\nfrom easydiffraction import download_from_repository\n</pre> from easydiffraction import Experiment from easydiffraction import Project from easydiffraction import SampleModel from easydiffraction import download_from_repository <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>model = SampleModel('hs')\n</pre> model = SampleModel('hs') In\u00a0[4]: Copied! <pre>model.space_group.name_h_m = 'R -3 m'\nmodel.space_group.it_coordinate_system_code = 'h'\n</pre> model.space_group.name_h_m = 'R -3 m' model.space_group.it_coordinate_system_code = 'h' In\u00a0[5]: Copied! <pre>model.cell.length_a = 6.9\nmodel.cell.length_c = 14.1\n</pre> model.cell.length_a = 6.9 model.cell.length_c = 14.1 In\u00a0[6]: Copied! <pre>model.atom_sites.add('Zn', 'Zn', 0, 0, 0.5, wyckoff_letter='b', b_iso=0.5)\nmodel.atom_sites.add('Cu', 'Cu', 0.5, 0, 0, wyckoff_letter='e', b_iso=0.5)\nmodel.atom_sites.add('O', 'O', 0.21, -0.21, 0.06, wyckoff_letter='h', b_iso=0.5)\nmodel.atom_sites.add('Cl', 'Cl', 0, 0, 0.197, wyckoff_letter='c', b_iso=0.5)\nmodel.atom_sites.add('H', '2H', 0.13, -0.13, 0.08, wyckoff_letter='h', b_iso=0.5)\n</pre> model.atom_sites.add('Zn', 'Zn', 0, 0, 0.5, wyckoff_letter='b', b_iso=0.5) model.atom_sites.add('Cu', 'Cu', 0.5, 0, 0, wyckoff_letter='e', b_iso=0.5) model.atom_sites.add('O', 'O', 0.21, -0.21, 0.06, wyckoff_letter='h', b_iso=0.5) model.atom_sites.add('Cl', 'Cl', 0, 0, 0.197, wyckoff_letter='c', b_iso=0.5) model.atom_sites.add('H', '2H', 0.13, -0.13, 0.08, wyckoff_letter='h', b_iso=0.5) In\u00a0[7]: Copied! <pre>model.show_as_cif()\n</pre> model.show_as_cif() <pre>\nSample model \ud83e\udde9 'hs' as cif\n</pre> data_hs _space_group.IT_coordinate_system_code  h _space_group.name_H-M_alt  \"R -3 m\" _cell.angle_alpha  90.0 _cell.angle_beta  90.0 _cell.angle_gamma  90.0 _cell.length_a  6.9 _cell.length_b  10.0 _cell.length_c  14.1 loop_ _atom_site.ADP_type _atom_site.B_iso_or_equiv _atom_site.fract_x _atom_site.fract_y _atom_site.fract_z _atom_site.label _atom_site.occupancy _atom_site.type_symbol _atom_site.Wyckoff_letter Biso 0.5 0 0 0.5 Zn 1.0 Zn b Biso 0.5 0.5 0 0 Cu 1.0 Cu e Biso 0.5 0.21 -0.21 0.06 O 1.0 O h Biso 0.5 0 0 0.197 Cl 1.0 Cl c Biso 0.5 0.13 -0.13 0.08 H 1.0 2H h <p>Apply symmetry constraints.</p> In\u00a0[8]: Copied! <pre>model.apply_symmetry_constraints()\n</pre> model.apply_symmetry_constraints() <p>Show CIF output after applying symmetry constraints.</p> In\u00a0[9]: Copied! <pre>model.show_as_cif()\n</pre> model.show_as_cif() <pre>\nSample model \ud83e\udde9 'hs' as cif\n</pre> data_hs _space_group.IT_coordinate_system_code  h _space_group.name_H-M_alt  \"R -3 m\" _cell.angle_alpha  90 _cell.angle_beta  90 _cell.angle_gamma  120 _cell.length_a  6.9 _cell.length_b  6.9 _cell.length_c  14.1 loop_ _atom_site.ADP_type _atom_site.B_iso_or_equiv _atom_site.fract_x _atom_site.fract_y _atom_site.fract_z _atom_site.label _atom_site.occupancy _atom_site.type_symbol _atom_site.Wyckoff_letter Biso 0.5 0.0 0.0 0.5 Zn 1.0 Zn b Biso 0.5 0.5 0.0 0.0 Cu 1.0 Cu e Biso 0.5 0.21 -0.21 0.06 O 1.0 O h Biso 0.5 0.0 0.0 0.197 Cl 1.0 Cl c Biso 0.5 0.13 -0.13 0.08 H 1.0 2H h In\u00a0[10]: Copied! <pre>download_from_repository('hrpt_hs.xye', destination='data')\n</pre> download_from_repository('hrpt_hs.xye', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/hrpt_hs.xye' already exists and will not be overwritten.\n</pre> In\u00a0[11]: Copied! <pre>expt = Experiment(name='hrpt', data_path='data/hrpt_hs.xye')\n</pre> expt = Experiment(name='hrpt', data_path='data/hrpt_hs.xye') <pre>\nData loaded successfully\nExperiment \ud83d\udd2c 'hrpt'. Number of data points: 3220\n</pre> In\u00a0[12]: Copied! <pre>expt.instrument.setup_wavelength = 1.89\nexpt.instrument.calib_twotheta_offset = 0.0\n</pre> expt.instrument.setup_wavelength = 1.89 expt.instrument.calib_twotheta_offset = 0.0 In\u00a0[13]: Copied! <pre>expt.peak.broad_gauss_u = 0.1\nexpt.peak.broad_gauss_v = -0.2\nexpt.peak.broad_gauss_w = 0.2\nexpt.peak.broad_lorentz_x = 0.0\nexpt.peak.broad_lorentz_y = 0\n</pre> expt.peak.broad_gauss_u = 0.1 expt.peak.broad_gauss_v = -0.2 expt.peak.broad_gauss_w = 0.2 expt.peak.broad_lorentz_x = 0.0 expt.peak.broad_lorentz_y = 0 In\u00a0[14]: Copied! <pre>expt.background.add(x=4.4196, y=500)\nexpt.background.add(x=6.6207, y=500)\nexpt.background.add(x=10.4918, y=500)\nexpt.background.add(x=15.4634, y=500)\nexpt.background.add(x=45.6041, y=500)\nexpt.background.add(x=74.6844, y=500)\nexpt.background.add(x=103.4187, y=500)\nexpt.background.add(x=121.6311, y=500)\nexpt.background.add(x=159.4116, y=500)\n</pre> expt.background.add(x=4.4196, y=500) expt.background.add(x=6.6207, y=500) expt.background.add(x=10.4918, y=500) expt.background.add(x=15.4634, y=500) expt.background.add(x=45.6041, y=500) expt.background.add(x=74.6844, y=500) expt.background.add(x=103.4187, y=500) expt.background.add(x=121.6311, y=500) expt.background.add(x=159.4116, y=500) In\u00a0[15]: Copied! <pre>expt.linked_phases.add('hs', scale=0.5)\n</pre> expt.linked_phases.add('hs', scale=0.5) In\u00a0[16]: Copied! <pre>project = Project()\n</pre> project = Project() In\u00a0[17]: Copied! <pre>project.plotter.engine = 'plotly'\n</pre> project.plotter.engine = 'plotly' <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[18]: Copied! <pre>project.sample_models.add(model)\n</pre> project.sample_models.add(model) In\u00a0[19]: Copied! <pre>project.experiments.add(expt)\n</pre> project.experiments.add(expt) In\u00a0[20]: Copied! <pre>project.analysis.current_calculator = 'cryspy'\n</pre> project.analysis.current_calculator = 'cryspy' <pre>\nCurrent calculator changed to\ncryspy\n</pre> In\u00a0[21]: Copied! <pre>project.analysis.current_minimizer = 'lmfit (leastsq)'\n</pre> project.analysis.current_minimizer = 'lmfit (leastsq)' <pre>\nCurrent minimizer changed to\nlmfit (leastsq)\n</pre> In\u00a0[22]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[23]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True) In\u00a0[24]: Copied! <pre>model.cell.length_a.free = True\nmodel.cell.length_c.free = True\n\nexpt.linked_phases['hs'].scale.free = True\nexpt.instrument.calib_twotheta_offset.free = True\n</pre> model.cell.length_a.free = True model.cell.length_c.free = True  expt.linked_phases['hs'].scale.free = True expt.instrument.calib_twotheta_offset.free = True <p>Show free parameters after selection.</p> In\u00a0[25]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 hs cell length_a 6.9000 \u00c5 2 hs cell length_c 14.1000 \u00c5 3 hrpt instrument twotheta_offset 0.0000 deg 4 hrpt linked_phases hs scale 0.5000 In\u00a0[26]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 576.50 8 122.02 78.8% \u2193 13 115.19 5.6% \u2193 18 109.86 4.6% \u2193 23 106.68 2.9% \u2193 28 104.60 2.0% \u2193 33 102.87 1.7% \u2193 38 101.13 1.7% \u2193 43 99.20 1.9% \u2193 48 96.86 2.4% \u2193 53 93.93 3.0% \u2193 58 90.34 3.8% \u2193 63 86.20 4.6% \u2193 68 81.66 5.3% \u2193 73 76.78 6.0% \u2193 78 71.71 6.6% \u2193 83 66.82 6.8% \u2193 88 62.48 6.5% \u2193 93 58.99 5.6% \u2193 98 56.41 4.4% \u2193 103 54.64 3.1% \u2193 108 53.49 2.1% \u2193 113 52.76 1.4% \u2193 123 52.02 1.4% \u2193 304 51.57 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 51.57 at iteration 303\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 5.97 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 51.57\n\ud83d\udccf R-factor (Rf): 19.70%\n\ud83d\udccf R-factor squared (Rf\u00b2): 30.20%\n\ud83d\udccf Weighted R-factor (wR): 30.35%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 hs cell length_a 6.9000 6.8623 0.0003 \u00c5 0.55 % \u2193 2 hs cell length_c 14.1000 14.1365 0.0008 \u00c5 0.26 % \u2191 3 hrpt instrument twotheta_offset 0.0000 0.1271 0.0051 deg N/A 4 hrpt linked_phases hs scale 0.5000 0.2548 0.0030 49.04 % \u2193 In\u00a0[27]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[28]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True) In\u00a0[29]: Copied! <pre>expt.peak.broad_gauss_u.free = True\nexpt.peak.broad_gauss_v.free = True\nexpt.peak.broad_gauss_w.free = True\nexpt.peak.broad_lorentz_x.free = True\n\nfor point in expt.background:\n    point.y.free = True\n</pre> expt.peak.broad_gauss_u.free = True expt.peak.broad_gauss_v.free = True expt.peak.broad_gauss_w.free = True expt.peak.broad_lorentz_x.free = True  for point in expt.background:     point.y.free = True <p>Show free parameters after selection.</p> In\u00a0[30]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 hs cell length_a 6.8623 0.0003 \u00c5 2 hs cell length_c 14.1365 0.0008 \u00c5 3 hrpt background 4.4196 y 500.0000 4 hrpt background 6.6207 y 500.0000 5 hrpt background 10.4918 y 500.0000 6 hrpt background 15.4634 y 500.0000 7 hrpt background 45.6041 y 500.0000 8 hrpt background 74.6844 y 500.0000 9 hrpt background 103.4187 y 500.0000 10 hrpt background 121.6311 y 500.0000 11 hrpt background 159.4116 y 500.0000 12 hrpt instrument twotheta_offset 0.1271 0.0051 deg 13 hrpt linked_phases hs scale 0.2548 0.0030 14 hrpt peak broad_gauss_u 0.1000 deg\u00b2 15 hrpt peak broad_gauss_v -0.2000 deg\u00b2 16 hrpt peak broad_gauss_w 0.2000 deg\u00b2 17 hrpt peak broad_lorentz_x 0.0000 deg In\u00a0[31]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 51.78 21 13.07 74.8% \u2193 40 12.66 3.2% \u2193 58 12.49 1.3% \u2193 340 12.41 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 12.41 at iteration 339\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 7.04 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 12.41\n\ud83d\udccf R-factor (Rf): 9.62%\n\ud83d\udccf R-factor squared (Rf\u00b2): 12.83%\n\ud83d\udccf Weighted R-factor (wR): 12.21%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 hs cell length_a 6.8623 6.8628 0.0003 \u00c5 0.01 % \u2191 2 hs cell length_c 14.1365 14.1389 0.0009 \u00c5 0.02 % \u2191 3 hrpt background 4.4196 y 500.0000 645.4830 23.7674 29.10 % \u2191 4 hrpt background 6.6207 y 500.0000 520.8595 13.6088 4.17 % \u2191 5 hrpt background 10.4918 y 500.0000 455.0036 10.4220 9.00 % \u2193 6 hrpt background 15.4634 y 500.0000 428.8639 5.4019 14.23 % \u2193 7 hrpt background 45.6041 y 500.0000 453.5008 5.2135 9.30 % \u2193 8 hrpt background 74.6844 y 500.0000 446.7592 5.4686 10.65 % \u2193 9 hrpt background 103.4187 y 500.0000 411.5620 5.4490 17.69 % \u2193 10 hrpt background 121.6311 y 500.0000 364.3828 5.6634 27.12 % \u2193 11 hrpt background 159.4116 y 500.0000 469.2837 5.4987 6.14 % \u2193 12 hrpt instrument twotheta_offset 0.1271 0.1289 0.0038 deg 1.39 % \u2191 13 hrpt linked_phases hs scale 0.2548 0.4570 0.0032 79.37 % \u2191 14 hrpt peak broad_gauss_u 0.1000 0.1042 0.0451 deg\u00b2 4.18 % \u2191 15 hrpt peak broad_gauss_v -0.2000 -0.4977 0.0619 deg\u00b2 148.83 % \u2191 16 hrpt peak broad_gauss_w 0.2000 0.3592 0.0227 deg\u00b2 79.60 % \u2191 17 hrpt peak broad_lorentz_x 0.0000 0.5042 0.0075 deg N/A In\u00a0[32]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[33]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True) In\u00a0[34]: Copied! <pre>model.atom_sites['O'].fract_x.free = True\nmodel.atom_sites['O'].fract_z.free = True\nmodel.atom_sites['Cl'].fract_z.free = True\nmodel.atom_sites['H'].fract_x.free = True\nmodel.atom_sites['H'].fract_z.free = True\n</pre> model.atom_sites['O'].fract_x.free = True model.atom_sites['O'].fract_z.free = True model.atom_sites['Cl'].fract_z.free = True model.atom_sites['H'].fract_x.free = True model.atom_sites['H'].fract_z.free = True <p>Show free parameters after selection.</p> In\u00a0[35]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 hs atom_sites O fract_x 0.2100 2 hs atom_sites O fract_z 0.0600 3 hs atom_sites Cl fract_z 0.1970 4 hs atom_sites H fract_x 0.1300 5 hs atom_sites H fract_z 0.0800 6 hs cell length_a 6.8628 0.0003 \u00c5 7 hs cell length_c 14.1389 0.0009 \u00c5 8 hrpt background 4.4196 y 645.4830 23.7674 9 hrpt background 6.6207 y 520.8595 13.6088 10 hrpt background 10.4918 y 455.0036 10.4220 11 hrpt background 15.4634 y 428.8639 5.4019 12 hrpt background 45.6041 y 453.5008 5.2135 13 hrpt background 74.6844 y 446.7592 5.4686 14 hrpt background 103.4187 y 411.5620 5.4490 15 hrpt background 121.6311 y 364.3828 5.6634 16 hrpt background 159.4116 y 469.2837 5.4987 17 hrpt instrument twotheta_offset 0.1289 0.0038 deg 18 hrpt linked_phases hs scale 0.4570 0.0032 19 hrpt peak broad_gauss_u 0.1042 0.0451 deg\u00b2 20 hrpt peak broad_gauss_v -0.4977 0.0619 deg\u00b2 21 hrpt peak broad_gauss_w 0.3592 0.0227 deg\u00b2 22 hrpt peak broad_lorentz_x 0.5042 0.0075 deg In\u00a0[36]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 12.43 26 5.11 58.9% \u2193 49 4.40 13.9% \u2193 72 4.35 1.3% \u2193 188 4.34 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 4.34 at iteration 187\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 3.66 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 4.34\n\ud83d\udccf R-factor (Rf): 6.01%\n\ud83d\udccf R-factor squared (Rf\u00b2): 7.74%\n\ud83d\udccf Weighted R-factor (wR): 7.51%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 hs atom_sites O fract_x 0.2100 0.2059 0.0002 1.96 % \u2193 2 hs atom_sites O fract_z 0.0600 0.0625 0.0002 4.14 % \u2191 3 hs atom_sites Cl fract_z 0.1970 0.1977 0.0002 0.36 % \u2191 4 hs atom_sites H fract_x 0.1300 0.1330 0.0002 2.33 % \u2191 5 hs atom_sites H fract_z 0.0800 0.0877 0.0001 9.59 % \u2191 6 hs cell length_a 6.8628 6.8621 0.0002 \u00c5 0.01 % \u2193 7 hs cell length_c 14.1389 14.1356 0.0005 \u00c5 0.02 % \u2193 8 hrpt background 4.4196 y 645.4830 647.4024 14.0610 0.30 % \u2191 9 hrpt background 6.6207 y 520.8595 523.4725 8.0510 0.50 % \u2191 10 hrpt background 10.4918 y 455.0036 453.7545 6.1678 0.27 % \u2193 11 hrpt background 15.4634 y 428.8639 437.9479 3.2221 2.12 % \u2191 12 hrpt background 45.6041 y 453.5008 477.4863 3.2261 5.29 % \u2191 13 hrpt background 74.6844 y 446.7592 485.0177 3.4007 8.56 % \u2191 14 hrpt background 103.4187 y 411.5620 452.4338 3.2894 9.93 % \u2191 15 hrpt background 121.6311 y 364.3828 435.3732 3.5007 19.48 % \u2191 16 hrpt background 159.4116 y 469.2837 427.3883 3.6274 8.93 % \u2193 17 hrpt instrument twotheta_offset 0.1289 0.1167 0.0021 deg 9.43 % \u2193 18 hrpt linked_phases hs scale 0.4570 0.4176 0.0021 8.63 % \u2193 19 hrpt peak broad_gauss_u 0.1042 0.1789 0.0119 deg\u00b2 71.71 % \u2191 20 hrpt peak broad_gauss_v -0.4977 -0.3964 0.0222 deg\u00b2 20.35 % \u2193 21 hrpt peak broad_gauss_w 0.3592 0.3272 0.0100 deg\u00b2 8.92 % \u2193 22 hrpt peak broad_lorentz_x 0.5042 0.3601 0.0089 deg 28.57 % \u2193 In\u00a0[37]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[38]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True) In\u00a0[39]: Copied! <pre>model.atom_sites['Zn'].b_iso.free = True\nmodel.atom_sites['Cu'].b_iso.free = True\nmodel.atom_sites['O'].b_iso.free = True\nmodel.atom_sites['Cl'].b_iso.free = True\nmodel.atom_sites['H'].b_iso.free = True\n</pre> model.atom_sites['Zn'].b_iso.free = True model.atom_sites['Cu'].b_iso.free = True model.atom_sites['O'].b_iso.free = True model.atom_sites['Cl'].b_iso.free = True model.atom_sites['H'].b_iso.free = True <p>Show free parameters after selection.</p> In\u00a0[40]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 hs atom_sites Zn b_iso 0.5000 \u00c5\u00b2 2 hs atom_sites Cu b_iso 0.5000 \u00c5\u00b2 3 hs atom_sites O b_iso 0.5000 \u00c5\u00b2 4 hs atom_sites O fract_x 0.2059 0.0002 5 hs atom_sites O fract_z 0.0625 0.0002 6 hs atom_sites Cl b_iso 0.5000 \u00c5\u00b2 7 hs atom_sites Cl fract_z 0.1977 0.0002 8 hs atom_sites H b_iso 0.5000 \u00c5\u00b2 9 hs atom_sites H fract_x 0.1330 0.0002 10 hs atom_sites H fract_z 0.0877 0.0001 11 hs cell length_a 6.8621 0.0002 \u00c5 12 hs cell length_c 14.1356 0.0005 \u00c5 13 hrpt background 4.4196 y 647.4024 14.0610 14 hrpt background 6.6207 y 523.4725 8.0510 15 hrpt background 10.4918 y 453.7545 6.1678 16 hrpt background 15.4634 y 437.9479 3.2221 17 hrpt background 45.6041 y 477.4863 3.2261 18 hrpt background 74.6844 y 485.0177 3.4007 19 hrpt background 103.4187 y 452.4338 3.2894 20 hrpt background 121.6311 y 435.3732 3.5007 21 hrpt background 159.4116 y 427.3883 3.6274 22 hrpt instrument twotheta_offset 0.1167 0.0021 deg 23 hrpt linked_phases hs scale 0.4176 0.0021 24 hrpt peak broad_gauss_u 0.1789 0.0119 deg\u00b2 25 hrpt peak broad_gauss_v -0.3964 0.0222 deg\u00b2 26 hrpt peak broad_gauss_w 0.3272 0.0100 deg\u00b2 27 hrpt peak broad_lorentz_x 0.3601 0.0089 deg In\u00a0[41]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 4.35 31 2.30 47.1% \u2193 59 2.11 8.3% \u2193 144 2.11 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 2.11 at iteration 116\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 2.94 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 2.11\n\ud83d\udccf R-factor (Rf): 4.17%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.05%\n\ud83d\udccf Weighted R-factor (wR): 4.73%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 hs atom_sites Zn b_iso 0.5000 0.0855 0.0630 \u00c5\u00b2 82.91 % \u2193 2 hs atom_sites Cu b_iso 0.5000 1.1937 0.0399 \u00c5\u00b2 138.74 % \u2191 3 hs atom_sites O b_iso 0.5000 0.7001 0.0360 \u00c5\u00b2 40.02 % \u2191 4 hs atom_sites O fract_x 0.2059 0.2060 0.0002 0.06 % \u2191 5 hs atom_sites O fract_z 0.0625 0.0609 0.0001 2.53 % \u2193 6 hs atom_sites Cl b_iso 0.5000 1.1129 0.0385 \u00c5\u00b2 122.58 % \u2191 7 hs atom_sites Cl fract_z 0.1977 0.1968 0.0001 0.49 % \u2193 8 hs atom_sites H b_iso 0.5000 2.3404 0.0401 \u00c5\u00b2 368.08 % \u2191 9 hs atom_sites H fract_x 0.1330 0.1322 0.0002 0.62 % \u2193 10 hs atom_sites H fract_z 0.0877 0.0900 0.0001 2.63 % \u2191 11 hs cell length_a 6.8621 6.8615 0.0001 \u00c5 0.01 % \u2193 12 hs cell length_c 14.1356 14.1360 0.0004 \u00c5 0.00 % \u2191 13 hrpt background 4.4196 y 647.4024 648.4125 9.7968 0.16 % \u2191 14 hrpt background 6.6207 y 523.4725 523.7880 5.6095 0.06 % \u2191 15 hrpt background 10.4918 y 453.7545 454.9375 4.2976 0.26 % \u2191 16 hrpt background 15.4634 y 437.9479 435.9131 2.2512 0.46 % \u2193 17 hrpt background 45.6041 y 477.4863 472.9718 2.2759 0.95 % \u2193 18 hrpt background 74.6844 y 485.0177 486.6064 2.4356 0.33 % \u2191 19 hrpt background 103.4187 y 452.4338 472.4095 2.3483 4.42 % \u2191 20 hrpt background 121.6311 y 435.3732 496.7338 2.6211 14.09 % \u2191 21 hrpt background 159.4116 y 427.3883 473.1457 2.9361 10.71 % \u2191 22 hrpt instrument twotheta_offset 0.1167 0.1137 0.0015 deg 2.62 % \u2193 23 hrpt linked_phases hs scale 0.4176 0.4918 0.0022 17.76 % \u2191 24 hrpt peak broad_gauss_u 0.1789 0.1579 0.0076 deg\u00b2 11.70 % \u2193 25 hrpt peak broad_gauss_v -0.3964 -0.3571 0.0147 deg\u00b2 9.91 % \u2193 26 hrpt peak broad_gauss_w 0.3272 0.3498 0.0067 deg\u00b2 6.92 % \u2191 27 hrpt peak broad_lorentz_x 0.3601 0.2927 0.0065 deg 18.73 % \u2193 In\u00a0[42]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True) In\u00a0[43]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', x_min=48, x_max=51, show_residual=True) In\u00a0[44]: Copied! <pre>project.summary.show_report()\n</pre> project.summary.show_report() <pre>\n*** PROJECT INFO ***\n\nTitle\nUntitled Project\n\n*** CRYSTALLOGRAPHIC DATA ***\n\nPhase datablock\n\ud83e\udde9 hs\n\nSpace group\nR -3 m\n\nCell parameters\n</pre> alpha 90.00000 beta 90.00000 gamma 120.00000 a 6.86149 b 6.86149 c 14.13604 <pre>\nAtom sites\n</pre> Label Type fract_x fract_y fract_z Occupancy B_iso Zn Zn 0.00000 0.00000 0.50000 1.00000 0.08546 Cu Cu 0.50000 0.00000 0.00000 1.00000 1.19372 O O 0.20601 -0.20601 0.06090 1.00000 0.70009 Cl Cl 0.00000 0.00000 0.19675 1.00000 1.11288 H 2H 0.13220 -0.13220 0.08998 1.00000 2.34039 <pre>\n*** EXPERIMENTS ***\n\nExperiment datablock\n\ud83d\udd2c hrpt\n\nExperiment type\npowder, neutron, constant wavelength\n\nWavelength\n1.89000\n\n2\u03b8 offset\n0.11368\n\nProfile type\npseudo-voigt\n\nPeak broadening (Gaussian)\n</pre> U 0.15795 V -0.35708 W 0.34978 <pre>\nPeak broadening (Lorentzian)\n</pre> X 0.29266 Y 0.00000 <pre>\n*** FITTING ***\n\nCalculation engine\ncryspy\n\nMinimization engine\nlmfit (leastsq)\n\nFit quality\n</pre> Goodness-of-fit (reduced \u03c7\u00b2) 2.11"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#structure-refinement-hs-hrpt","title":"Structure Refinement: HS, HRPT\u00b6","text":"<p>This example demonstrates a Rietveld refinement of HS crystal structure using constant wavelength neutron powder diffraction data from HRPT at PSI.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#define-sample-model","title":"Define Sample Model\u00b6","text":"<p>This section shows how to add sample models and modify their parameters.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#create-sample-model","title":"Create Sample Model\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-space-group","title":"Set Space Group\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-unit-cell","title":"Set Unit Cell\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-atom-sites","title":"Set Atom Sites\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#symmetry-constraints","title":"Symmetry constraints\u00b6","text":"<p>Show CIF output before applying symmetry constraints.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#define-experiment","title":"Define Experiment\u00b6","text":"<p>This section shows how to add experiments, configure their parameters, and link the sample models defined in the previous step.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#download-measured-data","title":"Download Measured Data\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#create-experiment","title":"Create Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-instrument","title":"Set Instrument\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-peak-profile","title":"Set Peak Profile\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-background","title":"Set Background\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-linked-phases","title":"Set Linked Phases\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#define-project","title":"Define Project\u00b6","text":"<p>The project object is used to manage the sample model, experiment, and analysis.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-plotting-engine","title":"Set Plotting Engine\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#add-experiment","title":"Add Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#perform-analysis","title":"Perform Analysis\u00b6","text":"<p>This section shows the analysis process, including how to set up calculation and fitting engines.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-calculator","title":"Set Calculator\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#set-minimizer","title":"Set Minimizer\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#perform-fit-15","title":"Perform Fit 1/5\u00b6","text":"<p>Set parameters to be refined.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#perform-fit-25","title":"Perform Fit 2/5\u00b6","text":"<p>Set more parameters to be refined.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#perform-fit-35","title":"Perform Fit 3/5\u00b6","text":"<p>Set more parameters to be refined.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#perform-fit-45","title":"Perform Fit 4/5\u00b6","text":"<p>Set more parameters to be refined.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#summary","title":"Summary\u00b6","text":"<p>This final section shows how to review the results of the analysis.</p>"},{"location":"tutorials/cryst-struct_pd-neut-cwl_HS-HRPT/#show-project-summary","title":"Show Project Summary\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/","title":"Si pd-neut-tof","text":"In\u00a0[2]: Copied! <pre>from easydiffraction import Experiment\nfrom easydiffraction import Project\nfrom easydiffraction import SampleModel\nfrom easydiffraction import download_from_repository\n</pre> from easydiffraction import Experiment from easydiffraction import Project from easydiffraction import SampleModel from easydiffraction import download_from_repository <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>model = SampleModel('si')\n</pre> model = SampleModel('si') In\u00a0[4]: Copied! <pre>model.space_group.name_h_m = 'F d -3 m'\nmodel.space_group.it_coordinate_system_code = '2'\n</pre> model.space_group.name_h_m = 'F d -3 m' model.space_group.it_coordinate_system_code = '2' In\u00a0[5]: Copied! <pre>model.cell.length_a = 5.431\n</pre> model.cell.length_a = 5.431 In\u00a0[6]: Copied! <pre>model.atom_sites.add('Si', 'Si', 0.125, 0.125, 0.125, b_iso=0.5)\n</pre> model.atom_sites.add('Si', 'Si', 0.125, 0.125, 0.125, b_iso=0.5) In\u00a0[7]: Copied! <pre>download_from_repository('sepd_si.xye', destination='data')\n</pre> download_from_repository('sepd_si.xye', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/sepd_si.xye' already exists and will not be overwritten.\n</pre> In\u00a0[8]: Copied! <pre>expt = Experiment('sepd', beam_mode='time-of-flight', data_path='data/sepd_si.xye')\n</pre> expt = Experiment('sepd', beam_mode='time-of-flight', data_path='data/sepd_si.xye') <pre>\nData loaded successfully\nExperiment \ud83d\udd2c 'sepd'. Number of data points: 5600\n</pre> In\u00a0[9]: Copied! <pre>expt.instrument.setup_twotheta_bank = 144.845\nexpt.instrument.calib_d_to_tof_offset = 0.0\nexpt.instrument.calib_d_to_tof_linear = 7476.91\nexpt.instrument.calib_d_to_tof_quad = -1.54\n</pre> expt.instrument.setup_twotheta_bank = 144.845 expt.instrument.calib_d_to_tof_offset = 0.0 expt.instrument.calib_d_to_tof_linear = 7476.91 expt.instrument.calib_d_to_tof_quad = -1.54 In\u00a0[10]: Copied! <pre>expt.peak_profile_type = 'pseudo-voigt * ikeda-carpenter'\nexpt.peak.broad_gauss_sigma_0 = 3.0\nexpt.peak.broad_gauss_sigma_1 = 40.0\nexpt.peak.broad_gauss_sigma_2 = 2.0\nexpt.peak.broad_mix_beta_0 = 0.04221\nexpt.peak.broad_mix_beta_1 = 0.00946\n</pre> expt.peak_profile_type = 'pseudo-voigt * ikeda-carpenter' expt.peak.broad_gauss_sigma_0 = 3.0 expt.peak.broad_gauss_sigma_1 = 40.0 expt.peak.broad_gauss_sigma_2 = 2.0 expt.peak.broad_mix_beta_0 = 0.04221 expt.peak.broad_mix_beta_1 = 0.00946 <pre>\nPeak profile type for experiment 'sepd' changed to\npseudo-voigt * ikeda-carpenter\n</pre> In\u00a0[11]: Copied! <pre>expt.peak.asym_alpha_0 = 0.0\nexpt.peak.asym_alpha_1 = 0.5971\n</pre> expt.peak.asym_alpha_0 = 0.0 expt.peak.asym_alpha_1 = 0.5971 In\u00a0[12]: Copied! <pre>expt.background_type = 'line-segment'\nfor x in range(0, 35000, 5000):\n    expt.background.add(x=x, y=200)\n</pre> expt.background_type = 'line-segment' for x in range(0, 35000, 5000):     expt.background.add(x=x, y=200) <pre>\nBackground type for experiment 'sepd' changed to\nline-segment\n</pre> In\u00a0[13]: Copied! <pre>expt.linked_phases.add('si', scale=10.0)\n</pre> expt.linked_phases.add('si', scale=10.0) In\u00a0[14]: Copied! <pre>project = Project()\n</pre> project = Project() In\u00a0[15]: Copied! <pre>project.plotter.engine = 'plotly'\n</pre> project.plotter.engine = 'plotly' <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[16]: Copied! <pre>project.sample_models.add(model)\n</pre> project.sample_models.add(model) In\u00a0[17]: Copied! <pre>project.experiments.add(expt)\n</pre> project.experiments.add(expt) In\u00a0[18]: Copied! <pre>project.analysis.current_calculator = 'cryspy'\n</pre> project.analysis.current_calculator = 'cryspy' <pre>\nCurrent calculator changed to\ncryspy\n</pre> In\u00a0[19]: Copied! <pre>project.analysis.current_minimizer = 'lmfit (leastsq)'\n</pre> project.analysis.current_minimizer = 'lmfit (leastsq)' <pre>\nCurrent minimizer changed to\nlmfit (leastsq)\n</pre> In\u00a0[20]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', show_residual=True)\nproject.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', show_residual=True) project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True) In\u00a0[21]: Copied! <pre>model.cell.length_a.free = True\n\nexpt.linked_phases['si'].scale.free = True\nexpt.instrument.calib_d_to_tof_offset.free = True\n</pre> model.cell.length_a.free = True  expt.linked_phases['si'].scale.free = True expt.instrument.calib_d_to_tof_offset.free = True <p>Show free parameters after selection.</p> In\u00a0[22]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 si cell length_a 5.4310 \u00c5 2 sepd instrument d_to_tof_offset 0.0000 \u00b5s 3 sepd linked_phases si scale 10.0000 In\u00a0[23]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sepd' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 113.06 7 72.20 36.1% \u2193 11 66.76 7.5% \u2193 30 66.72 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 66.72 at iteration 25\n\u2705 Fitting complete.\n</pre> <pre>\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 5.15 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 66.72\n\ud83d\udccf R-factor (Rf): 23.08%\n\ud83d\udccf R-factor squared (Rf\u00b2): 12.55%\n\ud83d\udccf Weighted R-factor (wR): 12.51%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 si cell length_a 5.4310 5.4314 0.0002 \u00c5 0.01 % \u2191 2 sepd instrument d_to_tof_offset 0.0000 -9.2543 0.2503 \u00b5s N/A 3 sepd linked_phases si scale 10.0000 13.3619 0.1153 33.62 % \u2191 In\u00a0[24]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', show_residual=True) In\u00a0[25]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True) In\u00a0[26]: Copied! <pre>for point in expt.background:\n    point.y.free = True\n</pre> for point in expt.background:     point.y.free = True <p>Show free parameters after selection.</p> In\u00a0[27]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 si cell length_a 5.4314 0.0002 \u00c5 2 sepd background 0 y 200.0000 3 sepd background 5000 y 200.0000 4 sepd background 10000 y 200.0000 5 sepd background 15000 y 200.0000 6 sepd background 20000 y 200.0000 7 sepd background 25000 y 200.0000 8 sepd background 30000 y 200.0000 9 sepd instrument d_to_tof_offset -9.2543 0.2503 \u00b5s 10 sepd linked_phases si scale 13.3619 0.1153 In\u00a0[28]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sepd' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 66.80 14 3.38 94.9% \u2193 48 3.38 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 3.38 at iteration 47\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 8.24 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 3.38\n\ud83d\udccf R-factor (Rf): 9.29%\n\ud83d\udccf R-factor squared (Rf\u00b2): 6.33%\n\ud83d\udccf Weighted R-factor (wR): 5.95%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 si cell length_a 5.4314 5.4314 0.0000 \u00c5 0.00 % \u2191 2 sepd background 0 y 200.0000 268.6002 0.9745 34.30 % \u2191 3 sepd background 5000 y 200.0000 144.7589 0.4071 27.62 % \u2193 4 sepd background 10000 y 200.0000 120.0247 0.4282 39.99 % \u2193 5 sepd background 15000 y 200.0000 135.8494 0.8169 32.08 % \u2193 6 sepd background 20000 y 200.0000 132.6887 1.4317 33.66 % \u2193 7 sepd background 25000 y 200.0000 175.1775 2.8755 12.41 % \u2193 8 sepd background 30000 y 200.0000 180.4556 5.8525 9.77 % \u2193 9 sepd instrument d_to_tof_offset -9.2543 -9.2534 0.0515 \u00b5s 0.01 % \u2193 10 sepd linked_phases si scale 13.3619 14.6317 0.0265 9.50 % \u2191 In\u00a0[29]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', show_residual=True) In\u00a0[30]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True) In\u00a0[31]: Copied! <pre>for point in expt.background:\n    point.y.free = False\n</pre> for point in expt.background:     point.y.free = False <p>Set more parameters to be refined.</p> In\u00a0[32]: Copied! <pre>expt.peak.broad_gauss_sigma_0.free = True\nexpt.peak.broad_gauss_sigma_1.free = True\nexpt.peak.broad_gauss_sigma_2.free = True\n</pre> expt.peak.broad_gauss_sigma_0.free = True expt.peak.broad_gauss_sigma_1.free = True expt.peak.broad_gauss_sigma_2.free = True <p>Show free parameters after selection.</p> In\u00a0[33]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 si cell length_a 5.4314 0.0000 \u00c5 2 sepd instrument d_to_tof_offset -9.2534 0.0515 \u00b5s 3 sepd linked_phases si scale 14.6317 0.0265 4 sepd peak gauss_sigma_0 3.0000 \u00b5s\u00b2 5 sepd peak gauss_sigma_1 40.0000 \u00b5s/\u212b 6 sepd peak gauss_sigma_2 2.0000 \u00b5s\u00b2/\u212b\u00b2 In\u00a0[34]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sepd' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 3.38 10 3.21 5.0% \u2193 39 3.21 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 3.21 at iteration 38\n\u2705 Fitting complete.\n</pre> <pre>\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 6.71 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 3.21\n\ud83d\udccf R-factor (Rf): 8.99%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.52%\n\ud83d\udccf Weighted R-factor (wR): 4.88%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 si cell length_a 5.4314 5.4314 0.0000 \u00c5 0.00 % \u2191 2 sepd instrument d_to_tof_offset -9.2534 -9.2506 0.0546 \u00b5s 0.03 % \u2193 3 sepd linked_phases si scale 14.6317 14.7057 0.0257 0.51 % \u2191 4 sepd peak gauss_sigma_0 3.0000 5.7727 0.4206 \u00b5s\u00b2 92.42 % \u2191 5 sepd peak gauss_sigma_1 40.0000 44.2827 0.7966 \u00b5s/\u212b 10.71 % \u2191 6 sepd peak gauss_sigma_2 2.0000 1.2962 0.1680 \u00b5s\u00b2/\u212b\u00b2 35.19 % \u2193 In\u00a0[35]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', show_residual=True) In\u00a0[36]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True) In\u00a0[37]: Copied! <pre>model.atom_sites['Si'].b_iso.free = True\n</pre> model.atom_sites['Si'].b_iso.free = True <p>Show free parameters after selection.</p> In\u00a0[38]: Copied! <pre>project.analysis.show_free_params()\n</pre> project.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 si atom_sites Si b_iso 0.5000 \u00c5\u00b2 2 si cell length_a 5.4314 0.0000 \u00c5 3 sepd instrument d_to_tof_offset -9.2506 0.0546 \u00b5s 4 sepd linked_phases si scale 14.7057 0.0257 5 sepd peak gauss_sigma_0 5.7727 0.4206 \u00b5s\u00b2 6 sepd peak gauss_sigma_1 44.2827 0.7966 \u00b5s/\u212b 7 sepd peak gauss_sigma_2 1.2962 0.1680 \u00b5s\u00b2/\u212b\u00b2 In\u00a0[39]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sepd' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 3.21 44 3.19 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 3.19 at iteration 43\n\u2705 Fitting complete.\n</pre> <pre>\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 7.58 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 3.19\n\ud83d\udccf R-factor (Rf): 9.01%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.35%\n\ud83d\udccf Weighted R-factor (wR): 4.47%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 si atom_sites Si b_iso 0.5000 0.5201 0.0034 \u00c5\u00b2 4.02 % \u2191 2 si cell length_a 5.4314 5.4314 0.0000 \u00c5 0.00 % \u2191 3 sepd instrument d_to_tof_offset -9.2506 -9.2823 0.0548 \u00b5s 0.34 % \u2191 4 sepd linked_phases si scale 14.7057 14.8594 0.0366 1.05 % \u2191 5 sepd peak gauss_sigma_0 5.7727 4.8233 0.4394 \u00b5s\u00b2 16.45 % \u2193 6 sepd peak gauss_sigma_1 44.2827 45.2122 0.8016 \u00b5s/\u212b 2.10 % \u2191 7 sepd peak gauss_sigma_2 1.2962 1.1931 0.1667 \u00b5s\u00b2/\u212b\u00b2 7.95 % \u2193 In\u00a0[40]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', show_residual=True) In\u00a0[41]: Copied! <pre>project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='sepd', x_min=23200, x_max=23700, show_residual=True)"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#structure-refinement-si-sepd","title":"Structure Refinement: Si, SEPD\u00b6","text":"<p>This example demonstrates a Rietveld refinement of Si crystal structure using time-of-flight neutron powder diffraction data from SEPD at Argonne.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#define-sample-model","title":"Define Sample Model\u00b6","text":"<p>This section shows how to add sample models and modify their parameters.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#create-sample-model","title":"Create Sample Model\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-space-group","title":"Set Space Group\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-unit-cell","title":"Set Unit Cell\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-atom-sites","title":"Set Atom Sites\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#define-experiment","title":"Define Experiment\u00b6","text":"<p>This section shows how to add experiments, configure their parameters, and link the sample models defined in the previous step.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#download-measured-data","title":"Download Measured Data\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#create-experiment","title":"Create Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-instrument","title":"Set Instrument\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-peak-profile","title":"Set Peak Profile\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-peak-asymmetry","title":"Set Peak Asymmetry\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-background","title":"Set Background\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-linked-phases","title":"Set Linked Phases\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#define-project","title":"Define Project\u00b6","text":"<p>The project object is used to manage the sample model, experiment, and analysis.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-plotting-engine","title":"Set Plotting Engine\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#add-experiment","title":"Add Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#perform-analysis","title":"Perform Analysis\u00b6","text":"<p>This section shows the analysis process, including how to set up calculation and fitting engines.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-calculator","title":"Set Calculator\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#set-minimizer","title":"Set Minimizer\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#perform-fit-15","title":"Perform Fit 1/5\u00b6","text":"<p>Set parameters to be refined.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#perform-fit-25","title":"Perform Fit 2/5\u00b6","text":"<p>Set more parameters to be refined.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#perform-fit-35","title":"Perform Fit 3/5\u00b6","text":"<p>Fix background points.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#perform-fit-45","title":"Perform Fit 4/5\u00b6","text":"<p>Set more parameters to be refined.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_Si-SEPD/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/","title":"NCAF pd-neut-tof","text":"In\u00a0[2]: Copied! <pre>from easydiffraction import Experiment\nfrom easydiffraction import Project\nfrom easydiffraction import SampleModel\nfrom easydiffraction import download_from_repository\n</pre> from easydiffraction import Experiment from easydiffraction import Project from easydiffraction import SampleModel from easydiffraction import download_from_repository <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>model = SampleModel('ncaf')\n</pre> model = SampleModel('ncaf') In\u00a0[4]: Copied! <pre>model.space_group.name_h_m = 'I 21 3'\nmodel.space_group.it_coordinate_system_code = '1'\n</pre> model.space_group.name_h_m = 'I 21 3' model.space_group.it_coordinate_system_code = '1' In\u00a0[5]: Copied! <pre>model.cell.length_a = 10.250256\n</pre> model.cell.length_a = 10.250256 In\u00a0[6]: Copied! <pre>model.atom_sites.add('Ca', 'Ca', 0.4663, 0.0, 0.25, wyckoff_letter='b', b_iso=0.92)\nmodel.atom_sites.add('Al', 'Al', 0.2521, 0.2521, 0.2521, wyckoff_letter='a', b_iso=0.73)\nmodel.atom_sites.add('Na', 'Na', 0.0851, 0.0851, 0.0851, wyckoff_letter='a', b_iso=2.08)\nmodel.atom_sites.add('F1', 'F', 0.1377, 0.3054, 0.1195, wyckoff_letter='c', b_iso=0.90)\nmodel.atom_sites.add('F2', 'F', 0.3625, 0.3633, 0.1867, wyckoff_letter='c', b_iso=1.37)\nmodel.atom_sites.add('F3', 'F', 0.4612, 0.4612, 0.4612, wyckoff_letter='a', b_iso=0.88)\n</pre> model.atom_sites.add('Ca', 'Ca', 0.4663, 0.0, 0.25, wyckoff_letter='b', b_iso=0.92) model.atom_sites.add('Al', 'Al', 0.2521, 0.2521, 0.2521, wyckoff_letter='a', b_iso=0.73) model.atom_sites.add('Na', 'Na', 0.0851, 0.0851, 0.0851, wyckoff_letter='a', b_iso=2.08) model.atom_sites.add('F1', 'F', 0.1377, 0.3054, 0.1195, wyckoff_letter='c', b_iso=0.90) model.atom_sites.add('F2', 'F', 0.3625, 0.3633, 0.1867, wyckoff_letter='c', b_iso=1.37) model.atom_sites.add('F3', 'F', 0.4612, 0.4612, 0.4612, wyckoff_letter='a', b_iso=0.88) In\u00a0[7]: Copied! <pre>download_from_repository(\n    'wish_ncaf_5_6.xys',\n    destination='data',\n)\n</pre> download_from_repository(     'wish_ncaf_5_6.xys',     destination='data', ) <pre>\n\u26a0\ufe0f Warning\nFile 'data/wish_ncaf_5_6.xys' already exists and will not be overwritten.\n</pre> In\u00a0[8]: Copied! <pre>download_from_repository(\n    'wish_ncaf_4_7.xys',\n    destination='data',\n)\n</pre> download_from_repository(     'wish_ncaf_4_7.xys',     destination='data', ) <pre>\n\u26a0\ufe0f Warning\nFile 'data/wish_ncaf_4_7.xys' already exists and will not be overwritten.\n</pre> In\u00a0[9]: Copied! <pre>expt56 = Experiment(\n    'wish_5_6',\n    beam_mode='time-of-flight',\n    data_path='data/wish_ncaf_5_6.xys',\n)\n</pre> expt56 = Experiment(     'wish_5_6',     beam_mode='time-of-flight',     data_path='data/wish_ncaf_5_6.xys', ) <pre>\nData loaded successfully\nExperiment \ud83d\udd2c 'wish_5_6'. Number of data points: 4121\n</pre> In\u00a0[10]: Copied! <pre>expt47 = Experiment(\n    'wish_4_7',\n    beam_mode='time-of-flight',\n    data_path='data/wish_ncaf_4_7.xys',\n)\n</pre> expt47 = Experiment(     'wish_4_7',     beam_mode='time-of-flight',     data_path='data/wish_ncaf_4_7.xys', ) <pre>\nData loaded successfully\nExperiment \ud83d\udd2c 'wish_4_7'. Number of data points: 4043\n</pre> In\u00a0[11]: Copied! <pre>expt56.instrument.setup_twotheta_bank = 152.827\nexpt56.instrument.calib_d_to_tof_offset = -13.5\nexpt56.instrument.calib_d_to_tof_linear = 20773.0\nexpt56.instrument.calib_d_to_tof_quad = -1.08308\n</pre> expt56.instrument.setup_twotheta_bank = 152.827 expt56.instrument.calib_d_to_tof_offset = -13.5 expt56.instrument.calib_d_to_tof_linear = 20773.0 expt56.instrument.calib_d_to_tof_quad = -1.08308 In\u00a0[12]: Copied! <pre>expt47.instrument.setup_twotheta_bank = 121.660\nexpt47.instrument.calib_d_to_tof_offset = -15.0\nexpt47.instrument.calib_d_to_tof_linear = 18660.0\nexpt47.instrument.calib_d_to_tof_quad = -0.47488\n</pre> expt47.instrument.setup_twotheta_bank = 121.660 expt47.instrument.calib_d_to_tof_offset = -15.0 expt47.instrument.calib_d_to_tof_linear = 18660.0 expt47.instrument.calib_d_to_tof_quad = -0.47488 In\u00a0[13]: Copied! <pre>expt56.peak.broad_gauss_sigma_0 = 0.0\nexpt56.peak.broad_gauss_sigma_1 = 0.0\nexpt56.peak.broad_gauss_sigma_2 = 15.5\nexpt56.peak.broad_mix_beta_0 = 0.007\nexpt56.peak.broad_mix_beta_1 = 0.01\nexpt56.peak.asym_alpha_0 = -0.0094\nexpt56.peak.asym_alpha_1 = 0.1\n</pre> expt56.peak.broad_gauss_sigma_0 = 0.0 expt56.peak.broad_gauss_sigma_1 = 0.0 expt56.peak.broad_gauss_sigma_2 = 15.5 expt56.peak.broad_mix_beta_0 = 0.007 expt56.peak.broad_mix_beta_1 = 0.01 expt56.peak.asym_alpha_0 = -0.0094 expt56.peak.asym_alpha_1 = 0.1 In\u00a0[14]: Copied! <pre>expt47.peak.broad_gauss_sigma_0 = 0.0\nexpt47.peak.broad_gauss_sigma_1 = 29.8\nexpt47.peak.broad_gauss_sigma_2 = 18.0\nexpt47.peak.broad_mix_beta_0 = 0.006\nexpt47.peak.broad_mix_beta_1 = 0.015\nexpt47.peak.asym_alpha_0 = -0.0115\nexpt47.peak.asym_alpha_1 = 0.1\n</pre> expt47.peak.broad_gauss_sigma_0 = 0.0 expt47.peak.broad_gauss_sigma_1 = 29.8 expt47.peak.broad_gauss_sigma_2 = 18.0 expt47.peak.broad_mix_beta_0 = 0.006 expt47.peak.broad_mix_beta_1 = 0.015 expt47.peak.asym_alpha_0 = -0.0115 expt47.peak.asym_alpha_1 = 0.1 In\u00a0[15]: Copied! <pre>expt56.background_type = 'line-segment'\nfor x, y in [\n    (9162, 465),\n    (11136, 593),\n    (13313, 497),\n    (14906, 546),\n    (16454, 533),\n    (17352, 496),\n    (18743, 428),\n    (20179, 452),\n    (21368, 397),\n    (22176, 468),\n    (22827, 477),\n    (24644, 380),\n    (26439, 381),\n    (28257, 378),\n    (31196, 343),\n    (34034, 328),\n    (37265, 310),\n    (41214, 323),\n    (44827, 283),\n    (49830, 273),\n    (52905, 257),\n    (58204, 260),\n    (62916, 261),\n    (70186, 262),\n    (74204, 262),\n    (82103, 268),\n    (91958, 268),\n    (102712, 262),\n]:\n    expt56.background.add(x, y)\n</pre> expt56.background_type = 'line-segment' for x, y in [     (9162, 465),     (11136, 593),     (13313, 497),     (14906, 546),     (16454, 533),     (17352, 496),     (18743, 428),     (20179, 452),     (21368, 397),     (22176, 468),     (22827, 477),     (24644, 380),     (26439, 381),     (28257, 378),     (31196, 343),     (34034, 328),     (37265, 310),     (41214, 323),     (44827, 283),     (49830, 273),     (52905, 257),     (58204, 260),     (62916, 261),     (70186, 262),     (74204, 262),     (82103, 268),     (91958, 268),     (102712, 262), ]:     expt56.background.add(x, y) <pre>\nBackground type for experiment 'wish_5_6' changed to\nline-segment\n</pre> In\u00a0[16]: Copied! <pre>expt47.background_type = 'line-segment'\nfor x, y in [\n    (9090, 488),\n    (10672, 566),\n    (12287, 494),\n    (14037, 559),\n    (15451, 529),\n    (16764, 445),\n    (18076, 460),\n    (19456, 413),\n    (20466, 511),\n    (21880, 396),\n    (23798, 391),\n    (25447, 385),\n    (28073, 349),\n    (30058, 332),\n    (32583, 309),\n    (34804, 355),\n    (37160, 318),\n    (40324, 290),\n    (46895, 260),\n    (50631, 256),\n    (54602, 246),\n    (58439, 264),\n    (66520, 250),\n    (75002, 258),\n    (83649, 257),\n    (92770, 255),\n    (101524, 260),\n]:\n    expt47.background.add(x, y)\n</pre> expt47.background_type = 'line-segment' for x, y in [     (9090, 488),     (10672, 566),     (12287, 494),     (14037, 559),     (15451, 529),     (16764, 445),     (18076, 460),     (19456, 413),     (20466, 511),     (21880, 396),     (23798, 391),     (25447, 385),     (28073, 349),     (30058, 332),     (32583, 309),     (34804, 355),     (37160, 318),     (40324, 290),     (46895, 260),     (50631, 256),     (54602, 246),     (58439, 264),     (66520, 250),     (75002, 258),     (83649, 257),     (92770, 255),     (101524, 260), ]:     expt47.background.add(x, y) <pre>\nBackground type for experiment 'wish_4_7' changed to\nline-segment\n</pre> In\u00a0[17]: Copied! <pre>expt56.linked_phases.add('ncaf', scale=1.0)\n</pre> expt56.linked_phases.add('ncaf', scale=1.0) In\u00a0[18]: Copied! <pre>expt47.linked_phases.add('ncaf', scale=2.0)\n</pre> expt47.linked_phases.add('ncaf', scale=2.0) In\u00a0[19]: Copied! <pre>expt56.excluded_regions.add(minimum=0, maximum=10010)\nexpt56.excluded_regions.add(minimum=100010, maximum=200000)\n</pre> expt56.excluded_regions.add(minimum=0, maximum=10010) expt56.excluded_regions.add(minimum=100010, maximum=200000) In\u00a0[20]: Copied! <pre>expt47.excluded_regions.add(minimum=0, maximum=10006)\nexpt47.excluded_regions.add(minimum=100004, maximum=200000)\n</pre> expt47.excluded_regions.add(minimum=0, maximum=10006) expt47.excluded_regions.add(minimum=100004, maximum=200000) In\u00a0[21]: Copied! <pre>project = Project()\n</pre> project = Project() In\u00a0[22]: Copied! <pre>project.plotter.engine = 'plotly'\n</pre> project.plotter.engine = 'plotly' <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[23]: Copied! <pre>project.sample_models.add(model)\n</pre> project.sample_models.add(model) In\u00a0[24]: Copied! <pre>project.experiments.add(expt56)\nproject.experiments.add(expt47)\n</pre> project.experiments.add(expt56) project.experiments.add(expt47) In\u00a0[25]: Copied! <pre>project.analysis.current_calculator = 'cryspy'\n</pre> project.analysis.current_calculator = 'cryspy' <pre>\nCurrent calculator changed to\ncryspy\n</pre> In\u00a0[26]: Copied! <pre>project.analysis.current_minimizer = 'lmfit (leastsq)'\n</pre> project.analysis.current_minimizer = 'lmfit (leastsq)' <pre>\nCurrent minimizer changed to\nlmfit (leastsq)\n</pre> In\u00a0[27]: Copied! <pre>project.analysis.fit_mode = 'joint'\n</pre> project.analysis.fit_mode = 'joint' <pre>\nCurrent fit mode changed to\njoint\n</pre> In\u00a0[28]: Copied! <pre>model.atom_sites['Ca'].b_iso.free = True\nmodel.atom_sites['Al'].b_iso.free = True\nmodel.atom_sites['Na'].b_iso.free = True\nmodel.atom_sites['F1'].b_iso.free = True\nmodel.atom_sites['F2'].b_iso.free = True\nmodel.atom_sites['F3'].b_iso.free = True\n</pre> model.atom_sites['Ca'].b_iso.free = True model.atom_sites['Al'].b_iso.free = True model.atom_sites['Na'].b_iso.free = True model.atom_sites['F1'].b_iso.free = True model.atom_sites['F2'].b_iso.free = True model.atom_sites['F3'].b_iso.free = True In\u00a0[29]: Copied! <pre>expt56.linked_phases['ncaf'].scale.free = True\nexpt56.instrument.calib_d_to_tof_offset.free = True\nexpt56.instrument.calib_d_to_tof_linear.free = True\nexpt56.peak.broad_gauss_sigma_2.free = True\nexpt56.peak.broad_mix_beta_0.free = True\nexpt56.peak.broad_mix_beta_1.free = True\nexpt56.peak.asym_alpha_1.free = True\n\nexpt47.linked_phases['ncaf'].scale.free = True\nexpt47.instrument.calib_d_to_tof_linear.free = True\nexpt47.instrument.calib_d_to_tof_offset.free = True\nexpt47.peak.broad_gauss_sigma_2.free = True\nexpt47.peak.broad_mix_beta_0.free = True\nexpt47.peak.broad_mix_beta_1.free = True\nexpt47.peak.asym_alpha_1.free = True\n</pre> expt56.linked_phases['ncaf'].scale.free = True expt56.instrument.calib_d_to_tof_offset.free = True expt56.instrument.calib_d_to_tof_linear.free = True expt56.peak.broad_gauss_sigma_2.free = True expt56.peak.broad_mix_beta_0.free = True expt56.peak.broad_mix_beta_1.free = True expt56.peak.asym_alpha_1.free = True  expt47.linked_phases['ncaf'].scale.free = True expt47.instrument.calib_d_to_tof_linear.free = True expt47.instrument.calib_d_to_tof_offset.free = True expt47.peak.broad_gauss_sigma_2.free = True expt47.peak.broad_mix_beta_0.free = True expt47.peak.broad_mix_beta_1.free = True expt47.peak.asym_alpha_1.free = True In\u00a0[30]: Copied! <pre>project.plot_meas_vs_calc(expt_name='wish_5_6', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='wish_5_6', show_residual=True) In\u00a0[31]: Copied! <pre>project.plot_meas_vs_calc(expt_name='wish_4_7', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='wish_4_7', show_residual=True) In\u00a0[32]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing all experiments \ud83d\udd2c ['wish_5_6', 'wish_4_7'] for 'joint' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 47.53 24 15.57 67.2% \u2193 109 15.49 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 15.49 at iteration 98\n\u2705 Fitting complete.\n</pre> <pre>\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 61.62 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 15.49\n\ud83d\udccf R-factor (Rf): 6.98%\n\ud83d\udccf R-factor squared (Rf\u00b2): 8.05%\n\ud83d\udccf Weighted R-factor (wR): 9.15%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 ncaf atom_sites Ca b_iso 0.9200 0.9340 0.0448 \u00c5\u00b2 1.52 % \u2191 2 ncaf atom_sites Al b_iso 0.7300 0.7330 0.0569 \u00c5\u00b2 0.41 % \u2191 3 ncaf atom_sites Na b_iso 2.0800 2.0474 0.1082 \u00c5\u00b2 1.57 % \u2193 4 ncaf atom_sites F1 b_iso 0.9000 0.9389 0.0373 \u00c5\u00b2 4.32 % \u2191 5 ncaf atom_sites F2 b_iso 1.3700 1.3442 0.0408 \u00c5\u00b2 1.88 % \u2193 6 ncaf atom_sites F3 b_iso 0.8800 0.8481 0.0551 \u00c5\u00b2 3.62 % \u2193 7 wish_5_6 instrument d_to_tof_linear 20773.0000 20773.0394 0.3051 \u00b5s/\u212b 0.00 % \u2191 8 wish_5_6 instrument d_to_tof_offset -13.5000 -13.6260 0.4257 \u00b5s 0.93 % \u2191 9 wish_5_6 linked_phases ncaf scale 1.0000 1.1029 0.0035 10.29 % \u2191 10 wish_5_6 peak asym_alpha_1 0.1000 0.1094 0.0012 9.43 % \u2191 11 wish_5_6 peak gauss_sigma_2 15.5000 15.6543 0.7398 \u00b5s\u00b2/\u212b\u00b2 1.00 % \u2191 12 wish_5_6 peak mix_beta_0 0.0070 0.0067 0.0000 deg 4.54 % \u2193 13 wish_5_6 peak mix_beta_1 0.0100 0.0101 0.0002 deg 1.46 % \u2191 14 wish_4_7 instrument d_to_tof_linear 18660.0000 18660.1028 0.3625 \u00b5s/\u212b 0.00 % \u2191 15 wish_4_7 instrument d_to_tof_offset -15.0000 -14.9768 0.5084 \u00b5s 0.15 % \u2193 16 wish_4_7 linked_phases ncaf scale 2.0000 2.5216 0.0077 26.08 % \u2191 17 wish_4_7 peak asym_alpha_1 0.1000 0.1222 0.0018 22.15 % \u2191 18 wish_4_7 peak gauss_sigma_2 18.0000 18.2604 0.8685 \u00b5s\u00b2/\u212b\u00b2 1.45 % \u2191 19 wish_4_7 peak mix_beta_0 0.0060 0.0065 0.0000 deg 7.52 % \u2191 20 wish_4_7 peak mix_beta_1 0.0150 0.0148 0.0003 deg 1.38 % \u2193 In\u00a0[33]: Copied! <pre>project.plot_meas_vs_calc(expt_name='wish_5_6', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='wish_5_6', show_residual=True) In\u00a0[34]: Copied! <pre>project.plot_meas_vs_calc(expt_name='wish_4_7', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='wish_4_7', show_residual=True) In\u00a0[35]: Copied! <pre>project.summary.show_report()\n</pre> project.summary.show_report() <pre>\n*** PROJECT INFO ***\n\nTitle\nUntitled Project\n\n*** CRYSTALLOGRAPHIC DATA ***\n\nPhase datablock\n\ud83e\udde9 ncaf\n\nSpace group\nI 21 3\n\nCell parameters\n</pre> alpha 90.00000 beta 90.00000 gamma 90.00000 a 10.25026 b 10.25026 c 10.25026 <pre>\nAtom sites\n</pre> Label Type fract_x fract_y fract_z Occupancy B_iso Ca Ca 0.46630 0.00000 0.25000 1.00000 0.93400 Al Al 0.25210 0.25210 0.25210 1.00000 0.73301 Na Na 0.08510 0.08510 0.08510 1.00000 2.04740 F1 F 0.13770 0.30540 0.11950 1.00000 0.93890 F2 F 0.36250 0.36330 0.18670 1.00000 1.34424 F3 F 0.46120 0.46120 0.46120 1.00000 0.84814 <pre>\n*** EXPERIMENTS ***\n\nExperiment datablock\n\ud83d\udd2c wish_5_6\n\nExperiment type\npowder, neutron, time-of-flight\n\nProfile type\npseudo-voigt * ikeda-carpenter\n\nExperiment datablock\n\ud83d\udd2c wish_4_7\n\nExperiment type\npowder, neutron, time-of-flight\n\nProfile type\npseudo-voigt * ikeda-carpenter\n\n*** FITTING ***\n\nCalculation engine\ncryspy\n\nMinimization engine\nlmfit (leastsq)\n\nFit quality\n</pre> Goodness-of-fit (reduced \u03c7\u00b2) 15.49"},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#structure-refinement-ncaf-wish","title":"Structure Refinement: NCAF, WISH\u00b6","text":"<p>This example demonstrates a Rietveld refinement of Na2Ca3Al2F14 crystal structure using time-of-flight neutron powder diffraction data from WISH at ISIS.</p> <p>Two datasets from detector banks 5+6 and 4+7 are used for joint fitting.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#define-sample-model","title":"Define Sample Model\u00b6","text":"<p>This section covers how to add sample models and modify their parameters.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#create-sample-model","title":"Create Sample Model\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-space-group","title":"Set Space Group\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-unit-cell","title":"Set Unit Cell\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-atom-sites","title":"Set Atom Sites\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#define-experiment","title":"Define Experiment\u00b6","text":"<p>This section shows how to add experiments, configure their parameters, and link the sample models defined in the previous step.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#download-measured-data","title":"Download Measured Data\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#create-experiment","title":"Create Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-instrument","title":"Set Instrument\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-peak-profile","title":"Set Peak Profile\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-background","title":"Set Background\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-linked-phases","title":"Set Linked Phases\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-excluded-regions","title":"Set Excluded Regions\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#define-project","title":"Define Project\u00b6","text":"<p>The project object is used to manage the sample model, experiments, and analysis</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-plotting-engine","title":"Set Plotting Engine\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#add-experiment","title":"Add Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#perform-analysis","title":"Perform Analysis\u00b6","text":"<p>This section shows the analysis process, including how to set up calculation and fitting engines.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-calculator","title":"Set Calculator\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-minimizer","title":"Set Minimizer\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-fit-mode","title":"Set Fit Mode\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#set-free-parameters","title":"Set Free Parameters\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#summary","title":"Summary\u00b6","text":"<p>This final section shows how to review the results of the analysis.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multidata_NCAF-WISH/#show-project-summary","title":"Show Project Summary\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/","title":"LBCO+Si McStas","text":"In\u00a0[2]: Copied! <pre>from easydiffraction import Experiment\nfrom easydiffraction import Project\nfrom easydiffraction import SampleModel\nfrom easydiffraction import download_from_repository\n</pre> from easydiffraction import Experiment from easydiffraction import Project from easydiffraction import SampleModel from easydiffraction import download_from_repository <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>model_1 = SampleModel('lbco')\n</pre> model_1 = SampleModel('lbco') In\u00a0[4]: Copied! <pre>model_1.space_group.name_h_m = 'P m -3 m'\nmodel_1.space_group.it_coordinate_system_code = '1'\n</pre> model_1.space_group.name_h_m = 'P m -3 m' model_1.space_group.it_coordinate_system_code = '1' In\u00a0[5]: Copied! <pre>model_1.cell.length_a = 3.8909\n</pre> model_1.cell.length_a = 3.8909 In\u00a0[6]: Copied! <pre>model_1.atom_sites.add(\n    'La',\n    'La',\n    0,\n    0,\n    0,\n    wyckoff_letter='a',\n    b_iso=0.2,\n    occupancy=0.5,\n)\nmodel_1.atom_sites.add(\n    'Ba',\n    'Ba',\n    0,\n    0,\n    0,\n    wyckoff_letter='a',\n    b_iso=0.2,\n    occupancy=0.5,\n)\nmodel_1.atom_sites.add(\n    'Co',\n    'Co',\n    0.5,\n    0.5,\n    0.5,\n    wyckoff_letter='b',\n    b_iso=0.2567,\n)\nmodel_1.atom_sites.add(\n    'O',\n    'O',\n    0,\n    0.5,\n    0.5,\n    wyckoff_letter='c',\n    b_iso=1.4041,\n)\n</pre> model_1.atom_sites.add(     'La',     'La',     0,     0,     0,     wyckoff_letter='a',     b_iso=0.2,     occupancy=0.5, ) model_1.atom_sites.add(     'Ba',     'Ba',     0,     0,     0,     wyckoff_letter='a',     b_iso=0.2,     occupancy=0.5, ) model_1.atom_sites.add(     'Co',     'Co',     0.5,     0.5,     0.5,     wyckoff_letter='b',     b_iso=0.2567, ) model_1.atom_sites.add(     'O',     'O',     0,     0.5,     0.5,     wyckoff_letter='c',     b_iso=1.4041, ) In\u00a0[7]: Copied! <pre>model_2 = SampleModel('si')\n</pre> model_2 = SampleModel('si') In\u00a0[8]: Copied! <pre>model_2.space_group.name_h_m = 'F d -3 m'\nmodel_2.space_group.it_coordinate_system_code = '2'\n</pre> model_2.space_group.name_h_m = 'F d -3 m' model_2.space_group.it_coordinate_system_code = '2' In\u00a0[9]: Copied! <pre>model_2.cell.length_a = 5.43146\n</pre> model_2.cell.length_a = 5.43146 In\u00a0[10]: Copied! <pre>model_2.atom_sites.add(\n    'Si',\n    'Si',\n    0.0,\n    0.0,\n    0.0,\n    wyckoff_letter='a',\n    b_iso=0.0,\n)\n</pre> model_2.atom_sites.add(     'Si',     'Si',     0.0,     0.0,     0.0,     wyckoff_letter='a',     b_iso=0.0, ) In\u00a0[11]: Copied! <pre>download_from_repository('mcstas_lbco-si.xye', destination='data')\n</pre> download_from_repository('mcstas_lbco-si.xye', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/mcstas_lbco-si.xye' already exists and will not be overwritten.\n</pre> In\u00a0[12]: Copied! <pre>experiment = Experiment(\n    'mcstas',\n    sample_form='powder',\n    beam_mode='time-of-flight',\n    radiation_probe='neutron',\n    scattering_type='bragg',\n    data_path='data/mcstas_lbco-si.xye',\n)\n</pre> experiment = Experiment(     'mcstas',     sample_form='powder',     beam_mode='time-of-flight',     radiation_probe='neutron',     scattering_type='bragg',     data_path='data/mcstas_lbco-si.xye', ) <pre>\nData loaded successfully\nExperiment \ud83d\udd2c 'mcstas'. Number of data points: 1000\n</pre> In\u00a0[13]: Copied! <pre>experiment.instrument.setup_twotheta_bank = 94.90931761529106\nexperiment.instrument.calib_d_to_tof_offset = 0.0\nexperiment.instrument.calib_d_to_tof_linear = 58724.76869981215\nexperiment.instrument.calib_d_to_tof_quad = -0.00001\n</pre> experiment.instrument.setup_twotheta_bank = 94.90931761529106 experiment.instrument.calib_d_to_tof_offset = 0.0 experiment.instrument.calib_d_to_tof_linear = 58724.76869981215 experiment.instrument.calib_d_to_tof_quad = -0.00001 In\u00a0[14]: Copied! <pre># experiment.peak_profile_type = 'pseudo-voigt * ikeda-carpenter'\nexperiment.peak.broad_gauss_sigma_0 = 45137\nexperiment.peak.broad_gauss_sigma_1 = -52394\nexperiment.peak.broad_gauss_sigma_2 = 22998\nexperiment.peak.broad_mix_beta_0 = 0.0055\nexperiment.peak.broad_mix_beta_1 = 0.0041\nexperiment.peak.asym_alpha_0 = 0\nexperiment.peak.asym_alpha_1 = 0.0097\n</pre> # experiment.peak_profile_type = 'pseudo-voigt * ikeda-carpenter' experiment.peak.broad_gauss_sigma_0 = 45137 experiment.peak.broad_gauss_sigma_1 = -52394 experiment.peak.broad_gauss_sigma_2 = 22998 experiment.peak.broad_mix_beta_0 = 0.0055 experiment.peak.broad_mix_beta_1 = 0.0041 experiment.peak.asym_alpha_0 = 0 experiment.peak.asym_alpha_1 = 0.0097 <p>Select the background type.</p> In\u00a0[15]: Copied! <pre>experiment.background_type = 'line-segment'\n</pre> experiment.background_type = 'line-segment' <pre>\nBackground type for experiment 'mcstas' changed to\nline-segment\n</pre> <p>Add background points.</p> In\u00a0[16]: Copied! <pre>experiment.background.add(x=45000, y=0.2)\nexperiment.background.add(x=50000, y=0.2)\nexperiment.background.add(x=55000, y=0.2)\nexperiment.background.add(x=65000, y=0.2)\nexperiment.background.add(x=70000, y=0.2)\nexperiment.background.add(x=75000, y=0.2)\nexperiment.background.add(x=80000, y=0.2)\nexperiment.background.add(x=85000, y=0.2)\nexperiment.background.add(x=90000, y=0.2)\nexperiment.background.add(x=95000, y=0.2)\nexperiment.background.add(x=100000, y=0.2)\nexperiment.background.add(x=105000, y=0.2)\nexperiment.background.add(x=110000, y=0.2)\n</pre> experiment.background.add(x=45000, y=0.2) experiment.background.add(x=50000, y=0.2) experiment.background.add(x=55000, y=0.2) experiment.background.add(x=65000, y=0.2) experiment.background.add(x=70000, y=0.2) experiment.background.add(x=75000, y=0.2) experiment.background.add(x=80000, y=0.2) experiment.background.add(x=85000, y=0.2) experiment.background.add(x=90000, y=0.2) experiment.background.add(x=95000, y=0.2) experiment.background.add(x=100000, y=0.2) experiment.background.add(x=105000, y=0.2) experiment.background.add(x=110000, y=0.2) In\u00a0[17]: Copied! <pre>experiment.linked_phases.add('lbco', scale=4.0)\nexperiment.linked_phases.add('si', scale=0.2)\n</pre> experiment.linked_phases.add('lbco', scale=4.0) experiment.linked_phases.add('si', scale=0.2) In\u00a0[18]: Copied! <pre>project = Project()\n</pre> project = Project() In\u00a0[19]: Copied! <pre>project.plotter.engine = 'plotly'\n</pre> project.plotter.engine = 'plotly' <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[20]: Copied! <pre>project.sample_models.add(model_1)\nproject.sample_models.add(model_2)\n</pre> project.sample_models.add(model_1) project.sample_models.add(model_2) In\u00a0[21]: Copied! <pre>project.sample_models.show_names()\n</pre> project.sample_models.show_names() <pre>\nDefined sample models \ud83e\udde9\n['lbco', 'si']\n</pre> In\u00a0[22]: Copied! <pre>project.experiments.add(experiment)\n</pre> project.experiments.add(experiment) In\u00a0[23]: Copied! <pre>project.plot_meas(expt_name='mcstas')\n</pre> project.plot_meas(expt_name='mcstas') <p>Add excluded regions.</p> In\u00a0[24]: Copied! <pre>experiment.excluded_regions.add(minimum=0, maximum=40000)\nexperiment.excluded_regions.add(minimum=108000, maximum=200000)\n</pre> experiment.excluded_regions.add(minimum=0, maximum=40000) experiment.excluded_regions.add(minimum=108000, maximum=200000) <p>Show excluded regions.</p> In\u00a0[25]: Copied! <pre>experiment.excluded_regions.show()\n</pre> experiment.excluded_regions.show() <pre>\nExcluded regions\n</pre> minimum maximum 0 40000 108000 200000 <p>Show measured data after adding excluded regions.</p> In\u00a0[26]: Copied! <pre>project.plot_meas(expt_name='mcstas')\n</pre> project.plot_meas(expt_name='mcstas') <p>Show experiment as CIF.</p> In\u00a0[27]: Copied! <pre>project.experiments['mcstas'].show_as_cif()\n</pre> project.experiments['mcstas'].show_as_cif() <pre>\nExperiment \ud83d\udd2c 'mcstas' as cif\n</pre> data_mcstas _expt_type.beam_mode  time-of-flight _expt_type.radiation_probe  neutron _expt_type.sample_form  powder _expt_type.scattering_type  bragg _instr.d_to_tof_linear  58724.76869981215 _instr.d_to_tof_offset  0.0 _instr.d_to_tof_quad  -1e-05 _instr.d_to_tof_recip  0.0 _instr.2theta_bank  94.90931761529106 _peak.asym_alpha_0  0 _peak.asym_alpha_1  0.0097 _peak.gauss_sigma_0  45137 _peak.gauss_sigma_1  -52394 _peak.gauss_sigma_2  22998 _peak.lorentz_gamma_0  0.0 _peak.lorentz_gamma_1  0.0 _peak.lorentz_gamma_2  0.0 _peak.mix_beta_0  0.0055 _peak.mix_beta_1  0.0041 loop_ _pd_phase_block.id _pd_phase_block.scale lbco 4.0 si 0.2 loop_ _pd_background.line_segment_X _pd_background.line_segment_intensity 45000 0.2 50000 0.2 55000 0.2 65000 0.2 70000 0.2 75000 0.2 80000 0.2 85000 0.2 90000 0.2 95000 0.2 100000 0.2 105000 0.2 110000 0.2 loop_ _excluded_region.maximum _excluded_region.minimum 40000 0 200000 108000 loop_ _pd_meas.2theta_scan _pd_meas.intensity_total _pd_meas.intensity_total_su 41168.1286 0.21537107469310052 0.024851140698641586 41273.8536 0.2608731253560513 0.03329888041963864 41379.5785 0.3043368615904641 0.0354708759178845 41485.3035 0.473667080481105 0.04206283617542718 41591.0285 0.6002651986502522 0.04196647994561225 ... 107563.4097 0.2230171962356684 0.007062820875646159 107669.1347 0.2196314236755727 0.007156715455880738 107774.8597 0.22676234246085125 0.00713080922521723 107880.5847 0.21245260466359916 0.006812625277766074 107986.3096 0.21452950815000962 0.006898412477966333 In\u00a0[28]: Copied! <pre>project.analysis.current_calculator = 'cryspy'\n</pre> project.analysis.current_calculator = 'cryspy' <pre>\nCurrent calculator changed to\ncryspy\n</pre> In\u00a0[29]: Copied! <pre>project.analysis.current_minimizer = 'lmfit (leastsq)'\n</pre> project.analysis.current_minimizer = 'lmfit (leastsq)' <pre>\nCurrent minimizer changed to\nlmfit (leastsq)\n</pre> In\u00a0[30]: Copied! <pre>model_1.cell.length_a.free = True\nmodel_1.atom_sites['Co'].b_iso.free = True\nmodel_1.atom_sites['O'].b_iso.free = True\n\nmodel_2.cell.length_a.free = True\n</pre> model_1.cell.length_a.free = True model_1.atom_sites['Co'].b_iso.free = True model_1.atom_sites['O'].b_iso.free = True  model_2.cell.length_a.free = True <p>Set experiment parameters to be optimized.</p> In\u00a0[31]: Copied! <pre>experiment.linked_phases['lbco'].scale.free = True\nexperiment.linked_phases['si'].scale.free = True\n\nexperiment.peak.broad_gauss_sigma_0.free = True\nexperiment.peak.broad_gauss_sigma_1.free = True\nexperiment.peak.broad_gauss_sigma_2.free = True\n\nexperiment.peak.asym_alpha_1.free = True\nexperiment.peak.broad_mix_beta_0.free = True\nexperiment.peak.broad_mix_beta_1.free = True\n\nfor point in experiment.background:\n    point.y.free = True\n</pre> experiment.linked_phases['lbco'].scale.free = True experiment.linked_phases['si'].scale.free = True  experiment.peak.broad_gauss_sigma_0.free = True experiment.peak.broad_gauss_sigma_1.free = True experiment.peak.broad_gauss_sigma_2.free = True  experiment.peak.asym_alpha_1.free = True experiment.peak.broad_mix_beta_0.free = True experiment.peak.broad_mix_beta_1.free = True  for point in experiment.background:     point.y.free = True In\u00a0[32]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'mcstas' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 301.41 29 3.36 98.9% \u2193 55 3.24 3.7% \u2193 134 3.24 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 3.24 at iteration 133\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 1.99 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 3.24\n\ud83d\udccf R-factor (Rf): 4.76%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.16%\n\ud83d\udccf Weighted R-factor (wR): 5.22%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco atom_sites Co b_iso 0.2567 0.3233 0.0853 \u00c5\u00b2 25.94 % \u2191 2 lbco atom_sites O b_iso 1.4041 2.1686 0.0282 \u00c5\u00b2 54.45 % \u2191 3 lbco cell length_a 3.8909 3.8904 0.0001 \u00c5 0.01 % \u2193 4 si cell length_a 5.4315 5.4327 0.0006 \u00c5 0.02 % \u2191 5 mcstas background 45000 y 0.2000 0.2502 0.0082 25.09 % \u2191 6 mcstas background 50000 y 0.2000 0.2498 0.0080 24.91 % \u2191 7 mcstas background 55000 y 0.2000 0.2674 0.0047 33.68 % \u2191 8 mcstas background 65000 y 0.2000 0.2551 0.0036 27.53 % \u2191 9 mcstas background 70000 y 0.2000 0.2463 0.0035 23.17 % \u2191 10 mcstas background 75000 y 0.2000 0.2417 0.0027 20.86 % \u2191 11 mcstas background 80000 y 0.2000 0.2421 0.0033 21.07 % \u2191 12 mcstas background 85000 y 0.2000 0.2374 0.0021 18.71 % \u2191 13 mcstas background 90000 y 0.2000 0.2381 0.0020 19.07 % \u2191 14 mcstas background 95000 y 0.2000 0.2423 0.0025 21.14 % \u2191 15 mcstas background 100000 y 0.2000 0.2258 0.0022 12.88 % \u2191 16 mcstas background 105000 y 0.2000 0.2228 0.0026 11.40 % \u2191 17 mcstas background 110000 y 0.2000 0.2225 0.0078 11.23 % \u2191 18 mcstas linked_phases lbco scale 4.0000 4.5577 0.0318 13.94 % \u2191 19 mcstas linked_phases si scale 0.2000 0.0314 0.0008 84.28 % \u2193 20 mcstas peak asym_alpha_1 0.0097 0.0097 0.0002 0.40 % \u2193 21 mcstas peak gauss_sigma_0 45137.0000 45210.8969 2868.4651 \u00b5s\u00b2 0.16 % \u2191 22 mcstas peak gauss_sigma_1 -52394.0000 -52476.8991 3797.9256 \u00b5s/\u212b 0.16 % \u2191 23 mcstas peak gauss_sigma_2 22998.0000 23014.3392 1193.4306 \u00b5s\u00b2/\u212b\u00b2 0.07 % \u2191 24 mcstas peak mix_beta_0 0.0055 0.0055 0.0001 deg 0.64 % \u2191 25 mcstas peak mix_beta_1 0.0041 0.0041 0.0003 deg 0.32 % \u2193 In\u00a0[33]: Copied! <pre>project.plot_meas_vs_calc(expt_name='mcstas')\n</pre> project.plot_meas_vs_calc(expt_name='mcstas')"},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#structure-refinement-lbcosi-mcstas","title":"Structure Refinement: LBCO+Si, McStas\u00b6","text":"<p>This example demonstrates a Rietveld refinement of La0.5Ba0.5CoO3 crystal structure with a small amount of Si phase using time-of-flight neutron powder diffraction data simulated with McStas.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#define-sample-models","title":"Define Sample Models\u00b6","text":"<p>This section shows how to add sample models and modify their parameters.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#create-sample-model-1-lbco","title":"Create Sample Model 1: LBCO\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-space-group","title":"Set Space Group\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-unit-cell","title":"Set Unit Cell\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-atom-sites","title":"Set Atom Sites\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#create-sample-model-2-si","title":"Create Sample Model 2: Si\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-space-group","title":"Set Space Group\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-unit-cell","title":"Set Unit Cell\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-atom-sites","title":"Set Atom Sites\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#define-experiment","title":"Define Experiment\u00b6","text":"<p>This section shows how to add experiments, configure their parameters, and link the sample models defined in the previous step.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#download-data","title":"Download Data\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#create-experiment","title":"Create Experiment\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-instrument","title":"Set Instrument\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-peak-profile","title":"Set Peak Profile\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-background","title":"Set Background\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-linked-phases","title":"Set Linked Phases\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#define-project","title":"Define Project\u00b6","text":"<p>The project object is used to manage sample models, experiments, and analysis.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-plotting-engine","title":"Set Plotting Engine\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#add-sample-models","title":"Add Sample Models\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#show-sample-models","title":"Show Sample Models\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#add-experiments","title":"Add Experiments\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-excluded-regions","title":"Set Excluded Regions\u00b6","text":"<p>Show measured data as loaded from the file.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#perform-analysis","title":"Perform Analysis\u00b6","text":"<p>This section outlines the analysis process, including how to configure calculation and fitting engines.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-calculator","title":"Set Calculator\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-minimizer","title":"Set Minimizer\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#set-fitting-parameters","title":"Set Fitting Parameters\u00b6","text":"<p>Set sample model parameters to be optimized.</p>"},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#perform-fit","title":"Perform Fit\u00b6","text":""},{"location":"tutorials/cryst-struct_pd-neut-tof_multiphase-LBCO-Si_McStas/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/","title":"2025 DMSC","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>project_1 = ed.Project(name='reference')\n</pre> project_1 = ed.Project(name='reference') <p>You can set the title and description of the project to provide context and information about the analysis being performed. This is useful for documentation purposes and helps others (or yourself in the future) understand the purpose of the project at a glance.</p> In\u00a0[4]: Copied! <pre>project_1.info.title = 'Reference Silicon Fit'\nproject_1.info.description = 'Fitting simulated powder diffraction pattern of Si.'\n</pre> project_1.info.title = 'Reference Silicon Fit' project_1.info.description = 'Fitting simulated powder diffraction pattern of Si.' In\u00a0[5]: Copied! <pre>si_xye_path = '../4-reduction/reduced_Si.xye'\n</pre> si_xye_path = '../4-reduction/reduced_Si.xye' <p>Use the following cell if your data reduction failed and the reduced data file is missing. In this case, you can download our pre-generated reduced data file from the EasyDiffraction repository.</p> <p>The <code>download_from_repository</code> function will not overwrite an existing file unless you set <code>overwrite=True</code>, so it's safe to run even if the file is already present.</p> In\u00a0[6]: Copied! <pre>ed.download_from_repository('reduced_Si.xye', destination='../4-reduction')\n</pre> ed.download_from_repository('reduced_Si.xye', destination='../4-reduction') <pre>Downloading data from 'https://raw.githubusercontent.com/easyscience/diffraction-lib/refs/heads/docs/tutorials/data/reduced_Si.xye' to file '/Users/runner/work/diffraction-lib/diffraction-lib/docs/4-reduction/reduced_Si.xye'.\n</pre> <pre>SHA256 hash of downloaded file: b9d6ea9e186dce9f37b174f7c04fbefd04c72a962de9814e12c865533fbb9a94\nUse this value as the 'known_hash' argument of 'pooch.retrieve' to ensure that the file hasn't changed if it is downloaded again in the future.\n</pre> <p>Now we can create the experiment and load the measured data.</p> In\u00a0[7]: Copied! <pre>project_1.experiments.add(\n    name='sim_si',\n    sample_form='powder',\n    beam_mode='time-of-flight',\n    radiation_probe='neutron',\n    data_path=si_xye_path,\n)\n</pre> project_1.experiments.add(     name='sim_si',     sample_form='powder',     beam_mode='time-of-flight',     radiation_probe='neutron',     data_path=si_xye_path, ) <pre>\nLoading measured data from ASCII file\n/Users/runner/work/diffraction-lib/diffraction-lib/docs/4-reduction/reduced_Si.xye\n\nData loaded successfully\nExperiment \ud83d\udd2c 'sim_si'. Number of data points: 900\n</pre> In\u00a0[8]: Copied! <pre>project_1.plotter.engine = 'plotly'\n</pre> project_1.plotter.engine = 'plotly' <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[9]: Copied! <pre>project_1.plot_meas(expt_name='sim_si')\n</pre> project_1.plot_meas(expt_name='sim_si') <p>If you zoom in on the highest TOF peak (around 120,000 \u03bcs), you will notice that it has a broad and unusual shape. This distortion, along with some more effects on the low TOF peaks, is a result of the simplified data reduction process. Obtaining a more accurate diffraction pattern would require a more advanced data reduction, which is beyond the scope of this tutorial. Therefore, we will simply exclude both the low and high TOF regions from the analysis by adding an excluded regions to the experiment.</p> In\u00a0[10]: Copied! <pre>project_1.experiments['sim_si'].excluded_regions.add(minimum=0, maximum=55000)\nproject_1.experiments['sim_si'].excluded_regions.add(minimum=105500, maximum=200000)\n</pre> project_1.experiments['sim_si'].excluded_regions.add(minimum=0, maximum=55000) project_1.experiments['sim_si'].excluded_regions.add(minimum=105500, maximum=200000) <p>To visualize the effect of excluding the high TOF region, we can plot the measured data again. The excluded region will be omitted from the plot and is not used in the fitting process.</p> In\u00a0[11]: Copied! <pre>project_1.plot_meas(expt_name='sim_si')\n</pre> project_1.plot_meas(expt_name='sim_si') In\u00a0[12]: Copied! <pre>project_1.experiments['sim_si'].instrument.setup_twotheta_bank = ed.get_value_from_xye_header(si_xye_path, 'two_theta')\nproject_1.experiments['sim_si'].instrument.calib_d_to_tof_linear = ed.get_value_from_xye_header(si_xye_path, 'DIFC')\n</pre> project_1.experiments['sim_si'].instrument.setup_twotheta_bank = ed.get_value_from_xye_header(si_xye_path, 'two_theta') project_1.experiments['sim_si'].instrument.calib_d_to_tof_linear = ed.get_value_from_xye_header(si_xye_path, 'DIFC') <p>Every parameters is an object, which has different attributes, such as <code>value</code>, <code>free</code>, etc. To display the parameter of interest, you can simply print the parameter object. For example, to display the linear conversion factor from d-spacing to TOF, which is the <code>calib_d_to_tof_linear</code> parameter, you can use the following code:</p> In\u00a0[13]: Copied! <pre>print(project_1.experiments['sim_si'].instrument.calib_d_to_tof_linear)\n</pre> print(project_1.experiments['sim_si'].instrument.calib_d_to_tof_linear) <pre>Parameter: sim_si.instr.d_to_tof_linear = 61445.893309194034 \u00b5s/\u212b\n</pre> <p>The <code>value</code> attribute represents the current value of the parameter as a float. You can access it directly by using the <code>value</code> attribute of the parameter. This is useful when you want to use the parameter value in calculations or when you want to assign it to another parameter. For example, to get only the value of the same parameter as floating point number, but not the whole object, you can do the following:</p> In\u00a0[14]: Copied! <pre>print(project_1.experiments['sim_si'].instrument.calib_d_to_tof_linear.value)\n</pre> print(project_1.experiments['sim_si'].instrument.calib_d_to_tof_linear.value) <pre>61445.893309194034\n</pre> <p>Note that to set the value of the parameter, you can simply assign a new value to the parameter object without using the <code>value</code> attribute, as we did above.</p> In\u00a0[15]: Copied! <pre>project_1.experiments['sim_si'].peak_profile_type = 'pseudo-voigt * ikeda-carpenter'\nproject_1.experiments['sim_si'].peak.broad_gauss_sigma_0 = 69498\nproject_1.experiments['sim_si'].peak.broad_gauss_sigma_1 = -55578\nproject_1.experiments['sim_si'].peak.broad_gauss_sigma_2 = 14560\nproject_1.experiments['sim_si'].peak.broad_mix_beta_0 = 0.0019\nproject_1.experiments['sim_si'].peak.broad_mix_beta_1 = 0.0137\nproject_1.experiments['sim_si'].peak.asym_alpha_0 = -0.0055\nproject_1.experiments['sim_si'].peak.asym_alpha_1 = 0.0147\n</pre> project_1.experiments['sim_si'].peak_profile_type = 'pseudo-voigt * ikeda-carpenter' project_1.experiments['sim_si'].peak.broad_gauss_sigma_0 = 69498 project_1.experiments['sim_si'].peak.broad_gauss_sigma_1 = -55578 project_1.experiments['sim_si'].peak.broad_gauss_sigma_2 = 14560 project_1.experiments['sim_si'].peak.broad_mix_beta_0 = 0.0019 project_1.experiments['sim_si'].peak.broad_mix_beta_1 = 0.0137 project_1.experiments['sim_si'].peak.asym_alpha_0 = -0.0055 project_1.experiments['sim_si'].peak.asym_alpha_1 = 0.0147 <pre>\nPeak profile type for experiment 'sim_si' changed to\npseudo-voigt * ikeda-carpenter\n</pre> In\u00a0[16]: Copied! <pre>project_1.experiments['sim_si'].background_type = 'line-segment'\nproject_1.experiments['sim_si'].background.add(x=50000, y=0.01)\nproject_1.experiments['sim_si'].background.add(x=60000, y=0.01)\nproject_1.experiments['sim_si'].background.add(x=70000, y=0.01)\nproject_1.experiments['sim_si'].background.add(x=80000, y=0.01)\nproject_1.experiments['sim_si'].background.add(x=90000, y=0.01)\nproject_1.experiments['sim_si'].background.add(x=100000, y=0.01)\nproject_1.experiments['sim_si'].background.add(x=110000, y=0.01)\n</pre> project_1.experiments['sim_si'].background_type = 'line-segment' project_1.experiments['sim_si'].background.add(x=50000, y=0.01) project_1.experiments['sim_si'].background.add(x=60000, y=0.01) project_1.experiments['sim_si'].background.add(x=70000, y=0.01) project_1.experiments['sim_si'].background.add(x=80000, y=0.01) project_1.experiments['sim_si'].background.add(x=90000, y=0.01) project_1.experiments['sim_si'].background.add(x=100000, y=0.01) project_1.experiments['sim_si'].background.add(x=110000, y=0.01) <pre>\nBackground type for experiment 'sim_si' changed to\nline-segment\n</pre> <pre><code>data_si\n\n_space_group.name_H-M_alt  \"F d -3 m\"\n_space_group.IT_coordinate_system_code  2\n\n_cell.length_a      5.43\n_cell.length_b      5.43\n_cell.length_c      5.43\n_cell.angle_alpha  90.0\n_cell.angle_beta   90.0\n_cell.angle_gamma  90.0\n\nloop_\n_atom_site.label\n_atom_site.type_symbol\n_atom_site.fract_x\n_atom_site.fract_y\n_atom_site.fract_z\n_atom_site.wyckoff_letter\n_atom_site.occupancy\n_atom_site.ADP_type\n_atom_site.B_iso_or_equiv\nSi Si   0 0 0   a  1.0   Biso 0.89\n</code></pre> <p>As with adding the experiment in the previous step, we will create a default sample model and then modify its parameters to match the Si structure.</p> In\u00a0[17]: Copied! <pre>project_1.sample_models.add(name='si')\n</pre> project_1.sample_models.add(name='si') In\u00a0[18]: Copied! <pre>project_1.sample_models['si'].space_group.name_h_m = 'F d -3 m'\nproject_1.sample_models['si'].space_group.it_coordinate_system_code = '2'\n</pre> project_1.sample_models['si'].space_group.name_h_m = 'F d -3 m' project_1.sample_models['si'].space_group.it_coordinate_system_code = '2' In\u00a0[19]: Copied! <pre>project_1.sample_models['si'].cell.length_a = 5.43\n</pre> project_1.sample_models['si'].cell.length_a = 5.43 In\u00a0[20]: Copied! <pre>project_1.sample_models['si'].atom_sites.add(\n    label='Si',\n    type_symbol='Si',\n    fract_x=0,\n    fract_y=0,\n    fract_z=0,\n    wyckoff_letter='a',\n    b_iso=0.89,\n)\n</pre> project_1.sample_models['si'].atom_sites.add(     label='Si',     type_symbol='Si',     fract_x=0,     fract_y=0,     fract_z=0,     wyckoff_letter='a',     b_iso=0.89, ) In\u00a0[21]: Copied! <pre>project_1.experiments['sim_si'].linked_phases.add(id='si', scale=1.0)\n</pre> project_1.experiments['sim_si'].linked_phases.add(id='si', scale=1.0) In\u00a0[22]: Copied! <pre>project_1.experiments['sim_si'].linked_phases['si'].scale.free = True\n\nfor line_segment in project_1.experiments['sim_si'].background:\n    line_segment.y.free = True\n\nproject_1.experiments['sim_si'].peak.broad_gauss_sigma_0.free = True\nproject_1.experiments['sim_si'].peak.broad_gauss_sigma_1.free = True\nproject_1.experiments['sim_si'].peak.broad_gauss_sigma_2.free = True\nproject_1.experiments['sim_si'].peak.broad_mix_beta_0.free = True\nproject_1.experiments['sim_si'].peak.broad_mix_beta_1.free = True\nproject_1.experiments['sim_si'].peak.asym_alpha_0.free = True\nproject_1.experiments['sim_si'].peak.asym_alpha_1.free = True\n</pre> project_1.experiments['sim_si'].linked_phases['si'].scale.free = True  for line_segment in project_1.experiments['sim_si'].background:     line_segment.y.free = True  project_1.experiments['sim_si'].peak.broad_gauss_sigma_0.free = True project_1.experiments['sim_si'].peak.broad_gauss_sigma_1.free = True project_1.experiments['sim_si'].peak.broad_gauss_sigma_2.free = True project_1.experiments['sim_si'].peak.broad_mix_beta_0.free = True project_1.experiments['sim_si'].peak.broad_mix_beta_1.free = True project_1.experiments['sim_si'].peak.asym_alpha_0.free = True project_1.experiments['sim_si'].peak.asym_alpha_1.free = True In\u00a0[23]: Copied! <pre>project_1.analysis.show_free_params()\n</pre> project_1.analysis.show_free_params() <pre>\nFree parameters for both sample models (\ud83e\udde9 data blocks) and experiments (\ud83d\udd2c data blocks)\n</pre> datablock category entry parameter value uncertainty min max units 1 sim_si background 50000 y 0.0100 2 sim_si background 60000 y 0.0100 3 sim_si background 70000 y 0.0100 4 sim_si background 80000 y 0.0100 5 sim_si background 90000 y 0.0100 6 sim_si background 100000 y 0.0100 7 sim_si background 110000 y 0.0100 8 sim_si linked_phases si scale 1.0000 9 sim_si peak asym_alpha_0 -0.0055 10 sim_si peak asym_alpha_1 0.0147 11 sim_si peak gauss_sigma_0 69498.0000 \u00b5s\u00b2 12 sim_si peak gauss_sigma_1 -55578.0000 \u00b5s/\u212b 13 sim_si peak gauss_sigma_2 14560.0000 \u00b5s\u00b2/\u212b\u00b2 14 sim_si peak mix_beta_0 0.0019 deg 15 sim_si peak mix_beta_1 0.0137 deg In\u00a0[24]: Copied! <pre>project_1.plot_meas_vs_calc(expt_name='sim_si')\n</pre> project_1.plot_meas_vs_calc(expt_name='sim_si') In\u00a0[25]: Copied! <pre>project_1.analysis.fit()\n</pre> project_1.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sim_si' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 33.88 19 4.11 87.9% \u2193 35 2.33 43.4% \u2193 116 2.31 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 2.31 at iteration 115\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 0.57 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 2.31\n\ud83d\udccf R-factor (Rf): 6.87%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.52%\n\ud83d\udccf Weighted R-factor (wR): 5.60%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 sim_si background 50000 y 0.0100 -0.0094 0.0068 193.92 % \u2193 2 sim_si background 60000 y 0.0100 0.0051 0.0014 49.32 % \u2193 3 sim_si background 70000 y 0.0100 0.0225 0.0016 125.05 % \u2191 4 sim_si background 80000 y 0.0100 0.0242 0.0014 142.07 % \u2191 5 sim_si background 90000 y 0.0100 0.0247 0.0010 147.08 % \u2191 6 sim_si background 100000 y 0.0100 0.0226 0.0017 125.88 % \u2191 7 sim_si background 110000 y 0.0100 0.0192 0.0040 91.73 % \u2191 8 sim_si linked_phases si scale 1.0000 1.4540 0.0071 45.40 % \u2191 9 sim_si peak asym_alpha_0 -0.0055 -0.0066 0.0005 20.30 % \u2191 10 sim_si peak asym_alpha_1 0.0147 0.0159 0.0007 7.87 % \u2191 11 sim_si peak gauss_sigma_0 69498.0000 87503.6603 7064.8898 \u00b5s\u00b2 25.91 % \u2191 12 sim_si peak gauss_sigma_1 -55578.0000 -66953.2238 8731.0313 \u00b5s/\u212b 20.47 % \u2191 13 sim_si peak gauss_sigma_2 14560.0000 16276.4795 2444.4594 \u00b5s\u00b2/\u212b\u00b2 11.79 % \u2191 14 sim_si peak mix_beta_0 0.0019 0.0008 0.0001 deg 58.68 % \u2193 15 sim_si peak mix_beta_1 0.0137 0.0190 0.0010 deg 38.42 % \u2191 In\u00a0[26]: Copied! <pre>project_1.plot_meas_vs_calc(expt_name='sim_si')\n</pre> project_1.plot_meas_vs_calc(expt_name='sim_si') In\u00a0[27]: Copied! <pre>project_1.plot_meas_vs_calc(expt_name='sim_si', d_spacing=True)\n</pre> project_1.plot_meas_vs_calc(expt_name='sim_si', d_spacing=True) <p>As you can see, the calculated diffraction pattern now matches the measured pattern much more closely. Typically, additional parameters are included in the refinement process to further improve the fit. However, we will stop here, as the goal of this part of the tutorial is to demonstrate that the data reduction and fitting process function correctly. The fit is not perfect, but it is sufficient to show that the fitting process works and that the parameters are being adjusted appropriately. The next part of the tutorial will be more advanced and will involve fitting a more complex crystal structure: La\u2080.\u2085Ba\u2080.\u2085CoO\u2083 (LBCO).</p> In\u00a0[28]: Copied! <pre>project_2 = ed.Project(name='main')\nproject_2.info.title = 'La0.5Ba0.5CoO3 Fit'\nproject_2.info.description = 'Fitting simulated powder diffraction pattern of La0.5Ba0.5CoO3.'\n</pre> project_2 = ed.Project(name='main') project_2.info.title = 'La0.5Ba0.5CoO3 Fit' project_2.info.description = 'Fitting simulated powder diffraction pattern of La0.5Ba0.5CoO3.' In\u00a0[29]: Copied! <pre>lbco_xye_path = '../4-reduction/reduced_LBCO.xye'\n</pre> lbco_xye_path = '../4-reduction/reduced_LBCO.xye' In\u00a0[30]: Copied! <pre>ed.download_from_repository('reduced_LBCO.xye', destination='../4-reduction')\n</pre> ed.download_from_repository('reduced_LBCO.xye', destination='../4-reduction') <pre>Downloading data from 'https://raw.githubusercontent.com/easyscience/diffraction-lib/refs/heads/docs/tutorials/data/reduced_LBCO.xye' to file '/Users/runner/work/diffraction-lib/diffraction-lib/docs/4-reduction/reduced_LBCO.xye'.\n</pre> <pre>SHA256 hash of downloaded file: fcc6dc02e8a3d42705413ebd45731874390510b676b70ce98d020873caf78278\nUse this value as the 'known_hash' argument of 'pooch.retrieve' to ensure that the file hasn't changed if it is downloaded again in the future.\n</pre> In\u00a0[31]: Copied! <pre>project_2.experiments.add(\n    name='sim_lbco',\n    sample_form='powder',\n    beam_mode='time-of-flight',\n    radiation_probe='neutron',\n    data_path=lbco_xye_path,\n)\n</pre> project_2.experiments.add(     name='sim_lbco',     sample_form='powder',     beam_mode='time-of-flight',     radiation_probe='neutron',     data_path=lbco_xye_path, ) <pre>\nLoading measured data from ASCII file\n/Users/runner/work/diffraction-lib/diffraction-lib/docs/4-reduction/reduced_LBCO.xye\n\nData loaded successfully\nExperiment \ud83d\udd2c 'sim_lbco'. Number of data points: 900\n</pre> In\u00a0[32]: Copied! <pre>project_2.plotter.engine = 'plotly'\nproject_2.plot_meas(expt_name='sim_lbco')\n</pre> project_2.plotter.engine = 'plotly' project_2.plot_meas(expt_name='sim_lbco') <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[33]: Copied! <pre>project_2.experiments['sim_lbco'].excluded_regions.add(minimum=0, maximum=55000)\nproject_2.experiments['sim_lbco'].excluded_regions.add(minimum=105500, maximum=200000)\n</pre> project_2.experiments['sim_lbco'].excluded_regions.add(minimum=0, maximum=55000) project_2.experiments['sim_lbco'].excluded_regions.add(minimum=105500, maximum=200000) In\u00a0[34]: Copied! <pre>project_2.plot_meas(expt_name='sim_lbco')\n</pre> project_2.plot_meas(expt_name='sim_lbco') In\u00a0[35]: Copied! <pre>project_2.experiments['sim_lbco'].instrument.setup_twotheta_bank = ed.get_value_from_xye_header(lbco_xye_path, 'two_theta')\nproject_2.experiments['sim_lbco'].instrument.calib_d_to_tof_linear = ed.get_value_from_xye_header(lbco_xye_path, 'DIFC')\n</pre> project_2.experiments['sim_lbco'].instrument.setup_twotheta_bank = ed.get_value_from_xye_header(lbco_xye_path, 'two_theta') project_2.experiments['sim_lbco'].instrument.calib_d_to_tof_linear = ed.get_value_from_xye_header(lbco_xye_path, 'DIFC') In\u00a0[36]: Copied! <pre>project_2.peak_profile_type = 'pseudo-voigt * ikeda-carpenter'\nproject_2.experiments['sim_lbco'].peak.broad_gauss_sigma_0 = project_1.experiments['sim_si'].peak.broad_gauss_sigma_0.value\nproject_2.experiments['sim_lbco'].peak.broad_gauss_sigma_1 = project_1.experiments['sim_si'].peak.broad_gauss_sigma_1.value\nproject_2.experiments['sim_lbco'].peak.broad_gauss_sigma_2 = project_1.experiments['sim_si'].peak.broad_gauss_sigma_2.value\nproject_2.experiments['sim_lbco'].peak.broad_mix_beta_0 = project_1.experiments['sim_si'].peak.broad_mix_beta_0.value\nproject_2.experiments['sim_lbco'].peak.broad_mix_beta_1 = project_1.experiments['sim_si'].peak.broad_mix_beta_1.value\nproject_2.experiments['sim_lbco'].peak.asym_alpha_0 = project_1.experiments['sim_si'].peak.asym_alpha_0.value\nproject_2.experiments['sim_lbco'].peak.asym_alpha_1 = project_1.experiments['sim_si'].peak.asym_alpha_1.value\n</pre> project_2.peak_profile_type = 'pseudo-voigt * ikeda-carpenter' project_2.experiments['sim_lbco'].peak.broad_gauss_sigma_0 = project_1.experiments['sim_si'].peak.broad_gauss_sigma_0.value project_2.experiments['sim_lbco'].peak.broad_gauss_sigma_1 = project_1.experiments['sim_si'].peak.broad_gauss_sigma_1.value project_2.experiments['sim_lbco'].peak.broad_gauss_sigma_2 = project_1.experiments['sim_si'].peak.broad_gauss_sigma_2.value project_2.experiments['sim_lbco'].peak.broad_mix_beta_0 = project_1.experiments['sim_si'].peak.broad_mix_beta_0.value project_2.experiments['sim_lbco'].peak.broad_mix_beta_1 = project_1.experiments['sim_si'].peak.broad_mix_beta_1.value project_2.experiments['sim_lbco'].peak.asym_alpha_0 = project_1.experiments['sim_si'].peak.asym_alpha_0.value project_2.experiments['sim_lbco'].peak.asym_alpha_1 = project_1.experiments['sim_si'].peak.asym_alpha_1.value In\u00a0[37]: Copied! <pre>project_2.experiments['sim_lbco'].background_type = 'line-segment'\nproject_2.experiments['sim_lbco'].background.add(x=50000, y=0.2)\nproject_2.experiments['sim_lbco'].background.add(x=60000, y=0.2)\nproject_2.experiments['sim_lbco'].background.add(x=70000, y=0.2)\nproject_2.experiments['sim_lbco'].background.add(x=80000, y=0.2)\nproject_2.experiments['sim_lbco'].background.add(x=90000, y=0.2)\nproject_2.experiments['sim_lbco'].background.add(x=100000, y=0.2)\nproject_2.experiments['sim_lbco'].background.add(x=110000, y=0.2)\n</pre> project_2.experiments['sim_lbco'].background_type = 'line-segment' project_2.experiments['sim_lbco'].background.add(x=50000, y=0.2) project_2.experiments['sim_lbco'].background.add(x=60000, y=0.2) project_2.experiments['sim_lbco'].background.add(x=70000, y=0.2) project_2.experiments['sim_lbco'].background.add(x=80000, y=0.2) project_2.experiments['sim_lbco'].background.add(x=90000, y=0.2) project_2.experiments['sim_lbco'].background.add(x=100000, y=0.2) project_2.experiments['sim_lbco'].background.add(x=110000, y=0.2) <pre>\nBackground type for experiment 'sim_lbco' changed to\nline-segment\n</pre> <pre><code>data_lbco\n\n_space_group.name_H-M_alt  \"P m -3 m\"\n_space_group.IT_coordinate_system_code  1\n\n_cell.length_a      3.89\n_cell.length_b      3.89\n_cell.length_c      3.89\n_cell.angle_alpha  90.0\n_cell.angle_beta   90.0\n_cell.angle_gamma  90.0\n\nloop_\n_atom_site.label\n_atom_site.type_symbol\n_atom_site.fract_x\n_atom_site.fract_y\n_atom_site.fract_z\n_atom_site.wyckoff_letter\n_atom_site.occupancy\n_atom_site.ADP_type\n_atom_site.B_iso_or_equiv\nLa La   0.0 0.0 0.0   a   0.5   Biso 0.95\nBa Ba   0.0 0.0 0.0   a   0.5   Biso 0.95\nCo Co   0.5 0.5 0.5   b   1.0   Biso 0.80\nO  O    0.0 0.5 0.5   c   1.0   Biso 1.66\n</code></pre> In\u00a0[38]: Copied! <pre>project_2.sample_models.add(name='lbco')\n</pre> project_2.sample_models.add(name='lbco') In\u00a0[39]: Copied! <pre>project_2.sample_models['lbco'].space_group.name_h_m = 'P m -3 m'\nproject_2.sample_models['lbco'].space_group.it_coordinate_system_code = '1'\n</pre> project_2.sample_models['lbco'].space_group.name_h_m = 'P m -3 m' project_2.sample_models['lbco'].space_group.it_coordinate_system_code = '1' In\u00a0[40]: Copied! <pre>project_2.sample_models['lbco'].cell.length_a = 3.88\n</pre> project_2.sample_models['lbco'].cell.length_a = 3.88 In\u00a0[41]: Copied! <pre>project_2.sample_models['lbco'].atom_sites.add(\n    label='La',\n    type_symbol='La',\n    fract_x=0,\n    fract_y=0,\n    fract_z=0,\n    wyckoff_letter='a',\n    b_iso=0.95,\n    occupancy=0.5,\n)\nproject_2.sample_models['lbco'].atom_sites.add(\n    label='Ba',\n    type_symbol='Ba',\n    fract_x=0,\n    fract_y=0,\n    fract_z=0,\n    wyckoff_letter='a',\n    b_iso=0.95,\n    occupancy=0.5,\n)\nproject_2.sample_models['lbco'].atom_sites.add(\n    label='Co',\n    type_symbol='Co',\n    fract_x=0.5,\n    fract_y=0.5,\n    fract_z=0.5,\n    wyckoff_letter='b',\n    b_iso=0.80,\n)\nproject_2.sample_models['lbco'].atom_sites.add(\n    label='O',\n    type_symbol='O',\n    fract_x=0,\n    fract_y=0.5,\n    fract_z=0.5,\n    wyckoff_letter='c',\n    b_iso=1.66,\n)\n</pre> project_2.sample_models['lbco'].atom_sites.add(     label='La',     type_symbol='La',     fract_x=0,     fract_y=0,     fract_z=0,     wyckoff_letter='a',     b_iso=0.95,     occupancy=0.5, ) project_2.sample_models['lbco'].atom_sites.add(     label='Ba',     type_symbol='Ba',     fract_x=0,     fract_y=0,     fract_z=0,     wyckoff_letter='a',     b_iso=0.95,     occupancy=0.5, ) project_2.sample_models['lbco'].atom_sites.add(     label='Co',     type_symbol='Co',     fract_x=0.5,     fract_y=0.5,     fract_z=0.5,     wyckoff_letter='b',     b_iso=0.80, ) project_2.sample_models['lbco'].atom_sites.add(     label='O',     type_symbol='O',     fract_x=0,     fract_y=0.5,     fract_z=0.5,     wyckoff_letter='c',     b_iso=1.66, ) In\u00a0[42]: Copied! <pre>project_2.experiments['sim_lbco'].linked_phases.add(id='lbco', scale=1.0)\n</pre> project_2.experiments['sim_lbco'].linked_phases.add(id='lbco', scale=1.0) In\u00a0[43]: Copied! <pre>project_2.experiments['sim_lbco'].linked_phases['lbco'].scale.free = True\n\nfor line_segment in project_2.experiments['sim_lbco'].background:\n    line_segment.y.free = True\n</pre> project_2.experiments['sim_lbco'].linked_phases['lbco'].scale.free = True  for line_segment in project_2.experiments['sim_lbco'].background:     line_segment.y.free = True In\u00a0[44]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco')\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco') In\u00a0[45]: Copied! <pre>project_2.analysis.fit()\n</pre> project_2.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sim_lbco' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 115.86 12 70.26 39.4% \u2193 22 70.26 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 70.26 at iteration 12\n\u2705 Fitting complete.\n</pre> <pre>\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 0.11 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 70.26\n\ud83d\udccf R-factor (Rf): 38.27%\n\ud83d\udccf R-factor squared (Rf\u00b2): 64.53%\n\ud83d\udccf Weighted R-factor (wR): 66.00%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 sim_lbco background 50000 y 0.2000 0.2974 0.1893 48.69 % \u2191 2 sim_lbco background 60000 y 0.2000 0.2745 0.0387 37.23 % \u2191 3 sim_lbco background 70000 y 0.2000 0.2805 0.0251 40.25 % \u2191 4 sim_lbco background 80000 y 0.2000 0.2359 0.0193 17.93 % \u2191 5 sim_lbco background 90000 y 0.2000 0.2643 0.0138 32.15 % \u2191 6 sim_lbco background 100000 y 0.2000 0.2511 0.0160 25.54 % \u2191 7 sim_lbco background 110000 y 0.2000 0.2117 0.0576 5.86 % \u2191 8 sim_lbco linked_phases lbco scale 1.0000 2.5864 0.1352 158.64 % \u2191 In\u00a0[46]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco')\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco') In\u00a0[47]: Copied! <pre>project_2.sample_models['lbco'].cell.length_a.free = True\n</pre> project_2.sample_models['lbco'].cell.length_a.free = True In\u00a0[48]: Copied! <pre>project_2.analysis.fit()\n</pre> project_2.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sim_lbco' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 70.43 13 11.61 83.5% \u2193 23 5.07 56.3% \u2193 33 4.84 4.6% \u2193 65 4.84 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 4.84 at iteration 53\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 0.31 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 4.84\n\ud83d\udccf R-factor (Rf): 6.84%\n\ud83d\udccf R-factor squared (Rf\u00b2): 6.38%\n\ud83d\udccf Weighted R-factor (wR): 5.62%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco cell length_a 3.8800 3.8922 0.0001 \u00c5 0.31 % \u2191 2 sim_lbco background 50000 y 0.2974 0.2745 0.0497 7.70 % \u2193 3 sim_lbco background 60000 y 0.2745 0.2586 0.0101 5.77 % \u2193 4 sim_lbco background 70000 y 0.2805 0.2592 0.0066 7.58 % \u2193 5 sim_lbco background 80000 y 0.2359 0.2412 0.0051 2.27 % \u2191 6 sim_lbco background 90000 y 0.2643 0.2455 0.0036 7.10 % \u2193 7 sim_lbco background 100000 y 0.2511 0.2379 0.0042 5.25 % \u2193 8 sim_lbco background 110000 y 0.2117 0.2092 0.0151 1.20 % \u2193 9 sim_lbco linked_phases lbco scale 2.5864 4.8705 0.0464 88.31 % \u2191 In\u00a0[49]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco')\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco') <p>One of the main goals of this study was to refine the lattice parameter of the LBCO phase. As shown in the updated fit results, the overall fit has improved significantly, even though the change in cell length is less than 1% of the initial value. This demonstrates how even a small adjustment to the lattice parameter can have a substantial impact on the quality of the fit.</p> In\u00a0[50]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco', d_spacing=True)\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco', d_spacing=True) In\u00a0[51]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco', d_spacing=True, x_min=1.35, x_max=1.40)\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco', d_spacing=True, x_min=1.35, x_max=1.40) <p>The peak profile parameters are determined based on both the instrument and the sample characteristics, so they can vary when analyzing different samples on the same instrument. Therefore, it is better to refine them as well.</p> <p>Select the peak profile parameters to be refined during the fitting process.</p> <p>Hint: You can set the <code>free</code> attribute of the peak profile parameters to <code>True</code> to allow the fitting process to adjust them. You can use the same approach as in the previous part of the tutorial, but this time you will refine the peak profile parameters of the LBCO phase.</p> <p>Solution:</p> In\u00a0[52]: Copied! <pre>project_2.experiments['sim_lbco'].peak.broad_gauss_sigma_0.free = True\nproject_2.experiments['sim_lbco'].peak.broad_gauss_sigma_1.free = True\nproject_2.experiments['sim_lbco'].peak.broad_gauss_sigma_2.free = True\nproject_2.experiments['sim_lbco'].peak.broad_mix_beta_0.free = True\nproject_2.experiments['sim_lbco'].peak.broad_mix_beta_1.free = True\nproject_2.experiments['sim_lbco'].peak.asym_alpha_0.free = True\nproject_2.experiments['sim_lbco'].peak.asym_alpha_1.free = True\n</pre> project_2.experiments['sim_lbco'].peak.broad_gauss_sigma_0.free = True project_2.experiments['sim_lbco'].peak.broad_gauss_sigma_1.free = True project_2.experiments['sim_lbco'].peak.broad_gauss_sigma_2.free = True project_2.experiments['sim_lbco'].peak.broad_mix_beta_0.free = True project_2.experiments['sim_lbco'].peak.broad_mix_beta_1.free = True project_2.experiments['sim_lbco'].peak.asym_alpha_0.free = True project_2.experiments['sim_lbco'].peak.asym_alpha_1.free = True In\u00a0[53]: Copied! <pre>project_2.analysis.fit()\n</pre> project_2.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sim_lbco' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 4.92 20 4.51 8.3% \u2193 327 4.49 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 4.49 at iteration 326\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 1.52 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 4.49\n\ud83d\udccf R-factor (Rf): 5.67%\n\ud83d\udccf R-factor squared (Rf\u00b2): 4.84%\n\ud83d\udccf Weighted R-factor (wR): 4.04%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco cell length_a 3.8922 3.8915 0.0003 \u00c5 0.02 % \u2193 2 sim_lbco background 50000 y 0.2745 0.2750 0.0479 0.18 % \u2191 3 sim_lbco background 60000 y 0.2586 0.2606 0.0098 0.76 % \u2191 4 sim_lbco background 70000 y 0.2592 0.2592 0.0064 0.03 % \u2193 5 sim_lbco background 80000 y 0.2412 0.2439 0.0050 1.12 % \u2191 6 sim_lbco background 90000 y 0.2455 0.2458 0.0035 0.09 % \u2191 7 sim_lbco background 100000 y 0.2379 0.2387 0.0040 0.35 % \u2191 8 sim_lbco background 110000 y 0.2092 0.2084 0.0146 0.35 % \u2193 9 sim_lbco linked_phases lbco scale 4.8705 4.8295 0.0465 0.84 % \u2193 10 sim_lbco peak asym_alpha_0 -0.0066 -0.0048 0.0017 28.16 % \u2193 11 sim_lbco peak asym_alpha_1 0.0159 0.0137 0.0023 13.62 % \u2193 12 sim_lbco peak gauss_sigma_0 87503.6603 90223.6773 15782.1219 \u00b5s\u00b2 3.11 % \u2191 13 sim_lbco peak gauss_sigma_1 -66953.2238 -80933.7029 19529.4986 \u00b5s/\u212b 20.88 % \u2191 14 sim_lbco peak gauss_sigma_2 16276.4795 21634.7078 6015.0274 \u00b5s\u00b2/\u212b\u00b2 32.92 % \u2191 15 sim_lbco peak mix_beta_0 0.0008 0.0023 0.0005 deg 193.55 % \u2191 16 sim_lbco peak mix_beta_1 0.0190 0.0124 0.0021 deg 34.83 % \u2193 In\u00a0[54]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco', d_spacing=True, x_min=1.35, x_max=1.40)\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco', d_spacing=True, x_min=1.35, x_max=1.40) In\u00a0[55]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco', x_min=1.53, x_max=1.7, d_spacing=True)\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco', x_min=1.53, x_max=1.7, d_spacing=True) In\u00a0[56]: Copied! <pre>project_1.plot_meas_vs_calc(expt_name='sim_si', x_min=1, x_max=1.7, d_spacing=True)\nproject_2.plot_meas_vs_calc(expt_name='sim_lbco', x_min=1, x_max=1.7, d_spacing=True)\n</pre> project_1.plot_meas_vs_calc(expt_name='sim_si', x_min=1, x_max=1.7, d_spacing=True) project_2.plot_meas_vs_calc(expt_name='sim_lbco', x_min=1, x_max=1.7, d_spacing=True) <p>Set Space Group</p> In\u00a0[57]: Copied! <pre>project_2.sample_models.add(name='si')\n</pre> project_2.sample_models.add(name='si') In\u00a0[58]: Copied! <pre>project_2.sample_models['si'].space_group.name_h_m = 'F d -3 m'\nproject_2.sample_models['si'].space_group.it_coordinate_system_code = '2'\n</pre> project_2.sample_models['si'].space_group.name_h_m = 'F d -3 m' project_2.sample_models['si'].space_group.it_coordinate_system_code = '2' <p>Set Lattice Parameters</p> In\u00a0[59]: Copied! <pre>project_2.sample_models['si'].cell.length_a = 5.43\n</pre> project_2.sample_models['si'].cell.length_a = 5.43 <p>Set Atom Sites</p> In\u00a0[60]: Copied! <pre>project_2.sample_models['si'].atom_sites.add(\n    label='Si',\n    type_symbol='Si',\n    fract_x=0,\n    fract_y=0,\n    fract_z=0,\n    wyckoff_letter='a',\n    b_iso=0.89,\n)\n</pre> project_2.sample_models['si'].atom_sites.add(     label='Si',     type_symbol='Si',     fract_x=0,     fract_y=0,     fract_z=0,     wyckoff_letter='a',     b_iso=0.89, ) <p>\ud83d\udd17 Assign Sample Model to Experiment</p> In\u00a0[61]: Copied! <pre>project_2.experiments['sim_lbco'].linked_phases.add(id='si', scale=1.0)\n</pre> project_2.experiments['sim_lbco'].linked_phases.add(id='si', scale=1.0) In\u00a0[62]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco')\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco') <p>As you can see, the calculated pattern is now the sum of both phases, and Si peaks are visible in the calculated pattern. However, their intensities are much too high. Therefore, we need to refine the scale factor of the Si phase.</p> <p>Set Fit Parameters</p> In\u00a0[63]: Copied! <pre>project_2.experiments['sim_lbco'].linked_phases['si'].scale.free = True\n</pre> project_2.experiments['sim_lbco'].linked_phases['si'].scale.free = True <p>Run Fitting</p> <p>Now we can perform the fit with both phases included.</p> In\u00a0[64]: Copied! <pre>project_2.analysis.fit()\n</pre> project_2.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'sim_lbco' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 2254.38 21 1.56 99.9% \u2193 39 1.54 1.5% \u2193 688 1.54 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 1.54 at iteration 687\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 6.30 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 1.54\n\ud83d\udccf R-factor (Rf): 4.62%\n\ud83d\udccf R-factor squared (Rf\u00b2): 4.04%\n\ud83d\udccf Weighted R-factor (wR): 3.54%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco cell length_a 3.8915 3.8913 0.0002 \u00c5 0.01 % \u2193 2 sim_lbco background 50000 y 0.2750 0.2780 0.0281 1.10 % \u2191 3 sim_lbco background 60000 y 0.2606 0.2515 0.0057 3.48 % \u2193 4 sim_lbco background 70000 y 0.2592 0.2518 0.0038 2.85 % \u2193 5 sim_lbco background 80000 y 0.2439 0.2417 0.0029 0.89 % \u2193 6 sim_lbco background 90000 y 0.2458 0.2426 0.0021 1.29 % \u2193 7 sim_lbco background 100000 y 0.2387 0.2220 0.0025 7.00 % \u2193 8 sim_lbco background 110000 y 0.2084 0.2388 0.0086 14.56 % \u2191 9 sim_lbco linked_phases lbco scale 4.8295 4.8548 0.0274 0.52 % \u2191 10 sim_lbco linked_phases si scale 1.0000 0.0373 0.0014 96.27 % \u2193 11 sim_lbco peak asym_alpha_0 -0.0048 -0.0071 0.0010 49.74 % \u2191 12 sim_lbco peak asym_alpha_1 0.0137 0.0173 0.0014 26.55 % \u2191 13 sim_lbco peak gauss_sigma_0 90223.6773 89477.6733 9441.8847 \u00b5s\u00b2 0.83 % \u2193 14 sim_lbco peak gauss_sigma_1 -80933.7029 -73469.3179 11867.0173 \u00b5s/\u212b 9.22 % \u2193 15 sim_lbco peak gauss_sigma_2 21634.7078 18331.8705 3625.2100 \u00b5s\u00b2/\u212b\u00b2 15.27 % \u2193 16 sim_lbco peak mix_beta_0 0.0023 0.0015 0.0003 deg 33.08 % \u2193 17 sim_lbco peak mix_beta_1 0.0124 0.0154 0.0012 deg 24.45 % \u2191 <p>Visualize Fit Results</p> <p>Let's plot the measured diffraction pattern and the calculated diffraction pattern both for the full range and for a zoomed-in region around the previously unexplained peak near 95,000 \u03bcs. The calculated pattern will be the sum of the two phases.</p> In\u00a0[65]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco')\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco') In\u00a0[66]: Copied! <pre>project_2.plot_meas_vs_calc(expt_name='sim_lbco', x_min=88000, x_max=101000)\n</pre> project_2.plot_meas_vs_calc(expt_name='sim_lbco', x_min=88000, x_max=101000) <p>All previously unexplained peaks are now accounted for in the pattern, and the fit is improved. Some discrepancies in the peak intensities remain, but further improvements would require more advanced data reduction and analysis, which are beyond the scope of this tutorial.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#fitting-powder-diffraction-data","title":"Fitting Powder Diffraction data\u00b6","text":"<p>This tutorial guides you through the Rietveld refinement of crystal structures using simulated powder diffraction data. It consists of two parts:</p> <ul> <li>Introduction: A simple reference fit using silicon (Si) crystal structure.</li> <li>Exercise: A more complex fit using La\u2080.\u2085Ba\u2080.\u2085CoO\u2083 (LBCO) crystal structure.</li> </ul>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#import-library","title":"\ud83d\udee0\ufe0f Import Library\u00b6","text":"<p>We start by importing the necessary library for the analysis. In this tutorial, we use the EasyDiffraction library, which offers tools for analyzing and refining powder diffraction data.</p> <p>This tutorial is self-contained and designed for hands-on learning. However, if you're interested in exploring more advanced features or learning about additional capabilities of the EasyDiffraction library, please refer to the official documentation: https://docs.easydiffraction.org/lib/tutorials/</p> <p>Depending on your requirements, you may choose to import only specific classes. However, for the sake of simplicity in this tutorial, we will import the entire library.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#introduction-simple-reference-fit-si","title":"\ud83d\udcd8 Introduction: Simple Reference Fit \u2013 Si\u00b6","text":"<p>Before diving into the more complex fitting exercise with the La\u2080.\u2085Ba\u2080.\u2085CoO\u2083 (LBCO) crystal structure, let's start with a simpler example using the silicon (Si) crystal structure. This will help us understand the basic concepts and steps involved in fitting a crystal structure using powder diffraction data.</p> <p>For this part of the tutorial, we will use the powder diffraction data from the previous tutorial, simulated using the Si crystal structure.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#create-a-project-reference","title":"\ud83d\udce6 Create a Project \u2013 'reference'\u00b6","text":"<p>In EasyDiffraction, a project serves as a container for all information related to the analysis of a specific experiment or set of experiments. It enables you to organize your data, experiments, sample models, and fitting parameters in a structured manner. You can think of it as a folder containing all the essential details about your analysis. The project also allows us to visualize both the measured and calculated diffraction patterns, among other things.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#create-an-experiment","title":"\ud83d\udd2c Create an Experiment\u00b6","text":"<p>Now we will create an experiment within the project. An experiment represents a specific diffraction measurement performed on a specific sample using a particular instrument. It contains details about the measured data, instrument parameters, and other relevant information.</p> <p>In this case, the experiment is defined as a powder diffraction measurement using time-of-flight neutrons. The measured data is loaded from a file containing the reduced diffraction pattern of Si from the data reduction tutorial.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#inspect-measured-data","title":"Inspect Measured Data\u00b6","text":"<p>After creating the experiment, we can examine the measured data. The measured data consists of a diffraction pattern having time-of-flight (TOF) values and corresponding intensities. The TOF values are given in microseconds (\u03bcs), and the intensities are in arbitrary units.</p> <p>The data is stored in XYE format, a simple text format containing three columns: TOF, intensity, and intensity error (if available).</p> <p>The <code>plot_meas</code> method of the project enables us to visualize the measured diffraction pattern.</p> <p>Before plotting, we set the plotting engine to 'plotly', which provides interactive visualizations.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#set-instrument-parameters","title":"Set Instrument Parameters\u00b6","text":"<p>After the experiment is created and measured data are loaded, we need to set the instrument parameters.</p> <p>In this type of experiment, the instrument parameters define how the measured data is converted between d-spacing and time-of-flight (TOF) during the data reduction process as well as the angular position of the detector. So, we put values based on those from the reduction. These values can be found in the header of the corresponding .XYE file. Their names are <code>two_theta</code> and <code>DIFC</code>, which stand for the two-theta angle and the linear conversion factor from d-spacing to TOF, respectively.</p> <p>You can set them manually, but it is more convenient to use the <code>get_value_from_xye_header</code> function from the EasyDiffraction library.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#set-peak-profile-parameters","title":"Set Peak Profile Parameters\u00b6","text":"<p>The next set of parameters is needed to define the peak profile used in the fitting process. The peak profile describes the shape of the diffraction peaks. They include parameters for the broadening and asymmetry of the peaks.</p> <p>Here, we use a pseudo-Voigt peak profile function with Ikeda-Carpenter asymmetry, which is a common choice for neutron powder diffraction data.</p> <p>The values are typically determined experimentally on the same instrument and under the same configuration as the data being analyzed based on measurements of a standard sample. We consider this Si sample as a standard reference. Therefore, we will set the initial values of the peak profile parameters based on the values obtained from another simulation and refine them during the fitting process. The refined parameters will be used as a starting point for the more complex fit in the next part of the tutorial.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#set-background","title":"Set Background\u00b6","text":"<p>The background of the diffraction pattern represents the portion of the pattern that is not related to the crystal structure of the sample. It's rather representing the noise and other sources of scattering that can affect the measured intensities. This includes contributions from the instrument, the sample holder, the sample environment, and other sources of incoherent scattering.</p> <p>The background can be modeled in various ways. In this example, we will use a simple line segment background, which is a common approach for powder diffraction data. The background intensity at any point is defined by linear interpolation between neighboring points. The background points are selected to span the range of the diffraction pattern while avoiding the peaks.</p> <p>We will add several background points at specific TOF values (in \u03bcs) and corresponding intensity values. These points are chosen to represent the background level in the diffraction pattern free from any peaks.</p> <p>The background points are added using the <code>add</code> method of the <code>background</code> object. The <code>x</code> parameter represents the TOF value, and the <code>y</code> parameter represents the intensity value at that TOF.</p> <p>Let's set all the background points at a constant value of 0.01, which can be roughly determined by the eye, and we will refine them later during the fitting process.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#create-a-sample-model-si","title":"\ud83e\udde9 Create a Sample Model \u2013 Si\u00b6","text":"<p>After setting up the experiment, we need to create a sample model that describes the crystal structure of the sample being analyzed.</p> <p>In this case, we will create a sample model for silicon (Si) with a cubic crystal structure. The sample model contains information about the space group, lattice parameters, atomic positions of the atoms in the unit cell, atom types, occupancies and atomic displacement parameters. The sample model is essential for the fitting process, as it is used to calculate the expected diffraction pattern.</p> <p>EasyDiffraction refines the crystal structure of the sample, but does not solve it. Therefore, we need a good starting point with reasonable structural parameters.</p> <p>Here, we define the Si structure as a cubic structure. As this is a cubic structure, we only need to define the single lattice parameter, which is the length of the unit cell edge. The Si crystal structure has a single atom in the unit cell, which is located at the origin (0, 0, 0) of the unit cell. The symmetry of this site is defined by the Wyckoff letter 'a'. The atomic displacement parameter defines the thermal vibrations of the atoms in the unit cell and is presented as an isotropic parameter (B_iso).</p> <p>Sometimes, the initial crystal structure parameters can be obtained from one of the crystallographic databases, like for example the Crystallography Open Database (COD). In this case, we use the COD entry for silicon as a reference for the initial crystal structure model: https://www.crystallography.net/cod/4507226.html</p> <p>Usually, the crystal structure parameters are provided in a CIF file format, which is a standard format for crystallographic data. An example of a CIF file for silicon is shown below. The CIF file contains the space group information, unit cell parameters, and atomic positions.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#set-space-group","title":"Set Space Group\u00b6","text":""},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#set-lattice-parameters","title":"Set Lattice Parameters\u00b6","text":""},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#set-atom-sites","title":"Set Atom Sites\u00b6","text":""},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#assign-sample-model-to-experiment","title":"\ud83d\udd17 Assign Sample Model to Experiment\u00b6","text":"<p>Now we need to assign, or link, this sample model to the experiment created above. This linked crystallographic phase will be used to calculate the expected diffraction pattern based on the crystal structure defined in the sample model.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#analyze-and-fit-the-data","title":"\ud83d\ude80 Analyze and Fit the Data\u00b6","text":"<p>After setting up the experiment and sample model, we can now analyze the measured diffraction pattern and perform the fit.</p> <p>The fitting process involves comparing the measured diffraction pattern with the calculated diffraction pattern based on the sample model and instrument parameters. The goal is to adjust the parameters of the sample model and the experiment to minimize the difference between the measured and calculated diffraction patterns. This is done by refining the parameters of the sample model and the instrument settings to achieve a better fit.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#set-fit-parameters","title":"Set Fit Parameters\u00b6","text":"<p>To perform the fit, we need to specify the refinement parameters. These are the parameters that will be adjusted during the fitting process to minimize the difference between the measured and calculated diffraction patterns. This is done by setting the <code>free</code> attribute of the corresponding parameters to <code>True</code>.</p> <p>We will refine the scale factor of the Si phase, the intensities of the background points as well as the peak profile parameters. The structure parameters of the Si phase will not be refined, as this sample is considered a reference sample with known parameters.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#show-free-parameters","title":"Show Free Parameters\u00b6","text":"<p>We can check which parameters are free to be refined by calling the <code>show_free_params</code> method of the <code>analysis</code> object of the project.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#visualize-diffraction-patterns","title":"Visualize Diffraction Patterns\u00b6","text":"<p>Before performing the fit, we can visually compare the measured diffraction pattern with the calculated diffraction pattern based on the initial parameters of the sample model and the instrument. This provides an indication of how well the initial parameters match the measured data. The <code>plot_meas_vs_calc</code> method of the project allows this comparison.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#run-fitting","title":"Run Fitting\u00b6","text":"<p>We can now perform the fit using the <code>fit</code> method of the <code>analysis</code> object of the project.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#check-fit-results","title":"Check Fit Results\u00b6","text":"<p>You can see that the agreement between the measured and calculated diffraction patterns is now much improved and that the intensities of the calculated peaks align much better with the measured peaks. To check the quality of the fit numerically, we can look at the goodness-of-fit \u03c7\u00b2 value and the reliability R-factors. The \u03c7\u00b2 value is a measure of how well the calculated diffraction pattern matches the measured pattern, and it is calculated as the sum of the squared differences between the measured and calculated intensities, divided by the number of data points. Ideally, the \u03c7\u00b2 value should be close to 1, indicating a good fit.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#visualize-fit-results","title":"Visualize Fit Results\u00b6","text":"<p>After the fit is completed, we can plot the comparison between the measured and calculated diffraction patterns again to see how well the fit improved the agreement between the two. The calculated diffraction pattern is now based on the refined parameters.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#tof-vs-d-spacing","title":"TOF vs d-spacing\u00b6","text":"<p>The diffraction pattern is typically analyzed and plotted in the time-of-flight (TOF) axis, which represents the time it takes for neutrons to travel from the sample to the detector. However, it is sometimes more convenient to visualize the diffraction pattern in the d-spacing axis, which represents the distance between planes in the crystal lattice. The d-spacing can be calculated from the TOF values using the instrument parameters. The <code>plot_meas_vs_calc</code> method of the project allows us to plot the measured and calculated diffraction patterns in the d-spacing axis by setting the <code>d_spacing</code> parameter to <code>True</code>.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-complex-fit-lbco","title":"\ud83d\udcaa Exercise: Complex Fit \u2013 LBCO\u00b6","text":"<p>Now that you have a basic understanding of the fitting process, we will undertake a more complex fit of the La\u2080.\u2085Ba\u2080.\u2085CoO\u2083 (LBCO) crystal structure using simulated powder diffraction data from the previous tutorial.</p> <p>You can use the same approach as in the previous part of the tutorial, but this time we will refine a more complex crystal structure LBCO with multiple atoms in the unit cell.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-1-create-a-project-main","title":"\ud83d\udce6 Exercise 1: Create a Project \u2013 'main'\u00b6","text":"<p>Create a new project for the LBCO fit.</p> <p>Hint: You can use the same approach as in the previous part of the tutorial, but this time we will create a new project for the LBCO fit.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-2-define-an-experiment","title":"\ud83d\udd2c Exercise 2: Define an Experiment\u00b6","text":""},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-21-create-an-experiment","title":"Exercise 2.1: Create an Experiment\u00b6","text":"<p>Create an experiment within the new project and load the reduced diffraction pattern for LBCO.</p> <p>Hint: You can use the same approach as in the previous part of the tutorial, but this time you need to use the data file for LBCO.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-21-inspect-measured-data","title":"Exercise 2.1: Inspect Measured Data\u00b6","text":"<p>Check the measured data of the LBCO experiment. Are there any peaks with the shape similar to those excluded in the Si fit? If so, exclude them from this analysis as well.</p> <p>Hint: You can use the <code>plot_meas</code> method of the project to visualize the measured diffraction pattern. You can also use the <code>excluded_regions</code> attribute of the experiment to exclude specific regions from the analysis as we did in the previous part of the tutorial.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-22-set-instrument-parameters","title":"Exercise 2.2: Set Instrument Parameters\u00b6","text":"<p>Set the instrument parameters for the LBCO experiment.</p> <p>Hint: Use the values from the data reduction process for the LBCO and follow the same approach as in the previous part of the tutorial.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-23-set-peak-profile-parameters","title":"Exercise 2.3: Set Peak Profile Parameters\u00b6","text":"<p>Set the peak profile parameters for the LBCO experiment.</p> <p>Hint: Use the values from the previous part of the tutorial. You can either manually copy the values from the Si fit or use the <code>value</code> attribute of the parameters from the Si experiment to set the initial values for the LBCO experiment. This will help us to have a good starting point for the fit.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-24-set-background","title":"Exercise 2.4: Set Background\u00b6","text":"<p>Set the background points for the LBCO experiment. What would you suggest as the initial intensity value for the background points?</p> <p>Hint: Use the same approach as in the previous part of the tutorial, but this time you need to set the background points for the LBCO experiment. You can zoom in on the measured diffraction pattern to determine the approximate background level.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-3-define-a-sample-model-lbco","title":"\ud83e\udde9 Exercise 3: Define a Sample Model \u2013 LBCO\u00b6","text":"<p>The LBSO structure is not as simple as the Si model, as it contains multiple atoms in the unit cell. It is not in COD, so we give you the structural parameters in CIF format to create the sample model.</p> <p>Note that those parameters are not necessarily the most accurate ones, but they are a good starting point for the fit. The aim of the study is to refine the LBCO lattice parameters.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-31-create-sample-model","title":"Exercise 3.1: Create Sample Model\u00b6","text":"<p>Create a sample model for LBCO based on the provided CIF data.</p> <p>Hint: You can use the same approach as in the previous part of the tutorial, but this time you need to create a sample model for LBCO.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-32-set-space-group","title":"Exercise 3.2: Set Space Group\u00b6","text":"<p>Set the space group for the LBCO sample model.</p> <p>Hint: Use the space group name and IT coordinate system code from the CIF data.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-33-set-lattice-parameters","title":"Exercise 3.3: Set Lattice Parameters\u00b6","text":"<p>Set the lattice parameters for the LBCO sample model.</p> <p>Hint: Use the lattice parameters from the CIF data.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-34-set-atom-sites","title":"Exercise 3.4: Set Atom Sites\u00b6","text":"<p>Set the atom sites for the LBCO sample model.</p> <p>Hint: Use the atom sites from the CIF data. You can use the <code>add</code> method of the <code>atom_sites</code> attribute of the sample model to add the atom sites. Note that the <code>occupancy</code> of the La and Ba atoms is 0.5 and those atoms are located in the same position (0, 0, 0) in the unit cell. This means that an extra attribute <code>occupancy</code> needs to be set for those atoms.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-4-assign-sample-model-to-experiment","title":"\ud83d\udd17 Exercise 4: Assign Sample Model to Experiment\u00b6","text":"<p>Now assign the LBCO sample model to the experiment created above.</p> <p>Hint: Use the <code>linked_phases</code> attribute of the experiment to link the sample model.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-5-analyze-and-fit-the-data","title":"\ud83d\ude80 Exercise 5: Analyze and Fit the Data\u00b6","text":""},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-51-set-fit-parameters","title":"Exercise 5.1: Set Fit Parameters\u00b6","text":"<p>Select the initial set of parameters to be refined during the fitting process.</p> <p>Hint: You can start with the scale factor and the background points, as in the Si fit, but this time you will refine the LBCO phase related parameters.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-52-run-fitting","title":"Exercise 5.2: Run Fitting\u00b6","text":"<p>Visualize the measured and calculated diffraction patterns before fitting and then run the fitting process.</p> <p>Hint: Use the <code>plot_meas_vs_calc</code> method of the project to visualize the measured and calculated diffraction patterns before fitting. Then, use the <code>fit</code> method of the <code>analysis</code> object of the project to perform the fitting process.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-53-find-the-misfit-in-the-fit","title":"Exercise 5.3: Find the Misfit in the Fit\u00b6","text":"<p>Visualize the measured and calculated diffraction patterns after the fit. As you can see, the fit shows noticeable discrepancies. If you zoom in on different regions of the pattern, you will observe that all the calculated peaks are shifted to the left.</p> <p>What could be the reason for the misfit?</p> <p>Hint: Consider the following options:</p> <ol> <li>The conversion parameters from TOF to d-spacing are not correct.</li> <li>The lattice parameters of the LBCO phase are not correct.</li> <li>The peak profile parameters are not correct.</li> <li>The background points are not correct.</li> </ol> <p>Solution:</p> <ol> <li>\u274c The conversion parameters from TOF to d-spacing were set based on the data reduction step. While they are specific to each dataset and thus differ from those used for the Si data, the full reduction workflow has already been validated with the Si fit. Therefore, they are not the cause of the misfit in this case.</li> <li>\u2705 The lattice parameters of the LBCO phase were set based on the CIF data, which is a good starting point, but they are not necessarily as accurate as needed for the fit. The lattice parameters may need to be refined.</li> <li>\u274c The peak profile parameters do not change the position of the peaks, but rather their shape.</li> <li>\u274c The background points affect the background level, but not the peak positions.</li> </ol>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-54-refine-the-lbco-lattice-parameter","title":"Exercise 5.4: Refine the LBCO Lattice Parameter\u00b6","text":"<p>To improve the fit, refine the lattice parameter of the LBCO phase.</p> <p>Hint: To achieve this, we will set the <code>free</code> attribute of the <code>length_a</code> parameter of the LBCO cell to <code>True</code>.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-55-visualize-the-fit-results-in-d-spacing","title":"Exercise 5.5: Visualize the Fit Results in d-spacing\u00b6","text":"<p>Plot measured vs calculated diffraction patterns in d-spacing instead of TOF.</p> <p>Hint: Use the <code>plot_meas_vs_calc</code> method of the project and set the <code>d_spacing</code> parameter to <code>True</code>.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-56-refine-the-peak-profile-parameters","title":"Exercise 5.6: Refine the Peak Profile Parameters\u00b6","text":"<p>As you can see, the fit is now relatively good and the peak positions are much closer to the measured data.</p> <p>The peak profile parameters were not refined, and their starting values were set based on the previous fit of the Si standard sample. Although these starting values are reasonable and provide a good starting point for the fit, they are not necessarily optimal for the LBCO phase. This can be seen while inspecting the individual peaks in the diffraction pattern. For example, the calculated curve does not perfectly describe the peak at about 1.38 \u00c5, as can be seen below:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-57-find-undefined-features","title":"Exercise 5.7: Find Undefined Features\u00b6","text":"<p>After refining the lattice parameter and the peak profile parameters, the fit is significantly improved, but inspect the diffraction pattern again. Are you noticing anything undefined?</p> <p>Hint: While the fit is now significantly better, there are still some unexplained peaks in the diffraction pattern. These peaks are not accounted for by the LBCO phase. For example, if you zoom in on the region around 1.6 \u00c5 (or 95,000 \u03bcs), you will notice that the rightmost peak is not explained by the LBCO phase at all.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-58-identify-the-cause-of-the-unexplained-peaks","title":"Exercise 5.8: Identify the Cause of the Unexplained Peaks\u00b6","text":"<p>Hint: Consider the following options:</p> <ol> <li>The LBCO phase is not correctly modeled.</li> <li>The LBCO phase is not the only phase present in the sample.</li> <li>The data reduction process introduced artifacts.</li> <li>The studied sample is not LBCO, but rather a different phase.</li> </ol> <p>Solution:</p> <ol> <li>\u274c In principle, this could be the case, as sometimes the presence of extra peaks in the diffraction pattern can indicate lower symmetry than the one used in the model, or that the model is not complete. However, in this case, the LBCO phase is correctly modeled based on the CIF data.</li> <li>\u2705 The unexplained peaks are due to the presence of an impurity phase in the sample, which is not included in the current model.</li> <li>\u274c The data reduction process is not likely to introduce such specific peaks, as it is tested and verified in the previous part of the tutorial.</li> <li>\u274c This could also be the case in real experiments, but in this case, we know that the sample is LBCO, as it was simulated based on the CIF data.</li> </ol>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-59-identify-the-impurity-phase","title":"Exercise 5.9: Identify the impurity phase\u00b6","text":"<p>Identify the impurity phase.</p> <p>Hint: Check the positions of the unexplained peaks in the diffraction pattern. Compare them with the known diffraction patterns in the introduction section of the tutorial.</p> <p>Solution: The unexplained peaks are likely due to the presence of a small amount of Si in the LBCO sample. In real experiments, it might happen, e.g., because the sample holder was not cleaned properly after the Si experiment.</p> <p>You can visalize both the patterns of the Si and LBCO phases to confirm this hypothesis.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-510-create-a-second-sample-model-si-as-impurity","title":"Exercise 5.10: Create a Second Sample Model \u2013 Si as Impurity\u00b6","text":"<p>Create a second sample model for the Si phase, which is the impurity phase identified in the previous step. Link this sample model to the LBCO experiment.</p> <p>Hint: You can use the same approach as in the previous part of the tutorial, but this time you need to create a sample model for Si and link it to the LBCO experiment.</p> <p>Solution:</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#exercise-511-refine-the-scale-of-the-si-phase","title":"Exercise 5.11: Refine the Scale of the Si Phase\u00b6","text":"<p>Visualize the measured diffraction pattern and the calculated diffraction pattern. Check if the Si phase is contributing to the calculated diffraction pattern. Refine the scale factor of the Si phase to improve the fit.</p> <p>Hint: You can use the <code>plot_meas_vs_calc</code> method of the project to visualize the patterns. Then, set the <code>free</code> attribute of the <code>scale</code> parameter of the Si phase to <code>True</code> to allow the fitting process to adjust the scale factor.</p> <p>Solution:</p> <p>Before optimizing the parameters, we can visualize the measured diffraction pattern and the calculated diffraction pattern based on the two phases: LBCO and Si.</p> <p>Visualize Diffraction Patterns</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#final-remarks","title":"Final Remarks\u00b6","text":"<p>In this part of the tutorial, we have demonstrated how to use EasyDiffraction to refine lattice parameters for a more complex crystal structure, La\u2080.\u2085Ba\u2080.\u2085CoO\u2083 (LBCO). In real experiments, additional parameters, such as atomic positions, occupancies, and atomic displacement factors, can also be refined to further improve the fit. However, we will stop here, as the purpose of this part of the tutorial is to demonstrate the practical use of EasyDiffraction for fitting powder diffraction data.</p>"},{"location":"tutorials/dmsc-summer-school-2025_analysis-powder-diffraction/#bonus","title":"\ud83c\udf81 Bonus\u00b6","text":"<p>You've now completed the analysis part of the DMSC Summer School workflow, demonstrating the practical use of EasyDiffraction for refining simulated powder diffraction data.</p> <p>To continue learning and exploring more features of the EasyDiffraction library, you can visit the official tutorial page and select one of the many available tutorials: https://docs.easydiffraction.org/lib/tutorials/</p>"},{"location":"tutorials/pdf_pd-neut-cwl_Ni/","title":"Ni pd-neut-cwl","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>project = ed.Project()\n</pre> project = ed.Project() In\u00a0[4]: Copied! <pre>project.plotter.engine = 'plotly'\n</pre> project.plotter.engine = 'plotly' <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[5]: Copied! <pre>project.sample_models.add(name='ni')\n</pre> project.sample_models.add(name='ni') In\u00a0[6]: Copied! <pre>project.sample_models['ni'].space_group.name_h_m = 'F m -3 m'\nproject.sample_models['ni'].space_group.it_coordinate_system_code = '1'\nproject.sample_models['ni'].cell.length_a = 3.52387\nproject.sample_models['ni'].atom_sites.add(\n    label='Ni', type_symbol='Ni', fract_x=0.0, fract_y=0.0, fract_z=0.0, wyckoff_letter='a', b_iso=0.5\n)\n</pre> project.sample_models['ni'].space_group.name_h_m = 'F m -3 m' project.sample_models['ni'].space_group.it_coordinate_system_code = '1' project.sample_models['ni'].cell.length_a = 3.52387 project.sample_models['ni'].atom_sites.add(     label='Ni', type_symbol='Ni', fract_x=0.0, fract_y=0.0, fract_z=0.0, wyckoff_letter='a', b_iso=0.5 ) In\u00a0[7]: Copied! <pre>ed.download_from_repository('ni-q27r100-neutron_from-2.gr', destination='data')\n</pre> ed.download_from_repository('ni-q27r100-neutron_from-2.gr', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/ni-q27r100-neutron_from-2.gr' already exists and will not be overwritten.\n</pre> In\u00a0[8]: Copied! <pre>project.experiments.add(\n    name='pdf',\n    sample_form='powder',\n    beam_mode='constant wavelength',\n    radiation_probe='neutron',\n    scattering_type='total',\n    data_path='data/ni-q27r100-neutron_from-2.gr',\n)\n</pre> project.experiments.add(     name='pdf',     sample_form='powder',     beam_mode='constant wavelength',     radiation_probe='neutron',     scattering_type='total',     data_path='data/ni-q27r100-neutron_from-2.gr', ) <pre>\nLoading measured data from ASCII file\n/Users/runner/work/diffraction-lib/diffraction-lib/docs/tutorials/data/ni-q27r100-neutron_from-2.gr\nWarning: No uncertainty (sy) column provided. Defaulting to 0.03.\n\nData loaded successfully\nExperiment \ud83d\udd2c 'pdf'. Number of data points: 9801\n</pre> In\u00a0[9]: Copied! <pre>project.experiments['pdf'].linked_phases.add(id='ni', scale=1.0)\nproject.experiments['pdf'].peak.damp_q = 0\nproject.experiments['pdf'].peak.broad_q = 0.03\nproject.experiments['pdf'].peak.cutoff_q = 27.0\nproject.experiments['pdf'].peak.sharp_delta_1 = 0.0\nproject.experiments['pdf'].peak.sharp_delta_2 = 2.0\nproject.experiments['pdf'].peak.damp_particle_diameter = 0\n</pre> project.experiments['pdf'].linked_phases.add(id='ni', scale=1.0) project.experiments['pdf'].peak.damp_q = 0 project.experiments['pdf'].peak.broad_q = 0.03 project.experiments['pdf'].peak.cutoff_q = 27.0 project.experiments['pdf'].peak.sharp_delta_1 = 0.0 project.experiments['pdf'].peak.sharp_delta_2 = 2.0 project.experiments['pdf'].peak.damp_particle_diameter = 0 In\u00a0[10]: Copied! <pre>project.sample_models['ni'].cell.length_a.free = True\nproject.sample_models['ni'].atom_sites['Ni'].b_iso.free = True\n</pre> project.sample_models['ni'].cell.length_a.free = True project.sample_models['ni'].atom_sites['Ni'].b_iso.free = True In\u00a0[11]: Copied! <pre>project.experiments['pdf'].linked_phases['ni'].scale.free = True\nproject.experiments['pdf'].peak.broad_q.free = True\nproject.experiments['pdf'].peak.sharp_delta_2.free = True\n</pre> project.experiments['pdf'].linked_phases['ni'].scale.free = True project.experiments['pdf'].peak.broad_q.free = True project.experiments['pdf'].peak.sharp_delta_2.free = True In\u00a0[12]: Copied! <pre>project.analysis.current_calculator = 'pdffit'\nproject.analysis.fit()\n</pre> project.analysis.current_calculator = 'pdffit' project.analysis.fit() <pre>\nCurrent calculator changed to\npdffit\n\nUsing experiment \ud83d\udd2c 'pdf' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 2334.39 9 416.28 82.2% \u2193 15 210.14 49.5% \u2193 21 207.13 1.4% \u2193 45 207.10 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 207.10 at iteration 44\n\u2705 Fitting complete.\n</pre> <pre>\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 36.82 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 207.10\n\ud83d\udccf R-factor (Rf): 9.83%\n\ud83d\udccf R-factor squared (Rf\u00b2): 9.48%\n\ud83d\udccf Weighted R-factor (wR): 9.48%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 ni atom_sites Ni b_iso 0.5000 0.4281 0.0011 \u00c5\u00b2 14.39 % \u2193 2 ni cell length_a 3.5239 3.5260 0.0000 \u00c5 0.06 % \u2191 3 pdf linked_phases ni scale 1.0000 0.9892 0.0007 1.08 % \u2193 4 pdf peak broad_q 0.0300 0.0220 0.0001 \u00c5\u207b\u00b2 26.77 % \u2193 5 pdf peak sharp_delta_2 2.0000 2.5587 0.0444 \u00c5\u00b2 27.94 % \u2191 In\u00a0[13]: Copied! <pre>project.plot_meas_vs_calc(expt_name='pdf', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='pdf', show_residual=True)"},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#pair-distribution-function-ni-npd","title":"Pair Distribution Function: Ni, NPD\u00b6","text":"<p>This example demonstrates a pair distribution function (PDF) analysis of Ni, based on data collected from a constant wavelength neutron powder diffraction experiment.</p> <p>The dataset is taken from: https://github.com/diffpy/cmi_exchange/blob/main/cmi_scripts/fitNiPDF</p>"},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#set-plotting-engine","title":"Set Plotting Engine\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#add-experiment","title":"Add Experiment\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#select-fitting-parameters","title":"Select Fitting Parameters\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-cwl_Ni/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/","title":"Si pd-neut-tof","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>project = ed.Project()\n</pre> project = ed.Project() In\u00a0[4]: Copied! <pre>project.plotter.engine = 'plotly'\nproject.plotter.x_max = 40\n</pre> project.plotter.engine = 'plotly' project.plotter.x_max = 40 <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[5]: Copied! <pre>project.sample_models.add(name='si')\n</pre> project.sample_models.add(name='si') In\u00a0[6]: Copied! <pre>sample_model = project.sample_models['si']\nsample_model.space_group.name_h_m.value = 'F d -3 m'\nsample_model.space_group.it_coordinate_system_code = '1'\nsample_model.cell.length_a = 5.43146\nsample_model.atom_sites.add(label='Si', type_symbol='Si', fract_x=0, fract_y=0, fract_z=0, wyckoff_letter='a', b_iso=0.5)\n</pre> sample_model = project.sample_models['si'] sample_model.space_group.name_h_m.value = 'F d -3 m' sample_model.space_group.it_coordinate_system_code = '1' sample_model.cell.length_a = 5.43146 sample_model.atom_sites.add(label='Si', type_symbol='Si', fract_x=0, fract_y=0, fract_z=0, wyckoff_letter='a', b_iso=0.5) In\u00a0[7]: Copied! <pre>ed.download_from_repository('NOM_9999_Si_640g_PAC_50_ff_ftfrgr_up-to-50.gr', destination='data')\n</pre> ed.download_from_repository('NOM_9999_Si_640g_PAC_50_ff_ftfrgr_up-to-50.gr', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/NOM_9999_Si_640g_PAC_50_ff_ftfrgr_up-to-50.gr' already exists and will not be overwritten.\n</pre> In\u00a0[8]: Copied! <pre>project.experiments.add(\n    name='nomad',\n    sample_form='powder',\n    beam_mode='time-of-flight',\n    radiation_probe='neutron',\n    scattering_type='total',\n    data_path='data/NOM_9999_Si_640g_PAC_50_ff_ftfrgr_up-to-50.gr',\n)\n</pre> project.experiments.add(     name='nomad',     sample_form='powder',     beam_mode='time-of-flight',     radiation_probe='neutron',     scattering_type='total',     data_path='data/NOM_9999_Si_640g_PAC_50_ff_ftfrgr_up-to-50.gr', ) <pre>\nLoading measured data from ASCII file\n/Users/runner/work/diffraction-lib/diffraction-lib/docs/tutorials/data/NOM_9999_Si_640g_PAC_50_ff_ftfrgr_up-to-50.gr\nWarning: No uncertainty (sy) column provided. Defaulting to 0.03.\n\nData loaded successfully\nExperiment \ud83d\udd2c 'nomad'. Number of data points: 5033\n</pre> In\u00a0[9]: Copied! <pre>experiment = project.experiments['nomad']\nexperiment.linked_phases.add(id='si', scale=1.0)\nexperiment.peak.damp_q = 0.02\nexperiment.peak.broad_q = 0.03\nexperiment.peak.cutoff_q = 35.0\nexperiment.peak.sharp_delta_1 = 0.0\nexperiment.peak.sharp_delta_2 = 4.0\nexperiment.peak.damp_particle_diameter = 0\n</pre> experiment = project.experiments['nomad'] experiment.linked_phases.add(id='si', scale=1.0) experiment.peak.damp_q = 0.02 experiment.peak.broad_q = 0.03 experiment.peak.cutoff_q = 35.0 experiment.peak.sharp_delta_1 = 0.0 experiment.peak.sharp_delta_2 = 4.0 experiment.peak.damp_particle_diameter = 0 In\u00a0[10]: Copied! <pre>project.sample_models['si'].cell.length_a.free = True\nproject.sample_models['si'].atom_sites['Si'].b_iso.free = True\nexperiment.linked_phases['si'].scale.free = True\n</pre> project.sample_models['si'].cell.length_a.free = True project.sample_models['si'].atom_sites['Si'].b_iso.free = True experiment.linked_phases['si'].scale.free = True In\u00a0[11]: Copied! <pre>experiment.peak.damp_q.free = True\nexperiment.peak.broad_q.free = True\nexperiment.peak.sharp_delta_1.free = True\nexperiment.peak.sharp_delta_2.free = True\n</pre> experiment.peak.damp_q.free = True experiment.peak.broad_q.free = True experiment.peak.sharp_delta_1.free = True experiment.peak.sharp_delta_2.free = True In\u00a0[12]: Copied! <pre>project.analysis.current_calculator = 'pdffit'\nproject.analysis.fit()\n</pre> project.analysis.current_calculator = 'pdffit' project.analysis.fit() <pre>\nCurrent calculator changed to\npdffit\n\nUsing experiment \ud83d\udd2c 'nomad' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 3102.63 11 2177.55 29.8% \u2193 19 345.28 84.1% \u2193 27 180.23 47.8% \u2193 35 170.60 5.3% \u2193 68 170.54 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 170.54 at iteration 67\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 5.66 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 170.54\n\ud83d\udccf R-factor (Rf): 8.40%\n\ud83d\udccf R-factor squared (Rf\u00b2): 8.30%\n\ud83d\udccf Weighted R-factor (wR): 8.30%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 si atom_sites Si b_iso 0.5000 0.7170 0.0050 \u00c5\u00b2 43.40 % \u2191 2 si cell length_a 5.4315 5.4306 0.0000 \u00c5 0.02 % \u2193 3 nomad linked_phases si scale 1.0000 1.2728 0.0014 27.28 % \u2191 4 nomad peak broad_q 0.0300 0.0183 0.0003 \u00c5\u207b\u00b2 39.10 % \u2193 5 nomad peak damp_q 0.0200 0.0251 0.0001 \u00c5\u207b\u00b9 25.66 % \u2191 6 nomad peak sharp_delta_1 0.0000 2.5400 0.0529 \u00c5 N/A 7 nomad peak sharp_delta_2 4.0000 -1.7525 0.1244 \u00c5\u00b2 143.81 % \u2193 In\u00a0[13]: Copied! <pre>project.plot_meas_vs_calc(expt_name='nomad', show_residual=False)\n</pre> project.plot_meas_vs_calc(expt_name='nomad', show_residual=False)"},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#pair-distribution-function-si-npd","title":"Pair Distribution Function: Si, NPD\u00b6","text":"<p>This example demonstrates a pair distribution function (PDF) analysis of Si, based on data collected from a time-of-flight neutron powder diffraction experiment at NOMAD at SNS.</p>"},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#set-plotting-engine","title":"Set Plotting Engine\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#add-experiment","title":"Add Experiment\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#select-fitting-parameters","title":"Select Fitting Parameters\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/pdf_pd-neut-tof_Si-NOMAD/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/pdf_pd-xray_NaCl/","title":"NaCl pd-xray","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>project = ed.Project()\n</pre> project = ed.Project() In\u00a0[4]: Copied! <pre>project.plotter.engine = 'plotly'\nproject.plotter.x_min = 2.0\nproject.plotter.x_max = 30.0\n</pre> project.plotter.engine = 'plotly' project.plotter.x_min = 2.0 project.plotter.x_max = 30.0 <pre>\nCurrent plotter changed to\nplotly\n</pre> In\u00a0[5]: Copied! <pre>project.sample_models.add(name='nacl')\n</pre> project.sample_models.add(name='nacl') In\u00a0[6]: Copied! <pre>project.sample_models['nacl'].space_group.name_h_m = 'F m -3 m'\nproject.sample_models['nacl'].space_group.it_coordinate_system_code = '1'\nproject.sample_models['nacl'].cell.length_a = 5.62\nproject.sample_models['nacl'].atom_sites.add(\n    label='Na', type_symbol='Na', fract_x=0, fract_y=0, fract_z=0, wyckoff_letter='a', b_iso=1.0\n)\nproject.sample_models['nacl'].atom_sites.add(\n    label='Cl', type_symbol='Cl', fract_x=0.5, fract_y=0.5, fract_z=0.5, wyckoff_letter='b', b_iso=1.0\n)\n</pre> project.sample_models['nacl'].space_group.name_h_m = 'F m -3 m' project.sample_models['nacl'].space_group.it_coordinate_system_code = '1' project.sample_models['nacl'].cell.length_a = 5.62 project.sample_models['nacl'].atom_sites.add(     label='Na', type_symbol='Na', fract_x=0, fract_y=0, fract_z=0, wyckoff_letter='a', b_iso=1.0 ) project.sample_models['nacl'].atom_sites.add(     label='Cl', type_symbol='Cl', fract_x=0.5, fract_y=0.5, fract_z=0.5, wyckoff_letter='b', b_iso=1.0 ) In\u00a0[7]: Copied! <pre>ed.download_from_repository('NaCl.gr', destination='data')\n</pre> ed.download_from_repository('NaCl.gr', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/NaCl.gr' already exists and will not be overwritten.\n</pre> In\u00a0[8]: Copied! <pre>project.experiments.add(\n    name='xray_pdf',\n    sample_form='powder',\n    beam_mode='constant wavelength',\n    radiation_probe='xray',\n    scattering_type='total',\n    data_path='data/NaCl.gr',\n)\n</pre> project.experiments.add(     name='xray_pdf',     sample_form='powder',     beam_mode='constant wavelength',     radiation_probe='xray',     scattering_type='total',     data_path='data/NaCl.gr', ) <pre>\nLoading measured data from ASCII file\n/Users/runner/work/diffraction-lib/diffraction-lib/docs/tutorials/data/NaCl.gr\nWarning: No uncertainty (sy) column provided. Defaulting to 0.03.\n\nData loaded successfully\nExperiment \ud83d\udd2c 'xray_pdf'. Number of data points: 5000\n</pre> In\u00a0[9]: Copied! <pre>project.experiments['xray_pdf'].show_supported_peak_profile_types()\n</pre> project.experiments['xray_pdf'].show_supported_peak_profile_types() <pre>\nSupported peak profile types\n</pre> Peak profile type Description gaussian-damped-sinc Gaussian-damped sinc PDF profile In\u00a0[10]: Copied! <pre>project.experiments['xray_pdf'].show_current_peak_profile_type()\n</pre> project.experiments['xray_pdf'].show_current_peak_profile_type() <pre>\nCurrent peak profile type\ngaussian-damped-sinc\n</pre> In\u00a0[11]: Copied! <pre>project.experiments['xray_pdf'].peak_profile_type = 'gaussian-damped-sinc'\n</pre> project.experiments['xray_pdf'].peak_profile_type = 'gaussian-damped-sinc' <pre>\nPeak profile type for experiment 'xray_pdf' changed to\ngaussian-damped-sinc\n</pre> In\u00a0[12]: Copied! <pre>project.experiments['xray_pdf'].peak.damp_q = 0.03\nproject.experiments['xray_pdf'].peak.broad_q = 0\nproject.experiments['xray_pdf'].peak.cutoff_q = 21\nproject.experiments['xray_pdf'].peak.sharp_delta_1 = 0\nproject.experiments['xray_pdf'].peak.sharp_delta_2 = 5\nproject.experiments['xray_pdf'].peak.damp_particle_diameter = 0\n</pre> project.experiments['xray_pdf'].peak.damp_q = 0.03 project.experiments['xray_pdf'].peak.broad_q = 0 project.experiments['xray_pdf'].peak.cutoff_q = 21 project.experiments['xray_pdf'].peak.sharp_delta_1 = 0 project.experiments['xray_pdf'].peak.sharp_delta_2 = 5 project.experiments['xray_pdf'].peak.damp_particle_diameter = 0 In\u00a0[13]: Copied! <pre>project.experiments['xray_pdf'].linked_phases.add(id='nacl', scale=0.5)\n</pre> project.experiments['xray_pdf'].linked_phases.add(id='nacl', scale=0.5) In\u00a0[14]: Copied! <pre>project.sample_models['nacl'].cell.length_a.free = True\nproject.sample_models['nacl'].atom_sites['Na'].b_iso.free = True\nproject.sample_models['nacl'].atom_sites['Cl'].b_iso.free = True\n</pre> project.sample_models['nacl'].cell.length_a.free = True project.sample_models['nacl'].atom_sites['Na'].b_iso.free = True project.sample_models['nacl'].atom_sites['Cl'].b_iso.free = True In\u00a0[15]: Copied! <pre>project.experiments['xray_pdf'].linked_phases['nacl'].scale.free = True\nproject.experiments['xray_pdf'].peak.damp_q.free = True\nproject.experiments['xray_pdf'].peak.sharp_delta_2.free = True\n</pre> project.experiments['xray_pdf'].linked_phases['nacl'].scale.free = True project.experiments['xray_pdf'].peak.damp_q.free = True project.experiments['xray_pdf'].peak.sharp_delta_2.free = True In\u00a0[16]: Copied! <pre>project.analysis.current_calculator = 'pdffit'\nproject.analysis.fit()\n</pre> project.analysis.current_calculator = 'pdffit' project.analysis.fit() <pre>\nCurrent calculator changed to\npdffit\n\nUsing experiment \ud83d\udd2c 'xray_pdf' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 163.09 10 17.06 89.5% \u2193 17 2.27 86.7% \u2193 24 1.48 34.6% \u2193 53 1.48 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 1.48 at iteration 52\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 4.35 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 1.48\n\ud83d\udccf R-factor (Rf): 11.02%\n\ud83d\udccf R-factor squared (Rf\u00b2): 11.38%\n\ud83d\udccf Weighted R-factor (wR): 11.38%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 nacl atom_sites Na b_iso 1.0000 1.1053 0.0077 \u00c5\u00b2 10.53 % \u2191 2 nacl atom_sites Cl b_iso 1.0000 0.5707 0.0028 \u00c5\u00b2 42.93 % \u2193 3 nacl cell length_a 5.6200 5.6018 0.0001 \u00c5 0.32 % \u2193 4 xray_pdf linked_phases nacl scale 0.5000 0.4254 0.0006 14.93 % \u2193 5 xray_pdf peak damp_q 0.0300 0.0606 0.0001 \u00c5\u207b\u00b9 102.13 % \u2191 6 xray_pdf peak sharp_delta_2 5.0000 3.5041 0.0667 \u00c5\u00b2 29.92 % \u2193 In\u00a0[17]: Copied! <pre>project.plot_meas_vs_calc(expt_name='xray_pdf')\n</pre> project.plot_meas_vs_calc(expt_name='xray_pdf')"},{"location":"tutorials/pdf_pd-xray_NaCl/#pair-distribution-function-nacl-xrd","title":"Pair Distribution Function: NaCl, XRD\u00b6","text":"<p>This example demonstrates a pair distribution function (PDF) analysis of NaCl, based on data collected from an X-ray powder diffraction experiment.</p> <p>The dataset is taken from: https://github.com/diffpy/add2019-diffpy-cmi/tree/master</p>"},{"location":"tutorials/pdf_pd-xray_NaCl/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/pdf_pd-xray_NaCl/#create-project","title":"Create Project\u00b6","text":""},{"location":"tutorials/pdf_pd-xray_NaCl/#set-plotting-engine","title":"Set Plotting Engine\u00b6","text":""},{"location":"tutorials/pdf_pd-xray_NaCl/#add-sample-model","title":"Add Sample Model\u00b6","text":""},{"location":"tutorials/pdf_pd-xray_NaCl/#add-experiment","title":"Add Experiment\u00b6","text":""},{"location":"tutorials/pdf_pd-xray_NaCl/#select-fitting-parameters","title":"Select Fitting Parameters\u00b6","text":""},{"location":"tutorials/pdf_pd-xray_NaCl/#run-fitting","title":"Run Fitting\u00b6","text":""},{"location":"tutorials/pdf_pd-xray_NaCl/#plot-measured-vs-calculated","title":"Plot Measured vs Calculated\u00b6","text":""},{"location":"tutorials/quick_single-fit_pd-neut-cwl_LBCO-HRPT/","title":"LBCO quick","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <pre>\u26a0\ufe0f 'pycrysfml' module not found. This calculation engine will not be available.\n\u2705 'cryspy' calculation engine is successfully imported.\n\u2705 'pdffit' calculation engine is successfully imported.\n</pre> In\u00a0[3]: Copied! <pre>project = ed.Project()\n</pre> project = ed.Project() In\u00a0[4]: Copied! <pre>project.sample_models.add(name='lbco')\n</pre> project.sample_models.add(name='lbco') In\u00a0[5]: Copied! <pre>sample_model = project.sample_models['lbco']\n</pre> sample_model = project.sample_models['lbco'] In\u00a0[6]: Copied! <pre>sample_model.space_group.name_h_m = 'P m -3 m'\nsample_model.space_group.it_coordinate_system_code = '1'\n</pre> sample_model.space_group.name_h_m = 'P m -3 m' sample_model.space_group.it_coordinate_system_code = '1' In\u00a0[7]: Copied! <pre>sample_model.cell.length_a = 3.88\n</pre> sample_model.cell.length_a = 3.88 In\u00a0[8]: Copied! <pre>sample_model.atom_sites.add('La', 'La', 0, 0, 0, b_iso=0.5, occupancy=0.5)\nsample_model.atom_sites.add('Ba', 'Ba', 0, 0, 0, b_iso=0.5, occupancy=0.5)\nsample_model.atom_sites.add('Co', 'Co', 0.5, 0.5, 0.5, b_iso=0.5)\nsample_model.atom_sites.add('O', 'O', 0, 0.5, 0.5, b_iso=0.5)\n</pre> sample_model.atom_sites.add('La', 'La', 0, 0, 0, b_iso=0.5, occupancy=0.5) sample_model.atom_sites.add('Ba', 'Ba', 0, 0, 0, b_iso=0.5, occupancy=0.5) sample_model.atom_sites.add('Co', 'Co', 0.5, 0.5, 0.5, b_iso=0.5) sample_model.atom_sites.add('O', 'O', 0, 0.5, 0.5, b_iso=0.5) In\u00a0[9]: Copied! <pre>ed.download_from_repository('hrpt_lbco.xye', destination='data')\n</pre> ed.download_from_repository('hrpt_lbco.xye', destination='data') <pre>\n\u26a0\ufe0f Warning\nFile 'data/hrpt_lbco.xye' already exists and will not be overwritten.\n</pre> In\u00a0[10]: Copied! <pre>project.experiments.add(\n    name='hrpt',\n    sample_form='powder',\n    beam_mode='constant wavelength',\n    radiation_probe='neutron',\n    data_path='data/hrpt_lbco.xye',\n)\n</pre> project.experiments.add(     name='hrpt',     sample_form='powder',     beam_mode='constant wavelength',     radiation_probe='neutron',     data_path='data/hrpt_lbco.xye', ) <pre>\nLoading measured data from ASCII file\n/Users/runner/work/diffraction-lib/diffraction-lib/docs/tutorials/data/hrpt_lbco.xye\n\nData loaded successfully\nExperiment \ud83d\udd2c 'hrpt'. Number of data points: 3098\n</pre> In\u00a0[11]: Copied! <pre>experiment = project.experiments['hrpt']\n</pre> experiment = project.experiments['hrpt'] In\u00a0[12]: Copied! <pre>experiment.instrument.setup_wavelength = 1.494\nexperiment.instrument.calib_twotheta_offset = 0.6\n</pre> experiment.instrument.setup_wavelength = 1.494 experiment.instrument.calib_twotheta_offset = 0.6 In\u00a0[13]: Copied! <pre>experiment.peak.broad_gauss_u = 0.1\nexperiment.peak.broad_gauss_v = -0.1\nexperiment.peak.broad_gauss_w = 0.1\nexperiment.peak.broad_lorentz_y = 0.1\n</pre> experiment.peak.broad_gauss_u = 0.1 experiment.peak.broad_gauss_v = -0.1 experiment.peak.broad_gauss_w = 0.1 experiment.peak.broad_lorentz_y = 0.1 In\u00a0[14]: Copied! <pre>experiment.background.add(x=10, y=170)\nexperiment.background.add(x=30, y=170)\nexperiment.background.add(x=50, y=170)\nexperiment.background.add(x=110, y=170)\nexperiment.background.add(x=165, y=170)\n</pre> experiment.background.add(x=10, y=170) experiment.background.add(x=30, y=170) experiment.background.add(x=50, y=170) experiment.background.add(x=110, y=170) experiment.background.add(x=165, y=170) In\u00a0[15]: Copied! <pre>experiment.excluded_regions.add(minimum=0, maximum=5)\nexperiment.excluded_regions.add(minimum=165, maximum=180)\n</pre> experiment.excluded_regions.add(minimum=0, maximum=5) experiment.excluded_regions.add(minimum=165, maximum=180) In\u00a0[16]: Copied! <pre>experiment.linked_phases.add(id='lbco', scale=10.0)\n</pre> experiment.linked_phases.add(id='lbco', scale=10.0) In\u00a0[17]: Copied! <pre>sample_model.cell.length_a.free = True\n\nsample_model.atom_sites['La'].b_iso.free = True\nsample_model.atom_sites['Ba'].b_iso.free = True\nsample_model.atom_sites['Co'].b_iso.free = True\nsample_model.atom_sites['O'].b_iso.free = True\n</pre> sample_model.cell.length_a.free = True  sample_model.atom_sites['La'].b_iso.free = True sample_model.atom_sites['Ba'].b_iso.free = True sample_model.atom_sites['Co'].b_iso.free = True sample_model.atom_sites['O'].b_iso.free = True In\u00a0[18]: Copied! <pre>experiment.instrument.calib_twotheta_offset.free = True\n\nexperiment.peak.broad_gauss_u.free = True\nexperiment.peak.broad_gauss_v.free = True\nexperiment.peak.broad_gauss_w.free = True\nexperiment.peak.broad_lorentz_y.free = True\n\nexperiment.background['10'].y.free = True\nexperiment.background['30'].y.free = True\nexperiment.background['50'].y.free = True\nexperiment.background['110'].y.free = True\nexperiment.background['165'].y.free = True\n\nexperiment.linked_phases['lbco'].scale.free = True\n</pre> experiment.instrument.calib_twotheta_offset.free = True  experiment.peak.broad_gauss_u.free = True experiment.peak.broad_gauss_v.free = True experiment.peak.broad_gauss_w.free = True experiment.peak.broad_lorentz_y.free = True  experiment.background['10'].y.free = True experiment.background['30'].y.free = True experiment.background['50'].y.free = True experiment.background['110'].y.free = True experiment.background['165'].y.free = True  experiment.linked_phases['lbco'].scale.free = True In\u00a0[19]: Copied! <pre>project.analysis.fit()\n</pre> project.analysis.fit() <pre>\nUsing experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fit process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n</pre> iteration \u03c7\u00b2 improvement [%] 1 165.02 28 33.58 79.7% \u2193 45 10.82 67.8% \u2193 63 6.49 40.0% \u2193 81 3.35 48.4% \u2193 98 2.24 33.1% \u2193 116 1.91 14.7% \u2193 133 1.50 21.3% \u2193 150 1.45 3.6% \u2193 167 1.34 7.8% \u2193 185 1.29 3.4% \u2193 276 1.29 <pre>\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 1.29 at iteration 275\n\u2705 Fitting complete.\n\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 1.54 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 1.29\n\ud83d\udccf R-factor (Rf): 5.63%\n\ud83d\udccf R-factor squared (Rf\u00b2): 5.27%\n\ud83d\udccf Weighted R-factor (wR): 4.41%\n\ud83d\udcc8 Fitted parameters:\n</pre> datablock category entry parameter start fitted uncertainty units change 1 lbco atom_sites La b_iso 0.5000 0.5052 3231.6242 \u00c5\u00b2 1.04 % \u2191 2 lbco atom_sites Ba b_iso 0.5000 0.5049 5252.3879 \u00c5\u00b2 0.97 % \u2191 3 lbco atom_sites Co b_iso 0.5000 0.2370 0.0611 \u00c5\u00b2 52.60 % \u2193 4 lbco atom_sites O b_iso 0.5000 1.3935 0.0167 \u00c5\u00b2 178.71 % \u2191 5 lbco cell length_a 3.8800 3.8909 0.0000 \u00c5 0.28 % \u2191 6 hrpt background 10 y 170.0000 168.5585 1.3671 0.85 % \u2193 7 hrpt background 30 y 170.0000 164.3357 0.9992 3.33 % \u2193 8 hrpt background 50 y 170.0000 166.8881 0.7388 1.83 % \u2193 9 hrpt background 110 y 170.0000 175.4006 0.6578 3.18 % \u2191 10 hrpt background 165 y 170.0000 174.2813 0.9105 2.52 % \u2191 11 hrpt instrument twotheta_offset 0.6000 0.6226 0.0010 deg 3.76 % \u2191 12 hrpt linked_phases lbco scale 10.0000 9.1351 0.0642 8.65 % \u2193 13 hrpt peak broad_gauss_u 0.1000 0.0816 0.0031 deg\u00b2 18.43 % \u2193 14 hrpt peak broad_gauss_v -0.1000 -0.1159 0.0067 deg\u00b2 15.93 % \u2191 15 hrpt peak broad_gauss_w 0.1000 0.1204 0.0033 deg\u00b2 20.45 % \u2191 16 hrpt peak broad_lorentz_y 0.1000 0.0844 0.0021 deg 15.55 % \u2193 In\u00a0[20]: Copied! <pre>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</pre> project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)"},{"location":"tutorials/quick_single-fit_pd-neut-cwl_LBCO-HRPT/#structure-refinement-lbco-hrpt","title":"Structure Refinement: LBCO, HRPT\u00b6","text":"<p>This minimalistic example is designed to be as compact as possible for a Rietveld refinement of a crystal structure using constant-wavelength neutron powder diffraction data for La0.5Ba0.5CoO3 from HRPT at PSI.</p> <p>It does not contain any advanced features or options, and includes no comments or explanations\u2014these can be found in the other tutorials. Default values are used for all parameters if not specified. Only essential and self-explanatory code is provided.</p> <p>The example is intended for users who are already familiar with the EasyDiffraction library and want to quickly get started with a simple refinement. It is also useful for those who want to see what a refinement might look like in code. For a more detailed explanation of the code, please refer to the other tutorials.</p>"},{"location":"tutorials/quick_single-fit_pd-neut-cwl_LBCO-HRPT/#import-library","title":"Import Library\u00b6","text":""},{"location":"tutorials/quick_single-fit_pd-neut-cwl_LBCO-HRPT/#step-1-define-project","title":"Step 1: Define Project\u00b6","text":""},{"location":"tutorials/quick_single-fit_pd-neut-cwl_LBCO-HRPT/#step-2-define-sample-model","title":"Step 2: Define Sample Model\u00b6","text":""},{"location":"tutorials/quick_single-fit_pd-neut-cwl_LBCO-HRPT/#step-3-define-experiment","title":"Step 3: Define Experiment\u00b6","text":""},{"location":"tutorials/quick_single-fit_pd-neut-cwl_LBCO-HRPT/#step-4-perform-analysis","title":"Step 4: Perform Analysis\u00b6","text":""},{"location":"user-guide/","title":"User Guide","text":"<p>This section provides an overview of the core concepts, key parameters and workflow steps required for using EasyDiffraction effectively.</p> <p>Here is a brief overview of the User Guide sections:</p> <ul> <li>Glossary \u2013 Defines common terms and labels used throughout the   documentation.</li> <li>Concept \u2013 Introduces the overall idea behind diffraction data   processing and where EasyDiffraction fits.</li> <li>Data Format \u2013 Explains the Crystallographic Information File   (CIF) and how it's used in EasyDiffraction.</li> <li>Parameters \u2013 Describes how parameters are structured, named,   and accessed within the EasyDiffraction library.</li> <li>First Steps \u2013 Shows how to begin using EasyDiffraction in   Python or Jupyter notebooks.</li> <li>Analysis Workflow \u2013 Breaks down the data   analysis pipeline into practical, sequential steps.</li> </ul>"},{"location":"user-guide/concept/","title":"Concept","text":"<p>Typical data processing in a diffraction experiment consists of three main steps: data acquisition, data reduction, and data analysis.</p> <pre><code>flowchart LR\n    a(Data Aquisition)\n    b(Data Reduction)\n    c(Data Analysis)\n    a --&gt; b\n    b --&gt; c</code></pre>"},{"location":"user-guide/concept/#data-acquisition","title":"Data Acquisition","text":"<p>Data acquisition involves collecting raw data from the diffractometer (also referred to as the instrument) during a neutron or X-ray diffraction experiment.</p> <p>The data is recorded by a detector that measures the intensity of the diffracted radiation as a function of angle or time. The radiation is scattered by the crystalline specimen (also called the sample), whose structural properties are being studied.</p> <p></p> <p>An illustration of the data acquisition step, where raw data is collected by a 2D detector. The studied sample originates from Mars.  Credits: DOI 10.1126/science.1238932</p> <p></p> <p>A 2D diffraction pattern collected by the detector.  Credits: DOI 10.1126/science.1238932</p>"},{"location":"user-guide/concept/#data-reduction","title":"Data Reduction","text":"<p>Data reduction involves processing the raw data to remove background noise, correct for instrumental effects, and convert the data into a more usable format. The goal is to produce a clean and reliable dataset suitable for analysis.</p> <p></p> <p>An illustration of a 1D diffraction pattern reduced from the measured 2D data.  Credits: DOI 10.1126/science.1238932</p>"},{"location":"user-guide/concept/#data-analysis","title":"Data Analysis","text":"<p>Data analysis uses the reduced data to extract meaningful information about the sample. This may include determining the crystal or magnetic structure, identifying phases, performing quantitative analysis, etc.</p> <p>Analysis often involves comparing experimental data with data calculated from a crystallographic model to validate and interpret the results. For powder diffraction, techniques such as Rietveld or Le Bail refinement may be used.</p> <p>In EasyDiffraction, we focus on this model-dependent analysis. A model is built using prior knowledge of the system, and its parameters are optimized to achieve the best agreement between experimental and calculated diffraction data.</p> <p>By \"model\", we usually refer to a crystallographic model of the sample. This includes unit cell parameters, space group, atomic positions, thermal parameters, and more. However, the term \"model\" also encompasses experimental aspects such as instrumental resolution, background, peak shape, etc. Therefore, EasyDiffraction separates the model into two parts: the sample model and the experiment.</p> <p>The aim of data analysis is to refine the structural parameters of the sample by minimizing the difference (or residual) between the experimental and calculated data \u2014 and this is exactly where EasyDiffraction comes into play.</p> <p></p> <p>An illustration of the data analysis step: the experimental data (blue) is compared to the calculated data (red), and the residual (gray) is minimized.  Credits: DOI 10.1126/science.1238932</p> <p></p> <p>An example of a crystal structure model of the studied sample.</p>"},{"location":"user-guide/data-format/","title":"Data Format","text":"<p>Before starting the data analysis workflow, it is important to define the data formats used in EasyDiffraction.</p>"},{"location":"user-guide/data-format/#crystallographic-information-file","title":"Crystallographic Information File","text":"<p>Each software package typically uses its own data format and parameter names for storing and sharing data. In EasyDiffraction, we use the Crystallographic Information File (CIF) format, which is widely used in crystallography and materials science. It provides both a human-readable syntax and a set of dictionaries that define the meaning of each parameter.</p> <p>These dictionaries are maintained by the International Union of Crystallography (IUCr). The base dictionary, coreCIF, contains the most common parameters in crystallography. The pdCIF dictionary covers parameters specific to powder diffraction, magCIF is used for magnetic structure analysis.</p> <p>As most parameters needed for diffraction data analysis are already covered by IUCr dictionaries, EasyDiffraction uses the strict CIF format and follows these dictionaries as closely as possible \u2014 for both input and output \u2014 throughout the workflow described in the Analysis Workflow section.</p> <p>The key advantage of CIF is the standardized naming of parameters and categories, which promotes interoperability and familiarity among researchers.</p> <p>If a required parameter is not defined in the standard dictionaries, EasyDiffraction introduces custom CIF keywords, documented in the Parameters section under the CIF name for serialization columns.</p>"},{"location":"user-guide/data-format/#format-comparison","title":"Format Comparison","text":"<p>Below, we compare CIF with another common data format in programming: JSON.</p>"},{"location":"user-guide/data-format/#scientific-journals","title":"Scientific Journals","text":"<p>Let's assume the following structural data for La\u2080.\u2085Ba\u2080.\u2085CoO\u2083 (LBCO), as reported in a scientific publication. These parameters are to be refined during diffraction data analysis:</p> <p>Table 1. Crystallographic data. Space group: Pm3\u0305m.</p> Parameter Value a 3.8909 b 3.8909 c 3.8909 alpha 90.0 beta 90.0 gamma 90.0 <p>Table 2. Atomic coordinates (x, y, z), occupancies (occ) and isotropic displacement parameters (Biso)</p> Label Type x y z occ Biso La La 0 0 0 0.5 0.4958 Ba Ba 0 0 0 0.5 0.4958 Co Co 0.5 0.5 0.5 1.0 0.2567 O O 0 0.5 0.5 1.0 1.4041"},{"location":"user-guide/data-format/#cif","title":"CIF","text":"<p>The data above would be represented in CIF as follows:</p> <pre>\ndata_lbco\n\n_space_group.name_H-M_alt              \"P m -3 m\"\n_space_group.IT_coordinate_system_code 1\n\n_cell.length_a      3.8909\n_cell.length_b      3.8909\n_cell.length_c      3.8909\n_cell.angle_alpha  90\n_cell.angle_beta   90\n_cell.angle_gamma  90\n\nloop_\n_atom_site.label\n_atom_site.type_symbol\n_atom_site.fract_x\n_atom_site.fract_y\n_atom_site.fract_z\n_atom_site.Wyckoff_letter\n_atom_site.occupancy\n_atom_site.adp_type\n_atom_site.B_iso_or_equiv\nLa La   0   0   0     a   0.5  Biso 0.4958\nBa Ba   0   0   0     a   0.5  Biso 0.4958\nCo Co   0.5 0.5 0.5   b   1    Biso 0.2567\nO  O    0   0.5 0.5   c   1    Biso 1.4041\n</pre> <p>Here, unit cell parameters are grouped under the <code>_cell</code> category, and atomic positions under the <code>_atom_site</code> category. The <code>loop_</code> keyword indicates that multiple rows follow for the listed parameters. Each atom is identified using <code>_atom_site.label</code>.</p>"},{"location":"user-guide/data-format/#json","title":"JSON","text":"<p>Representing the same data in JSON results in a format that is more verbose and less human-readable, especially for large datasets. JSON is ideal for structured data in programming environments, whereas CIF is better suited for human-readable crystallographic data.</p> <pre><code>{\n  \"lbco\": {\n    \"space_group\": {\n      \"name_H-M_alt\": \"P m -3 m\",\n      \"IT_coordinate_system_code\": 1\n    },\n    \"cell\": {\n      \"length_a\": 3.8909,\n      \"length_b\": 3.8909,\n      \"length_c\": 3.8909,\n      \"angle_alpha\": 90,\n      \"angle_beta\": 90,\n      \"angle_gamma\": 90\n    },\n    \"atom_site\": [\n      {\n        \"label\": \"La\",\n        \"type_symbol\": \"La\",\n        \"fract_x\": 0,\n        \"fract_y\": 0,\n        \"fract_z\": 0,\n        \"occupancy\": 0.5,\n        \"B_iso_or_equiv\": 0.4958\n      },\n      {\n        \"label\": \"Ba\",\n        \"type_symbol\": \"Ba\",\n        \"fract_x\": 0,\n        \"fract_y\": 0,\n        \"fract_z\": 0,\n        \"occupancy\": 0.5,\n        \"B_iso_or_equiv\": 0.4943\n      },\n      {\n        \"label\": \"Co\",\n        \"type_symbol\": \"Co\",\n        \"fract_x\": 0.5,\n        \"fract_y\": 0.5,\n        \"fract_z\": 0.5,\n        \"occupancy\": 1.0,\n        \"B_iso_or_equiv\": 0.2567\n      },\n      {\n        \"label\": \"O\",\n        \"type_symbol\": \"O\",\n        \"fract_x\": 0,\n        \"fract_y\": 0.5,\n        \"fract_z\": 0.5,\n        \"occupancy\": 1.0,\n        \"B_iso_or_equiv\": 1.4041\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"user-guide/data-format/#experiment-definition","title":"Experiment Definition","text":"<p>The previous example described the sample model (crystallographic model), but how is the experiment itself represented?</p> <p>The experiment is also saved as a CIF file. For example, background intensity in a powder diffraction experiment might be represented as:</p> <pre>\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n\n 10.0  174.3  2theta\n 20.0  159.8  2theta\n 30.0  167.9  2theta\n ...\n</pre> <p>More details on how to define the experiment in CIF format are provided in the Experiment section.</p>"},{"location":"user-guide/data-format/#other-inputoutput-blocks","title":"Other Input/Output Blocks","text":"<p>EasyDiffraction uses CIF consistently throughout its workflow, including in the following blocks:</p> <ul> <li>project: contains the project information</li> <li>sample model: defines the sample model</li> <li>experiment: contains the experiment setup and measured data</li> <li>analysis: stores fitting and analysis parameters</li> <li>summary: captures analysis results</li> </ul> <p>Example CIF files for each block are provided in the Analysis Workflow and Tutorials.</p>"},{"location":"user-guide/data-format/#other-data-formats","title":"Other Data Formats","text":"<p>While CIF is the primary format in EasyDiffraction, we also support other formats for importing measured data. These include plain text files with multiple columns. The meaning of the columns depends on the experiment type.</p> <p>For example, in a standard constant-wavelength powder diffraction experiment:</p> <ul> <li>Column 1: 2\u03b8 angle</li> <li>Column 2: intensity</li> <li>Column 3: standard uncertainty of the intensity</li> </ul> <p>More details on supported input formats are provided in the Experiment section.</p>"},{"location":"user-guide/first-steps/","title":"First Steps","text":"<p>This section introduces the basic usage of the EasyDiffraction Python API. You'll learn how to import the package, use core classes and utility functions, and access built-in helper methods to streamline diffraction data analysis workflows.</p>"},{"location":"user-guide/first-steps/#importing-easydiffraction","title":"Importing EasyDiffraction","text":""},{"location":"user-guide/first-steps/#importing-the-entire-package","title":"Importing the entire package","text":"<p>To start using EasyDiffraction, first import the package in your Python script or Jupyter Notebook. This can be done with the following command:</p> <pre><code>import easydiffraction\n</code></pre> <p>Alternatively, you can import it with an alias to avoid naming conflicts and for convenience:</p> <pre><code>import easydiffraction as ed\n</code></pre> <p>The latter syntax allows you to access all the modules and classes within the package using the <code>ed</code> prefix. For example, you can create a project instance like this:</p> <pre><code>project = ed.Project()\n</code></pre> <p>A complete tutorial using the <code>import</code> syntax can be found here.</p>"},{"location":"user-guide/first-steps/#importing-specific-parts","title":"Importing specific parts","text":"<p>Alternatively, you can import specific classes or methods from the package. For example, you can import the <code>Project</code>, <code>SampleModel</code>, <code>Experiment</code> classes and <code>download_from_repository</code> method like this:</p> <pre><code>from easydiffraction import (\n    Project,\n    SampleModel,\n    Experiment,\n    download_from_repository\n)\n</code></pre> <p>This enables you to use these classes and methods directly without the package prefix. This is especially useful when you're using only a few components and want to keep your code clean and concise. In this case, you can create a project instance like this:</p> <pre><code>project = Project()\n</code></pre> <p>A complete tutorial using the <code>from</code> syntax can be found here.</p>"},{"location":"user-guide/first-steps/#utility-functions","title":"Utility functions","text":"<p>EasyDiffraction also provides several utility functions that can simplify your workflow. One of them is the <code>download_from_repository</code> function, which allows you to download data files from our remote repository, making it easy to access and use them while experimenting with EasyDiffraction.</p> <p>For example, you can download a sample data file like this:</p> <pre><code>import easydiffraction as ed\n\ned.download_from_repository('hrpt_lbco.xye',\n                            branch='docs',\n                            destination='data')\n</code></pre> <p>This command will download the <code>hrpt_lbco.xye</code> file from the <code>docs</code> branch of the EasyDiffraction repository and save it in the <code>data</code> directory of your current working directory. This is particularly useful for quickly accessing example datasets without having to manually download them.</p>"},{"location":"user-guide/first-steps/#help-methods","title":"Help methods","text":"<p>EasyDiffraction provides several helper methods to display supported engines for calculation, minimization, and plotting. These methods can be called on the <code>Project</code> instance to display the available options for each category. For example, you can use the <code>show_supported_calculators()</code> method to see which calculation engines are available for use in your project:</p> <pre><code>project.show_supported_calculators()\n</code></pre> <p>This will display a list of supported calculators along with their descriptions, allowing you to choose the one that best fits your needs.</p> <p>An example of the output for the <code>show_supported_calculators()</code> method is:</p> Calculator Description cryspy CrysPy library for crystallographic calculations pdffit PDFfit2 library for pair distribution function calculations <p>Other helper methods include those for showing the available parameters grouped in different categories. For example, you can use:</p> <ul> <li><code>project.analysis.show_all_params()</code> \u2013 to display all available parameters for   the analysis step.</li> <li><code>project.analysis.show_fittable_params()</code> \u2013 to display only the parameters   that can be fitted during the analysis.</li> <li><code>project.analysis.show_free_params()</code> \u2013 to display the parameters that are   currently free to be adjusted during the fitting process.</li> </ul> <p>Finally, you can use the <code>project.analysis.how_to_access_parameters()</code> method to get a brief overview of how to access and modify parameters in the analysis step, along with their unique identifiers in the CIF format. This can be particularly useful for users who are new to the EasyDiffraction API or those who want to quickly understand how to work with parameters in their projects.</p> <p>An example of the output for the <code>project.analysis.how_to_access_parameters()</code> method is:</p> Code variable Unique ID for CIF 1 project.sample_models['lbco'].atom_site['La'].adp_type lbco.atom_site.La.ADP_type 2 project.sample_models['lbco'].atom_site['La'].b_iso lbco.atom_site.La.B_iso_or_equiv 3 project.sample_models['lbco'].atom_site['La'].fract_x lbco.atom_site.La.fract_x 4 project.sample_models['lbco'].atom_site['La'].fract_y lbco.atom_site.La.fract_y ... ... ... 59 project.experiments['hrpt'].peak.broad_gauss_u hrpt.peak.broad_gauss_u 60 project.experiments['hrpt'].peak.broad_gauss_v hrpt.peak.broad_gauss_v 61 project.experiments['hrpt'].peak.broad_gauss_w hrpt.peak.broad_gauss_w"},{"location":"user-guide/first-steps/#data-analysis-workflow","title":"Data analysis workflow","text":"<p>Once the EasyDiffraction package is imported, you can proceed with the data analysis. This step can be split into several sub-steps, such as creating a project, defining sample models, adding experimental data, etc.</p> <p>EasyDiffraction provides a Python API that allows you to perform these steps programmatically in a certain linear order. This is especially useful for users who prefer to work in a script or Jupyter Notebook environment. The API is designed to be intuitive and easy to use, allowing you to focus on the analysis rather than low-level implementation details.</p> <p>Because this workflow is an important part of the EasyDiffraction package, it is described in detail in the separate Analysis Workflow section of the documentation.</p>"},{"location":"user-guide/glossary/","title":"Glossary","text":"<p>Before guiding you through the use of EasyDiffraction, we define some common terms and abbreviations used throughout the documentation and tutorials.</p>"},{"location":"user-guide/glossary/#dictionary-type-labels","title":"Dictionary Type Labels","text":"<p>The following labels are used to identify different types of CIF dictionaries:</p> <ul> <li>coreCIF \u2013 Core CIF dictionary by the   IUCr.</li> <li>pdCIF \u2013 Powder CIF dictionary by the   IUCr.</li> <li>easydiffractionCIF \u2013 Custom CIF dictionary developed for   EasyDiffraction.</li> </ul> <p>For more information about CIF, see the Data Format section.</p>"},{"location":"user-guide/glossary/#experiment-type-labels","title":"Experiment Type Labels","text":"<p>EasyDiffraction supports a variety of experiment types, each with its own set of parameters. The following labels identify the supported experiment types:</p>"},{"location":"user-guide/glossary/#neutron-diffraction","title":"Neutron Diffraction","text":"<ul> <li>pd-neut-cwl \u2013 Powder neutron diffraction with   constant wavelength.</li> <li>pd-neut-tof \u2013 Powder neutron diffraction with   time-of-flight.</li> <li>sc-neut-cwl \u2013 Single-crystal neutron diffraction with   constant wavelength.</li> </ul>"},{"location":"user-guide/glossary/#x-ray-diffraction","title":"X-ray Diffraction","text":"<ul> <li>pd-xray Powder X-ray diffraction.</li> </ul>"},{"location":"user-guide/parameters/","title":"Parameters","text":"<p>The data analysis process, introduced in the Concept section, assumes that you mainly work with different parameters. The parameters are used to describe the sample model and the experiment and are required to set up the analysis.</p> <p>Each parameter in EasyDiffraction has a specific name used for code reference, and it belongs to a specific category.</p> <ul> <li>In many cases, the EasyDiffraction name is the same as the CIF name.</li> <li>In some cases, the EasyDiffraction name is a slightly modified version of the   CIF name to comply with Python naming conventions. For example, <code>name_H-M_alt</code>   becomes <code>name_h_m</code>, replacing hyphens with underscores and using lowercase   letters.</li> <li>In rare cases, the EasyDiffraction name is a bit shorter, like <code>b_iso</code> instead   of CIF <code>B_iso_or_equiv</code>, to make the code a bit more user-friendly.</li> <li>When there is no defined CIF name for a parameter, EasyDiffraction introduces   its own name, which is used in the code as well as an equivalent CIF name to   be placed in the custom CIF dictionary <code>easydiffractionCIF</code>.</li> </ul> <p>EasyDiffraction names are used in code, while CIF names are used to store and retrieve the full state of a data analysis project in CIF format. You can find more about the project in the Project section.</p>"},{"location":"user-guide/parameters/#parameter-attributes","title":"Parameter Attributes","text":"<p>Parameters in EasyDiffraction are more than just variables. They are objects that, in addition to the name and value, also include attributes such as the description, unit, uncertainty, minimum and maximum values, etc. All these attributes are described in the API Reference section. Examples of how to use these parameters in code are provided in the Analysis Workflow and Tutorials sections.</p> <p>The most important attribute, besides <code>name</code> and <code>value</code>, is <code>free</code>, which is used to define whether the parameter is free or fixed for optimization during the fitting process. The <code>free</code> attribute is set to <code>False</code> by default, which means the parameter is fixed. To optimize a parameter, set <code>free</code> to <code>True</code>.</p> <p>Although parameters are central, EasyDiffraction hides their creation and attribute handling from the user. The user only accesses the required parameters through the top-level objects, such as <code>project</code>, <code>sample_models</code>, <code>experiments</code>, etc. The parameters are created and initialized automatically when a new project is created or an existing one is loaded.</p> <p>In the following sections, you can see a list of the parameters used in EasyDiffraction. Use the tabs to switch between how to access a parameter in code and its CIF name for serialization.</p> <p>Important</p> <p>Remember that parameters are accessed in code through their parent objects, such as <code>project</code>, <code>sample_models</code>, or <code>experiments</code>. For example, if you have a sample model with the ID <code>nacl</code>, you can access the space group name using the following syntax:</p> <pre><code>project.sample_models['nacl'].space_group.name_h_m\n</code></pre> <p>In the example above, <code>space_group</code> is a sample model category, and <code>name_h_m</code> is the parameter. For simplicity, only the last part (<code>category.parameter</code>) of the full access name will be shown in the tables below.</p> <p>In addition, the CIF names are also provided for each parameter, which are used to serialize the parameters in the CIF format.</p> <p>Tags defining the corresponding experiment type are also given before the table.</p>"},{"location":"user-guide/parameters/#sample-model-parameters","title":"Sample model parameters","text":"<p>Below is a list of parameters used to describe the sample model in EasyDiffraction.</p>"},{"location":"user-guide/parameters/#crystall-structure-parameters","title":"Crystall structure parameters","text":"<p>pd-neut-cwl pd-neut-tof pd-xray sc-neut-cwl</p> How to access in the codeCIF name for serialization Category Parameter How to access in the code space_group name_hm space_group.name_hm system_code space_group.system_code cell length_a cell.length_a length_b cell.length_b length_c cell.length_c angle_alpha cell.angle_alpha angle_beta cell.angle_beta angle_gamma cell.angle_gamma atom_site label atom_sites['ID'].label type_symbol atom_sites['ID'].type_symbol fract_x atom_sites['ID'].fract_x fract_y atom_sites['ID'].fract_y fract_z atom_sites['ID'].fract_z occupancy atom_sites['ID'].occupancy adp_type atom_sites['ID'].adp_type b_iso atom_sites['ID'].b_iso multiplicity atom_sites['ID'].multiplicity wyckoff_letter atom_sites['ID'].wyckoff_letter Category Parameter CIF name for serialization CIF dictionary space_group name_hm _space_group.name_H-M_alt coreCIF system_code _space_group.IT_coordinate_system_code coreCIF cell length_a _cell.length_a coreCIF length_b _cell.length_b coreCIF length_c _cell.length_c coreCIF angle_alpha _cell.angle_alpha coreCIF angle_beta _cell.angle_beta coreCIF angle_gamma _cell.angle_gamma coreCIF atom_site label _atom_site.label coreCIF type_symbol _atom_site.type_symbol coreCIF fract_x _atom_site.fract_x coreCIF fract_y _atom_site.fract_y coreCIF fract_z _atom_site.fract_z coreCIF occupancy _atom_site.occupancy coreCIF adp_type _atom_site.ADP_type coreCIF b_iso _atom_site.B_iso_or_equiv coreCIF multiplicity _atom_site.site_symmetry_multiplicity coreCIF wyckoff_letter _atom_site.Wyckoff_symbol coreCIF"},{"location":"user-guide/parameters/#experiment-parameters","title":"Experiment parameters","text":"<p>Below is a list of parameters used to describe the experiment in EasyDiffraction.</p>"},{"location":"user-guide/parameters/#common-parameters","title":"Common parameters","text":"<p>pd-neut-cwl pd-neut-tof pd-xray sc-neut-cwl</p> How to access in the codeCIF name for serialization Category Parameter How to access in the code expt_type beam_mode expt_type.beam_mode radiation_probe expt_type.radiation_probe sample_form expt_type.sample_form scattering_type expt_type.scattering_type Category Parameter CIF name for serialization CIF dictionary expt_type beam_mode _expt_type.beam_mode easydiffractionCIF radiation_probe _expt_type.radiation_probe easydiffractionCIF sample_form _expt_type.sample_form easydiffractionCIF scattering_type _expt_type.scattering_type easydiffractionCIF"},{"location":"user-guide/parameters/#standard-powder-diffraction","title":"Standard powder diffraction","text":"<p>pd-neut-cwl pd-neut-tof pd-xray</p> How to access in the codeCIF name for serialization Category Parameter How to access in the code background x background.x y background.y order background.order coef background.coef linked_phases scale linked_phases['ID'].scale Category Parameter CIF name for serialization CIF dictionary background x _pd_background.line_segment_X pdCIF y _pd_background.line_segment_intensity pdCIF order _pd_background.chebyshev_order pdCIF coef _pd_background.chebyshev_coef pdCIF linked_phases scale _pd_phase_block.scale pdCIF <p>pd-neut-cwl pd-xray</p> How to access in the codeCIF name for serialization Category Parameter How to access in the code instrument setup_wavelength instrument.setup_wavelength calib_twotheta_offset instrument.calib_twotheta_offset peak broad_gauss_u peak.broad_gauss_u broad_gauss_v peak.broad_gauss_v broad_gauss_w peak.broad_gauss_w broad_lorentz_x peak.broad_lorentz_x broad_lorentz_y peak.broad_lorentz_y Category Parameter CIF name for serialization CIF dictionary instrument setup_wavelength _instrument.setup_wavelength easydiffractionCIF calib_twotheta_offset _instrument.calib_twotheta_offset easydiffractionCIF peak broad_gauss_u _peak.broad_gauss_u easydiffractionCIF broad_gauss_v _peak.broad_gauss_v easydiffractionCIF broad_gauss_w _peak.broad_gauss_w easydiffractionCIF broad_lorentz_x _peak.broad_lorentz_x easydiffractionCIF broad_lorentz_y _peak.broad_lorentz_y easydiffractionCIF <p>pd-neut-tof</p> How to access in the codeCIF name for serialization Category Parameter How to access in the code instrument setup_twotheta_bank instrument.setup_twotheta_bank calib_d_to_tof_recip instrument.calib_d_to_tof_recip calib_d_to_tof_offset instrument.calib_d_to_tof_offset calib_d_to_tof_linear instrument.calib_d_to_tof_linear calib_d_to_tof_quad instrument.calib_d_to_tof_quad peak broad_gauss_sigma_0 peak.broad_gauss_sigma_0 broad_gauss_sigma_1 peak.broad_gauss_sigma_1 broad_gauss_sigma_2 peak.broad_gauss_sigma_2 broad_mix_beta_0 peak.broad_mix_beta_0 broad_mix_beta_1 peak.broad_mix_beta_1 asym_alpha_0 peak.asym_alpha_0 asym_alpha_1 peak.asym_alpha_1 Category Parameter CIF name for serialization CIF dictionary instrument setup_twotheta_bank _instrument.setup_twotheta_bank easydiffractionCIF calib_d_to_tof_recip _instrument.calib_d_to_tof_recip easydiffractionCIF calib_d_to_tof_offset _instrument.calib_d_to_tof_offset easydiffractionCIF calib_d_to_tof_linear _instrument.calib_d_to_tof_linear easydiffractionCIF calib_d_to_tof_quad _instrument.calib_d_to_tof_quad easydiffractionCIF peak broad_gauss_sigma_0 _peak.broad_gauss_sigma_0 easydiffractionCIF broad_gauss_sigma_1 _peak.broad_gauss_sigma_1 easydiffractionCIF broad_gauss_sigma_2 _peak.broad_gauss_sigma_2 easydiffractionCIF broad_mix_beta_0 _peak.broad_mix_beta_0 easydiffractionCIF broad_mix_beta_1 _peak.broad_mix_beta_1 easydiffractionCIF asym_alpha_0 _peak.asym_alpha_0 easydiffractionCIF asym_alpha_1 _peak.asym_alpha_1 easydiffractionCIF"},{"location":"user-guide/parameters/#total-scattering","title":"Total scattering","text":"<p>pd-neut-total pd-xray-total</p> How to access in the codeCIF name for serialization Category Parameter How to access in the code peak cutoff_q peak.cutoff_q broad_q peak.broad_q sharp_delta_1 peak.sharp_delta_1 sharp_delta_2 peak.sharp_delta_2 damp_q peak.damp_q damp_particle_diameter peak.damp_particle_diameter Category Parameter CIF name for serialization CIF dictionary peak cutoff_q _peak.cutoff_q easydiffractionCIF broad_q _peak.broad_q easydiffractionCIF sharp_delta_1 _peak.sharp_delta_1 easydiffractionCIF sharp_delta_2 _peak.sharp_delta_2 easydiffractionCIF damp_q _peak.damp_q easydiffractionCIF damp_particle_diameter _peak.damp_particle_diameter easydiffractionCIF"},{"location":"user-guide/analysis-workflow/","title":"Analysis Workflow","text":"<p>To streamline the data analysis process, EasyDiffraction follows a structured workflow divided into five key steps:</p> <pre><code>flowchart LR\n    a(Project)\n    b(Model)\n    c(Experiment)\n    d(Analysis)\n    e(Summary)\n    a --&gt; b\n    b --&gt; c\n    c --&gt; d\n    d --&gt; e</code></pre> <ul> <li> Project \u2013 Establish a project as a   container for sample model and experiment parameters, measured and calculated   data, analysis settings and results.</li> <li> Sample Model \u2013 Load an existing   crystallographic model in CIF format or define a new one from scratch.</li> <li> Experiment \u2013 Import experimental   diffraction data and configure instrumental and other relevant   parameters.</li> <li> Analysis \u2013 Calculate the diffraction   pattern and optimize the structural model by refining its parameters to   match experimental measurements.</li> <li> Summary \u2013 Generate a report   summarizing the results of the analysis, including refined parameters.</li> </ul> <p>Each step is described in detail in its respective section, guiding users through the entire diffraction data analysis workflow in EasyDiffraction.</p>"},{"location":"user-guide/analysis-workflow/analysis/","title":"Analysis","text":"<p>This section provides an overview of diffraction data analysis in EasyDiffraction, focusing on model-dependent analysis, calculation engines, and minimization techniques.</p> <p>In EasyDiffraction, we focus on model-dependent analysis, where a model is constructed based on prior knowledge of the studied system, and its parameters are optimized to achieve the best agreement between experimental and calculated diffraction data. Model-dependent analysis is widely used in neutron and X-ray scattering data.</p>"},{"location":"user-guide/analysis-workflow/analysis/#calculation","title":"Calculation","text":"<p>EasyDiffraction relies on third-party crystallographic libraries, referred to as calculation engines or just calculators, to perform the calculations.</p> <p>The calculation engines are used to calculate the diffraction pattern for the defined model of the studied sample using the instrumental and other required experiment-related parameters, such as the wavelength, resolution, etc.</p> <p>You do not necessarily need the measured data to perform the calculations, but you need a structural model and some details about the type of experiment you want to simulate.</p> <p>EasyDiffraction is designed as a flexible and extensible tool that supports different calculation engines for diffraction pattern calculations. Currently, we integrate CrysPy, CrysFML, and PDFfit2 libraries as calculation engines.</p>"},{"location":"user-guide/analysis-workflow/analysis/#cryspy-calculator","title":"CrysPy Calculator","text":"<p>CrysPy is a Python library originally developed for analysing polarised neutron diffraction data. It is now evolving into a more general purpose library and covers powders and single crystals, nuclear and (commensurate) magnetic structures, unpolarised neutron and X-ray diffraction.</p>"},{"location":"user-guide/analysis-workflow/analysis/#crysfml-calculator","title":"CrysFML Calculator","text":"<p>CrysFML library is a collection of Fortran modules for crystallographic computations. It is used in the software package FullProf, and we are currently working on its integration into EasyDiffraction.</p>"},{"location":"user-guide/analysis-workflow/analysis/#pdffit2-calculator","title":"PDFfit2 Calculator","text":"<p>PDFfit2 is a Python library for calculating the pair distribution function (PDF) from crystallographic models.</p>"},{"location":"user-guide/analysis-workflow/analysis/#set-calculator","title":"Set Calculator","text":"<p>To show the supported calculation engines:</p> <pre><code>project.analysis.show_supported_calculators()\n</code></pre> <p>The example of the output is:</p> <p>Supported calculators</p> Calculator Description cryspy CrysPy library for crystallographic calculations pdffit PDFfit2 library for pair distribution function calculations <p>To select the desired calculation engine, e.g., 'cryspy':</p> <pre><code>project.analysis.current_calculator = 'cryspy'\n</code></pre>"},{"location":"user-guide/analysis-workflow/analysis/#minimization-optimization","title":"Minimization / Optimization","text":"<p>The process of refining model parameters involves iterating through multiple steps until the calculated data sufficiently matches the experimental data. This process is illustrated in the following diagram:</p> <pre><code>flowchart LR\n    a(Propose&lt;br/&gt;model)\n    b(Set/change&lt;br/&gt;model&lt;br/&gt;parameter&lt;br/&gt;values)\n    c(Calculate&lt;br/&gt;model&lt;br/&gt;data)\n    d(Compare&lt;br/&gt;model data to&lt;br/&gt;experimental&lt;br/&gt;data)\n    e(Stop&lt;br/&gt;iteration)\n    a --&gt; b\n    b --&gt; c\n    c --&gt; d\n    d-- Threshold&lt;br/&gt;not&lt;br/&gt;reached --&gt;b\n    d-- Threshold&lt;br/&gt;reached --&gt;e</code></pre> <p>Like the calculation engines, EasyDiffraction is designed to utilize various third-party libraries for model refinement and parameter optimization. These libraries provide robust curve fitting and uncertainty estimation tools.</p>"},{"location":"user-guide/analysis-workflow/analysis/#lmfit-minimizer","title":"Lmfit Minimizer","text":"<p>Most of the examples in this section will use the lmfit package, which provides a high-level interface to non-linear optimisation and curve fitting problems for Python. It is one of the tools that can be used to fit models to the experimental data.</p>"},{"location":"user-guide/analysis-workflow/analysis/#bumps-minimizer","title":"Bumps Minimizer","text":"<p>Another package that can be used for the same purpose is bumps. In addition to traditional optimizers which search for the best minimum they can find in the search space, bumps provides Bayesian uncertainty analysis which explores all viable minima and finds confidence intervals on the parameters based on uncertainty in the measured values.</p>"},{"location":"user-guide/analysis-workflow/analysis/#dfo-ls-minimizer","title":"DFO-LS Minimizer","text":"<p>DFO-LS (Derivative-Free Optimizer for Least-Squares) is a Python library for solving nonlinear least-squares minimization, without requiring derivatives of the objective.</p>"},{"location":"user-guide/analysis-workflow/analysis/#set-minimizer","title":"Set Minimizer","text":"<p>To show the supported minimizers:</p> <pre><code>project.analysis.show_supported_minimizers()\n</code></pre> <p>The example of the output is:</p> <p>Supported minimizers</p> Minimizer Description lmfit LMFIT library using the default Levenberg-Marquardt least squares method lmfit (leastsq) LMFIT library with Levenberg-Marquardt least squares method lmfit (least_squares) LMFIT library with SciPy\u2019s trust region reflective algorithm dfols DFO-LS library for derivative-free least-squares optimization <p>To select the desired calculation engine, e.g., 'lmfit (least_squares)':</p> <pre><code>project.analysis.current_minimizer = 'lmfit (leastsq)'\n</code></pre>"},{"location":"user-guide/analysis-workflow/analysis/#fit-mode","title":"Fit Mode","text":"<p>In EasyDiffraction, you can set the fit mode to control how the refinement process is performed. The fit mode determines whether the refinement is performed independently for each experiment or jointly across all experiments.</p> <p>To show the supported fit modes:</p> <pre><code>project.analysis.show_supported_fit_modes()\n</code></pre> <p>An example of supported fit modes is:</p> <p>Supported fit modes</p> Strategy Description single Independent fitting of each experiment; no shared parameters joint Simultaneous fitting of all experiments; some parameters are shared <p>You can set the fit mode using the <code>set_fit_mode</code> method of the <code>analysis</code> object:</p> <pre><code>project.analysis.fit_mode = 'joint'\n</code></pre> <p>To check the current fit mode, you can use the <code>show_current_fit_mode</code> method:</p> <pre><code>project.analysis.show_current_fit_mode()\n</code></pre>"},{"location":"user-guide/analysis-workflow/analysis/#perform-fit","title":"Perform Fit","text":"<p>Refining the sample model and experiment parameters against measured data is usually divided into several steps, where each step involves adding or removing parameters to be refined, calculating the model data, and comparing it to the experimental data as shown in the diagram above.</p> <p>To select the parameters to be refined, you can set the attribute <code>free</code> of the parameters to <code>True</code>. This indicates that the parameter is free to be optimized during the refinement process.</p> <p>Here is an example of how to set parameters to be refined:</p> <pre><code># Set sample model parameters to be refined.\nproject.sample_models['lbco'].cell.length_a.free = True\n\n# Set experiment parameters to be refined.\nproject.experiments['hrpt'].linked_phases['lbco'].scale.free = True\nproject.experiments['hrpt'].instrument.calib_twotheta_offset.free = True\nproject.experiments['hrpt'].background['10'].y.free = True\nproject.experiments['hrpt'].background['165'].y.free = True\n</code></pre> <p>After setting the parameters to be refined, you can perform the fit using the <code>fit</code> method of the <code>analysis</code> object:</p> <pre><code>project.analysis.fit()\n</code></pre> <p>This method will iterate through the defined steps, adjusting the parameters until the calculated data sufficiently matches the experimental data.</p> <p>An example of the output after performing the fit is:</p> <pre><code>Using experiment \ud83d\udd2c 'hrpt' for 'single' fitting\n\ud83d\ude80 Starting fitting process with 'lmfit (leastsq)'...\n\ud83d\udcc8 Goodness-of-fit (reduced \u03c7\u00b2) change:\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502    iteration    \u2502        \u03c7\u00b2       \u2502 improvement [%] \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502        1        \u2502      164.59     \u2502                 \u2502\n\u2502        12       \u2502      33.43      \u2502     79.7% \u2193     \u2502\n\u2502        21       \u2502      13.22      \u2502     60.4% \u2193     \u2502\n\u2502        30       \u2502       5.78      \u2502     56.3% \u2193     \u2502\n\u2502        39       \u2502       3.15      \u2502     45.6% \u2193     \u2502\n\u2502        77       \u2502       3.14      \u2502                 \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n\ud83c\udfc6 Best goodness-of-fit (reduced \u03c7\u00b2) is 3.14 at iteration 73\n\u2705 Fitting complete.\nFit results\n\u2705 Success: True\n\u23f1\ufe0f Fitting time: 0.77 seconds\n\ud83d\udccf Goodness-of-fit (reduced \u03c7\u00b2): 3.14\n\ud83d\udccf R-factor (Rf): 8.42%\n\ud83d\udccf R-factor squared (Rf\u00b2): 11.79%\n\ud83d\udccf Weighted R-factor (wR): 11.62%\n\ud83d\udcc8 Fitted parameters:\n</code></pre> <p>Now, you can inspect the fitted parameters to see how they have changed during the refinement process, select more parameters to be refined, and perform additional fits as needed.</p> <p>To plot the measured vs calculated data after the fit, you can use the <code>plot_meas_vs_calc</code> method of the <code>analysis</code> object:</p> <pre><code>project.plot_meas_vs_calc(expt_name='hrpt', show_residual=True)\n</code></pre>"},{"location":"user-guide/analysis-workflow/analysis/#constraints","title":"Constraints","text":"<p>In EasyDiffraction, you can define constraints on the model parameters to ensure that they remain within a specific range or follow a certain relationship during the refinement process.</p>"},{"location":"user-guide/analysis-workflow/analysis/#setting-aliases","title":"Setting Aliases","text":"<p>Before setting constraints, you need to set aliases for the parameters you want to constrain. This can be done using the <code>add</code> method of the <code>aliases</code> object. Aliases are used to reference parameters in a more readable way, making it easier to manage constraints.</p> <p>An example of setting aliases for parameters in a sample model:</p> <pre><code># Set aliases for the atomic displacement parameters\nproject.analysis.aliases.add(\n    label='biso_La',\n    param_uid=project.sample_models['lbco'].atom_sites['La'].b_iso.uid\n)\nproject.analysis.aliases.add(\n    label='biso_Ba',\n    param_uid=project.sample_models['lbco'].atom_sites['Ba'].b_iso.uid\n)\n\n# Set aliases for the occupancies of the atom sites\nproject.analysis.aliases.add(\n    label='occ_La',\n    param_uid=project.sample_models['lbco'].atom_sites['La'].occupancy.uid\n)\nproject.analysis.aliases.add(\n    label='occ_Ba',\n    param_uid=project.sample_models['lbco'].atom_sites['Ba'].occupancy.uid\n)\n</code></pre>"},{"location":"user-guide/analysis-workflow/analysis/#setting-constraints","title":"Setting Constraints","text":"<p>Now that you have set the aliases, you can define constraints using the <code>add</code> method of the <code>constraints</code> object. Constraints are defined by specifying the left-hand side (lhs) alias and the right-hand side (rhs) expression. The rhs expression can be a simple alias or a more complex expression involving other aliases.</p> <p>An example of setting constraints for the aliases defined above:</p> <pre><code>project.analysis.constraints.add(\n    lhs_alias='biso_Ba',\n    rhs_expr='biso_La'\n)\n\nproject.analysis.constraints.add(\n    lhs_alias='occ_Ba',\n    rhs_expr='1 - occ_La'\n)\n</code></pre> <p>These constraints ensure that the <code>biso_Ba</code> parameter is equal to <code>biso_La</code>, and the <code>occ_Ba</code> parameter is equal to <code>1 - occ_La</code>. This means that the occupancy of the Ba atom will always be adjusted based on the occupancy of the La atom, and the isotropic displacement parameter for Ba will be equal to that of La during the refinement process.</p>"},{"location":"user-guide/analysis-workflow/analysis/#viewing-constraints","title":"Viewing Constraints","text":"<p>To view the defined constraints, you can use the <code>show_constraints</code> method:</p> <pre><code>project.analysis.show_constraints()\n</code></pre> <p>The example of the output is:</p> <p>User defined constraints</p> lhs_alias rhs_expr full expression biso_Ba biso_La biso_Ba = biso_La occ_Ba 1 - occ_La occ_Ba = 1 - occ_La"},{"location":"user-guide/analysis-workflow/analysis/#analysis-as-cif","title":"Analysis as CIF","text":"<p>To inspect an analysis configuration in CIF format, use:</p> <pre><code># Show sample model as CIF\nproject.sample_models['lbco'].show_as_cif()\n</code></pre> <p>Example output:</p> <pre><code>\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502 _analysis.calculator_engine  cryspy            \u2502\n\u2502 _analysis.fitting_engine     \"lmfit (leastsq)\" \u2502\n\u2502 _analysis.fit_mode           single            \u2502\n\u2502                                                \u2502\n\u2502 loop_                                          \u2502\n\u2502 _alias.label                                   \u2502\n\u2502 _alias.param_uid                               \u2502\n\u2502 biso_La  lbco.atom_site.La.B_iso_or_equiv      \u2502\n\u2502 biso_Ba  lbco.atom_site.Ba.B_iso_or_equiv      \u2502\n\u2502 occ_La   lbco.atom_site.La.occupancy           \u2502\n\u2502 occ_Ba   lbco.atom_site.Ba.occupancy           \u2502\n\u2502                                                \u2502\n\u2502 loop_                                          \u2502\n\u2502 _constraint.lhs_alias                          \u2502\n\u2502 _constraint.rhs_expr                           \u2502\n\u2502 biso_Ba  biso_La                               \u2502\n\u2502 occ_Ba   \"1 - occ_La\"                          \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n</code></pre>"},{"location":"user-guide/analysis-workflow/analysis/#saving-an-analysis","title":"Saving an Analysis","text":"<p>Saving the project, as described in the Project section, will also save the analysis settings to the <code>analysis.cif</code> inside the project directory.</p> <p></p> <p>Now that the analysis is finished, you can proceed to the next step: Summary.</p>"},{"location":"user-guide/analysis-workflow/experiment/","title":"Experiment","text":"<p>The Experiment in EasyDiffraction includes both the measured diffraction data and all the other relevant parameters that describe the experimental setup and related conditions. This can include information about the instrumental resolution, peak shape, background, etc.</p> <p>EasyDiffraction allows you to:</p> <ul> <li>Load an existing experiment from a file (CIF format). Both the   metadata and measured data are expected to be in CIF format.</li> <li>Manually define a new experiment by specifying its type, other necessary   experimental parameters, as well as load measured data. This is useful when   you want to create an experiment from scratch or when you have a measured data   file in a non-CIF format (e.g., <code>.xye</code>, <code>.xy</code>).</li> </ul> <p>Below, you will find instructions on how to define and manage experiments in EasyDiffraction. It is assumed that you have already created a <code>project</code> object, as described in the Project section as well as defined its <code>sample_models</code>, as described in the Sample Model section.</p>"},{"location":"user-guide/analysis-workflow/experiment/#adding-an-experiment-from-cif","title":"Adding an Experiment from CIF","text":"<p>This is the most straightforward way to define an experiment in EasyDiffraction. If you have a crystallographic information file (CIF) for your experiment, that contains both the necessary information (metadata) about the experiment as well as the measured data, you can add it to your project using the <code>add_experiment_from_cif</code> method of the <code>project</code> instance. In this case, the name of the experiment will be taken from CIF.</p> <pre><code># Load an experiment from a CIF file\nproject.add_experiment_from_cif('data/hrpt_300K.cif')\n</code></pre> <p>Accessing the experiment after loading it will be done through the <code>experiments</code> object of the <code>project</code> instance. The name of the model will be the same as the data block id in the CIF file. For example, if the CIF file contains a data block with the id <code>hrpt</code>,</p> <pre>\ndata_hrpt\n\n_expt_type.beam_mode  \"constant wavelength\"\n...\n</pre> <p>you can access it in the code as follows:</p> <pre><code># Access the experient by its name\nproject.experiments['hrpt']\n</code></pre>"},{"location":"user-guide/analysis-workflow/experiment/#defining-an-experiment-manually","title":"Defining an Experiment Manually","text":"<p>If you do not have a CIF file or prefer to define the experiment manually, you can use the <code>add</code> method of the <code>experiments</code> object of the <code>project</code> instance. In this case, you will need to specify the name of the experiment, which will be used to reference it later. Along with the name, you need to provide the following parameters, essential for defining the experiment, which define the type of experiment:</p> <ul> <li>sample_form: The form of the sample (powder, single crystal).</li> <li>beam_mode: The mode of the beam (constant wavelength, time-of-flight).</li> <li>radiation_probe: The type of radiation used (neutron, X-ray).</li> <li>scattering_type: The type of scattering (bragg, total).</li> </ul> <p>Important</p> <p>It is important to mention that once an experiment is added, you cannot change these parameters. If you need to change them, you must create a new experiment or redefine the existing one.</p> <p>If you have a measured data file, you can also specify:</p> <ul> <li>data_path: The path to the measured data file (e.g., <code>.xye</code>, <code>.xy</code>).   Supported formats are described in the   Measured Data Category section.</li> </ul> <p>Here is an example of how to add an experiment with all components needed to define the experiment explicitly set:</p> <pre><code># Add an experiment with default parameters, based on the specified type.\n# The experiment name is used to reference it later.\nproject.experiments.add(name='hrpt',\n                        sample_form='powder',\n                        beam_mode='constant wavelength',\n                        radiation_probe='neutron',\n                        scattering_type='bragg',\n                        data_path='data/hrpt_lbco.xye')\n</code></pre> <p>To add an experiment of default type, you can simply do:</p> <pre><code># Add an experiment of default type\n# The experiment name is used to reference it later.\nproject.experiments.add(name='hrpt',\n                        data_path='data/hrpt_lbco.xye')\n</code></pre> <p>You can now change the default parameters of the experiment, categorized into the groups based on the type of experiment.</p> <p>The <code>add</code> method creates a new experiment of the specified type with default parameters. You can then modify its parameters to match your specific experimental setup. All parameters are grouped into the following categories, which makes it easier to manage the experiment:</p> <ol> <li>Instrument Category: Defines the instrument configuration, including    wavelength, two-theta offset, and resolution parameters.</li> <li>Peak Category: Specifies the peak profile type and its parameters, such    as broadening and asymmetry.</li> <li>Background Category: Defines the background type and allows you to add    background points.</li> <li>Linked Phases Category: Links the sample model defined in the previous    step to the experiment, allowing you to specify the scale factor for the    linked phase.</li> <li>Measured Data Category: Contains the measured data. The expected format    depends on the experiment type, but generally includes columns for 2\u03b8 angle    or TOF and intensity.</li> </ol>"},{"location":"user-guide/analysis-workflow/experiment/#1-instrument-category","title":"1. Instrument Category","text":"<pre><code># Modify the default instrument parameters\nproject.experiments['hrpt'].instrument.setup_wavelength = 1.494\nproject.experiments['hrpt'].instrument.calib_twotheta_offset = 0.6\n</code></pre>"},{"location":"user-guide/analysis-workflow/experiment/#2-peak-category","title":"2. Peak Category","text":"<pre><code># Select the desired peak profile type\nproject.experiments['hrpt'].peak_profile_type = 'pseudo-voigt'\n\n# Modify default peak profile parameters\nproject.experiments['hrpt'].peak.broad_gauss_u = 0.1\nproject.experiments['hrpt'].peak.broad_gauss_v = -0.1\nproject.experiments['hrpt'].peak.broad_gauss_w = 0.1\nproject.experiments['hrpt'].peak.broad_lorentz_x = 0\nproject.experiments['hrpt'].peak.broad_lorentz_y = 0.1\n</code></pre>"},{"location":"user-guide/analysis-workflow/experiment/#3-background-category","title":"3. Background Category","text":"<pre><code># Select the desired background type\nproject.experiments['hrpt'].background_type = 'line-segment'\n\n# Add background points\nproject.experiments['hrpt'].background.add(x=10, y=170)\nproject.experiments['hrpt'].background.add(x=30, y=170)\nproject.experiments['hrpt'].background.add(x=50, y=170)\nproject.experiments['hrpt'].background.add(x=110, y=170)\nproject.experiments['hrpt'].background.add(x=165, y=170)\n</code></pre>"},{"location":"user-guide/analysis-workflow/experiment/#4-linked-phases-category","title":"4. Linked Phases Category","text":"<pre><code># Link the sample model defined in the previous step to the experiment\nproject.experiments['hrpt'].linked_phases.add(id='lbco', scale=10.0)\n</code></pre>"},{"location":"user-guide/analysis-workflow/experiment/#5-measured-data-category","title":"5. Measured Data Category","text":"<p>If you do not have a CIF file for your experiment, you can load measured data from a file in a supported format. The measured data will be automatically converted into CIF format and added to the experiment. The expected format depends on the experiment type.</p>"},{"location":"user-guide/analysis-workflow/experiment/#supported-data-file-formats","title":"Supported data file formats:","text":"<ul> <li><code>.xye</code> or <code>.xys</code> (3 columns, including standard deviations)</li> <li>_pd_meas.2theta_scan</li> <li>_pd_meas.intensity_total</li> <li>_pd_meas.intensity_total_su</li> <li><code>.xy</code> (2 columns, no standard deviations):</li> <li>_pd_meas.2theta_scan</li> <li>_pd_meas.intensity_total</li> </ul> <p>If no standard deviations are provided, they are automatically calculated as the square root of measured intensities.</p> <p>Optional comments with <code>#</code> are possible in data file headers.</p> <p>Here are some examples:</p>"},{"location":"user-guide/analysis-workflow/experiment/#example1xye","title":"example1.xye","text":"<pre>\n# 2theta  intensity    su\n   10.00     167      12.6\n   10.05     157      12.5\n   10.10     187      13.3\n   10.15     197      14.0\n   10.20     164      12.5\n  ...\n  164.65     173      30.1\n  164.70     187      27.9\n  164.75     175      38.2\n  164.80     168      30.9\n  164.85     109      41.2\n</pre>"},{"location":"user-guide/analysis-workflow/experiment/#example2xy","title":"example2.xy","text":"<pre>\n# 2theta  intensity\n   10.00     167    \n   10.05     157    \n   10.10     187    \n   10.15     197    \n   10.20     164    \n  ...\n  164.65     173    \n  164.70     187    \n  164.75     175    \n  164.80     168    \n  164.85     109  \n</pre>"},{"location":"user-guide/analysis-workflow/experiment/#example3xy","title":"example3.xy","text":"<pre>\n10  167.3    \n10.05  157.4    \n10.1  187.1    \n10.15  197.8    \n10.2  164.9    \n...\n164.65  173.3    \n164.7  187.5    \n164.75  175.8    \n164.8  168.1    \n164.85  109     \n</pre>"},{"location":"user-guide/analysis-workflow/experiment/#listing-defined-experiments","title":"Listing Defined Experiments","text":"<p>To check which experiments have been added to the <code>project</code>, use:</p> <pre><code># Show defined experiments\nproject.experiments.show_names()\n</code></pre> <p>Expected output:</p> <pre><code>Defined experiments \ud83d\udd2c\n['hrpt']\n</code></pre>"},{"location":"user-guide/analysis-workflow/experiment/#viewing-an-experiment-as-cif","title":"Viewing an Experiment as CIF","text":"<p>To inspect an experiment in CIF format, use:</p> <pre><code># Show experiment as CIF\nproject.experiments['hrpt'].show_as_cif()\n</code></pre> <p>Example output:</p> <pre><code>Experiment \ud83d\udd2c 'hrpt' as cif\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502 data_hrpt                                   \u2502\n\u2502                                             \u2502\n\u2502 _expt_type.beam_mode  \"constant wavelength\" \u2502\n\u2502 _expt_type.radiation_probe  neutron         \u2502\n\u2502 _expt_type.sample_form  powder              \u2502\n\u2502 _expt_type.scattering_type  bragg           \u2502\n\u2502                                             \u2502\n\u2502 _instr.2theta_offset  0.6                   \u2502\n\u2502 _instr.wavelength  1.494                    \u2502\n\u2502                                             \u2502\n\u2502 _peak.broad_gauss_u  0.1                    \u2502\n\u2502 _peak.broad_gauss_v  -0.1                   \u2502\n\u2502 _peak.broad_gauss_w  0.1                    \u2502\n\u2502 _peak.broad_lorentz_x  0                    \u2502\n\u2502 _peak.broad_lorentz_y  0.1                  \u2502\n\u2502                                             \u2502\n\u2502 loop_                                       \u2502\n\u2502 _pd_phase_block.id                          \u2502\n\u2502 _pd_phase_block.scale                       \u2502\n\u2502 lbco 10.0                                   \u2502\n\u2502                                             \u2502\n\u2502 loop_                                       \u2502\n\u2502 _pd_background.line_segment_X               \u2502\n\u2502 _pd_background.line_segment_intensity       \u2502\n\u2502 10 170                                      \u2502\n\u2502 30 170                                      \u2502\n\u2502 50 170                                      \u2502\n\u2502 110 170                                     \u2502\n\u2502 165 170                                     \u2502\n\u2502                                             \u2502\n\u2502 loop_                                       \u2502\n\u2502 _pd_meas.2theta_scan                        \u2502\n\u2502 _pd_meas.intensity_total                    \u2502\n\u2502 _pd_meas.intensity_total_su                 \u2502\n\u2502 10.0 167.0 12.6                             \u2502\n\u2502 10.05 157.0 12.5                            \u2502\n\u2502 10.1 187.0 13.3                             \u2502\n\u2502 10.15 197.0 14.0                            \u2502\n\u2502 10.2 164.0 12.5                             \u2502\n\u2502 ...                                         \u2502\n\u2502 164.65 173.0 30.1                           \u2502\n\u2502 164.7 187.0 27.9                            \u2502\n\u2502 164.75 175.0 38.2                           \u2502\n\u2502 164.8 168.0 30.9                            \u2502\n\u2502 164.85 109.0 41.2                           \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n</code></pre>"},{"location":"user-guide/analysis-workflow/experiment/#saving-an-experiment","title":"Saving an Experiment","text":"<p>Saving the project, as described in the Project section,  will also save the experiment. Each experiment is saved as a separate CIF file in the <code>experiments</code> subdirectory of the project directory. The project file contains  references to these files.</p> <p>EasyDiffraction supports different types of experiments, and each experiment is saved in a  dedicated CIF file with  experiment-specific parameters. </p> <p>Below are examples of how different experiments are saved in CIF format.</p>"},{"location":"user-guide/analysis-workflow/experiment/#pd-neut-cwl","title":"pd-neut-cwl","text":"<p>This example represents a constant-wavelength neutron powder diffraction experiment:</p> <pre>\ndata_hrpt\n\n_expt_type.beam_mode        \"constant wavelength\"\n_expt_type.radiation_probe  neutron\n_expt_type.sample_form      powder\n_expt_type.scattering_type  bragg\n\n_instr.wavelength    1.494\n_instr.2theta_offset 0.6225(4)\n\n_peak.broad_gauss_u    0.0834\n_peak.broad_gauss_v   -0.1168\n_peak.broad_gauss_w    0.123\n_peak.broad_lorentz_x  0\n_peak.broad_lorentz_y  0.0797\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nlbco 9.0976(3)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n 10  174.3  2theta\n 20  159.8  2theta\n 30  167.9  2theta\n 50  166.1  2theta\n 70  172.3  2theta\n 90  171.1  2theta\n110  172.4  2theta\n130  182.5  2theta\n150  173.0  2theta\n165  171.1  2theta\n\nloop_\n_pd_meas.2theta_scan\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n 10.00  167  12.6\n 10.05  157  12.5\n 10.10  187  13.3\n 10.15  197  14.0\n 10.20  164  12.5\n 10.25  171  13.0\n...\n164.60  153  20.7\n164.65  173  30.1\n164.70  187  27.9\n164.75  175  38.2\n164.80  168  30.9\n164.85  109  41.2\n</pre>"},{"location":"user-guide/analysis-workflow/experiment/#pd-neut-tof","title":"pd-neut-tof","text":"<p>This example demonstrates a time-of-flight neutron powder diffraction experiment:</p> <pre>\ndata_wish\n\n_diffrn_radiation.probe neutron\n\n_pd_instr.2theta_bank 152.827\n\n_pd_instr.dtt1 20773.1(3)\n_pd_instr.dtt2    -1.08308\n_pd_instr.zero   -13.7(5)\n\n_pd_instr.alpha0 -0.009(1)\n_pd_instr.alpha1  0.109(2)\n_pd_instr.beta0   0.00670(3)\n_pd_instr.beta1   0.0100(3)\n_pd_instr.sigma0  0\n_pd_instr.sigma1  0\n_pd_instr.sigma2 15.7(8)\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nncaf 1.093(5)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n  9162.3  465(38) time-of-flight\n 11136.8  593(30) time-of-flight\n 14906.5  546(18) time-of-flight\n 17352.2  496(14) time-of-flight\n 20179.5  452(10) time-of-flight\n 22176.0  468(12) time-of-flight\n 24644.7  380(6)  time-of-flight\n 28257.2  378(4)  time-of-flight\n 34034.4  328(4)  time-of-flight\n 41214.6  323(3)  time-of-flight\n 49830.9  273(3)  time-of-flight\n 58204.9  260(4)  time-of-flight\n 70186.9  262(5)  time-of-flight\n 82103.2  268(5)  time-of-flight\n102712.0  262(15) time-of-flight\n\nloop_\n_pd_meas.time_of_flight\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n  9001.0  616.523  124.564\n  9006.8  578.769  123.141\n  9012.6  574.184  120.507\n  9018.5  507.739  111.300\n  9024.3  404.672  101.616\n  9030.1  469.244  107.991\n...\n103085.0  275.072   60.978\n103151.4  214.187   55.675\n103217.9  256.211   62.825\n103284.4  323.872   73.082\n103351.0  242.382   65.736\n103417.6  277.666   73.837\n</pre>"},{"location":"user-guide/analysis-workflow/experiment/#sc-neut-cwl","title":"sc-neut-cwl","text":"<p>This example represents a single-crystal neutron diffraction experiment:</p> <pre>\ndata_heidi\n\n_diffrn_radiation.probe                 neutron\n_diffrn_radiation_wavelength.wavelength 0.793\n\n_pd_calib.2theta_offset 0.6225(4)\n\n_pd_instr.resolution_u  0.0834\n_pd_instr.resolution_v -0.1168\n_pd_instr.resolution_w  0.123\n_pd_instr.resolution_x  0\n_pd_instr.resolution_y  0.0797\n\n_pd_instr.reflex_asymmetry_p1 0\n_pd_instr.reflex_asymmetry_p2 0\n_pd_instr.reflex_asymmetry_p3 0\n_pd_instr.reflex_asymmetry_p4 0\n\nloop_\n_exptl_crystal.id\n_exptl_crystal.scale\ntbti 2.92(6)\n\nloop_\n_refln.index_h\n_refln.index_k\n_refln.index_l\n_refln.intensity_meas\n_refln.intensity_meas_su\n 1  1  1   194.5677    2.3253\n 2  2  0    22.6319    1.1233\n 3  1  1    99.2917    2.5620\n 2  2  2   219.2877    3.2522\n...\n16  8  8    29.3063   12.6552\n17  7  7  1601.5154  628.8915\n13 13  7  1176.0896  414.6018\n19  5  1     0.8334   20.4207\n15  9  9    10.9864    8.0650\n12 12 10    14.4074   11.3800\n</pre> <p></p> <p>Now that the experiment has been defined, you can proceed to the next step: Analysis.</p>"},{"location":"user-guide/analysis-workflow/model/","title":"Sample Model","text":"<p>The Sample Model in EasyDiffraction represents the crystallographic structure used to calculate the diffraction pattern, which is then fitted to the experimentally measured data to refine the structural parameters.</p> <p>EasyDiffraction allows you to:</p> <ul> <li>Load an existing model from a file (CIF format).</li> <li>Manually define a new sample model by specifying crystallographic   parameters.</li> </ul> <p>Below, you will find instructions on how to define and manage crystallographic models in EasyDiffraction. It is assumed that you have already created a <code>project</code> object, as described in the Project section.</p>"},{"location":"user-guide/analysis-workflow/model/#adding-a-model-from-cif","title":"Adding a Model from CIF","text":"<p>This is the most straightforward way to define a sample model in EasyDiffraction. If you have a crystallographic information file (CIF) for your sample model, you can add it to your project using the <code>add_phase_from_file</code> method of the <code>project</code> instance. In this case, the name of the model will be taken from CIF.</p> <pre><code># Load a phase from a CIF file\nproject.add_phase_from_file('data/lbco.cif')\n</code></pre> <p>Accessing the model after loading it will be done through the <code>sample_models</code> object of the <code>project</code> instance. The name of the model will be the same as the data block id in the CIF file. For example, if the CIF file contains a data block with the id <code>lbco</code>,</p> <pre>\ndata_lbco\n\n_space_group.name_H-M_alt  \"P m -3 m\"\n...\n</pre> <p>you can access it in the code as follows:</p> <pre><code># Access the sample model by its name\nproject.sample_models['lbco']\n</code></pre>"},{"location":"user-guide/analysis-workflow/model/#defining-a-model-manually","title":"Defining a Model Manually","text":"<p>If you do not have a CIF file or prefer to define the model manually, you can use the <code>add</code> method of the <code>sample_models</code> object of the <code>project</code> instance. In this case, you will need to specify the name of the model, which will be used to reference it later.</p> <pre><code># Add a sample model with default parameters\n# The sample model name is used to reference it later.\nproject.sample_models.add(name='nacl')\n</code></pre> <p>The <code>add</code> method creates a new sample model with default parameters. You can then modify its parameters to match your specific crystallographic structure. All parameters are grouped into the following categories, which makes it easier to manage the model:</p> <ol> <li>Space Group Category: Defines the symmetry of the crystal structure.</li> <li>Cell Category: Specifies the dimensions and angles of the unit cell.</li> <li>Atom Sites Category: Describes the positions and properties of atoms    within the unit cell.</li> </ol>"},{"location":"user-guide/analysis-workflow/model/#1-space-group-category","title":"1. Space Group Category","text":"<pre><code># Set space group\nproject.sample_models['nacl'].space_group.name_h_m = 'F m -3 m'\n</code></pre>"},{"location":"user-guide/analysis-workflow/model/#2-cell-category","title":"2. Cell Category","text":"<pre><code># Define unit cell parameters\nproject.sample_models['nacl'].cell.length_a = 5.691694\n</code></pre>"},{"location":"user-guide/analysis-workflow/model/#3-atom-sites-category","title":"3. Atom Sites Category","text":"<pre><code># Add atomic sites\nproject.sample_models['nacl'].atom_sites.append(\n    label='Na',\n    type_symbol='Na',\n    fract_x=0,\n    fract_y=0,\n    fract_z=0,\n    occupancy=1,\n    b_iso_or_equiv=0.5\n)\nproject.sample_models['nacl'].atom_sites.append(\n    label='Cl',\n    type_symbol='Cl',\n    fract_x=0,\n    fract_y=0,\n    fract_z=0.5,\n    occupancy=1,\n    b_iso_or_equiv=0.5\n)\n</code></pre>"},{"location":"user-guide/analysis-workflow/model/#listing-defined-models","title":"Listing Defined Models","text":"<p>To check which sample models have been added to the <code>project</code>, use:</p> <pre><code># Show defined sample models\nproject.sample_models.show_names()\n</code></pre> <p>Expected output:</p> <pre><code>Defined sample models \ud83e\udde9\n['lbco', 'nacl']\n</code></pre>"},{"location":"user-guide/analysis-workflow/model/#viewing-a-model-as-cif","title":"Viewing a Model as CIF","text":"<p>To inspect a sample model in CIF format, use:</p> <pre><code># Show sample model as CIF\nproject.sample_models['lbco'].show_as_cif()\n</code></pre> <p>Example output:</p> <pre><code>Sample model \ud83e\udde9 'lbco' as cif\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502 data_lbco                                 \u2502\n\u2502                                           \u2502\n\u2502 _space_group.IT_coordinate_system_code  1 \u2502\n\u2502 _space_group.name_H-M_alt  \"P m -3 m\"     \u2502\n\u2502                                           \u2502\n\u2502 _cell.angle_alpha  90                     \u2502\n\u2502 _cell.angle_beta  90                      \u2502\n\u2502 _cell.angle_gamma  90                     \u2502\n\u2502 _cell.length_a  3.88                      \u2502\n\u2502 _cell.length_b  3.88                      \u2502\n\u2502 _cell.length_c  3.88                      \u2502\n\u2502                                           \u2502\n\u2502 loop_                                     \u2502\n\u2502 _atom_site.ADP_type                       \u2502\n\u2502 _atom_site.B_iso_or_equiv                 \u2502\n\u2502 _atom_site.fract_x                        \u2502\n\u2502 _atom_site.fract_y                        \u2502\n\u2502 _atom_site.fract_z                        \u2502\n\u2502 _atom_site.label                          \u2502\n\u2502 _atom_site.occupancy                      \u2502\n\u2502 _atom_site.type_symbol                    \u2502\n\u2502 _atom_site.Wyckoff_letter                 \u2502\n\u2502 Biso 0.5 0.0 0.0 0.0 La 0.5 La a          \u2502\n\u2502 Biso 0.5 0.0 0.0 0.0 Ba 0.5 Ba a          \u2502\n\u2502 Biso 0.5 0.5 0.5 0.5 Co 1.0 Co b          \u2502\n\u2502 Biso 0.5 0.0 0.5 0.5 O 1.0 O c            \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n</code></pre>"},{"location":"user-guide/analysis-workflow/model/#saving-a-model","title":"Saving a Model","text":"<p>Saving the project, as described in the Project section, will also save the model. Each model is saved as a separate CIF file in the <code>sample_models</code> subdirectory of the project directory. The project file contains references to these files.</p> <p>Below is an example of the saved CIF file for the <code>lbco</code> model:</p> <pre>\ndata_lbco\n\n_space_group.name_H-M_alt              \"P m -3 m\"\n_space_group.IT_coordinate_system_code 1\n\n_cell.length_a      3.8909\n_cell.length_b      3.8909\n_cell.length_c      3.8909\n_cell.angle_alpha  90\n_cell.angle_beta   90\n_cell.angle_gamma  90\n\nloop_\n_atom_site.label\n_atom_site.type_symbol\n_atom_site.fract_x\n_atom_site.fract_y\n_atom_site.fract_z\n_atom_site.Wyckoff_letter\n_atom_site.occupancy\n_atom_site.adp_type\n_atom_site.B_iso_or_equiv\nLa La   0   0   0     a   0.5  Biso 0.4958\nBa Ba   0   0   0     a   0.5  Biso 0.4943\nCo Co   0.5 0.5 0.5   b   1    Biso 0.2567\nO  O    0   0.5 0.5   c   1    Biso 1.4041\n</pre> <p></p> <p>Now that the crystallographic model has been defined and added to the project, you can proceed to the next step: Experiment.</p>"},{"location":"user-guide/analysis-workflow/project/","title":"Project","text":"<p>The Project serves as a container for all data and metadata associated with a particular data analysis task. It acts as the top-level entity in EasyDiffraction, ensuring structured organization and easy access to relevant information. Each project can contain multiple experimental datasets, with each dataset containing contribution from multiple sample models.</p> <p>EasyDiffraction allows you to:</p> <ul> <li>Manually create a new project by specifying its metadata.</li> <li>Load an existing project from a file (CIF format).</li> </ul> <p>Below are instructions on how to set up a project in EasyDiffraction. It is assumed that you have already imported the <code>easydiffraction</code> package, as described in the First Steps section.</p>"},{"location":"user-guide/analysis-workflow/project/#creating-a-project-manually","title":"Creating a Project Manually","text":"<p>You can manually create a new project and specify its short name, title and description. All these parameters are optional.</p> <pre><code># Create a new project\nproject = ed.Project(name='lbco_hrpt')\n\n# Define project info\nproject.info.title = 'La0.5Ba0.5CoO3 from neutron diffraction at HRPT@PSI'\nproject.info.description = '''This project demonstrates a standard refinement\nof La0.5Ba0.5CoO3, which crystallizes in a perovskite-type structure, using\nneutron powder diffraction data collected in constant wavelength mode at the\nHRPT diffractometer (PSI).'''\n</code></pre>"},{"location":"user-guide/analysis-workflow/project/#saving-a-project","title":"Saving a Project","text":"<p>Saving the initial project requires specifying the directory path:</p> <pre><code>project.save_as(dir_path='lbco_hrpt')\n</code></pre> <p>If working in the interactive mode in a Jupyter notebook or similar environment, you can also save the project after every significant change. This is useful for keeping track of changes and ensuring that your work is not lost. If you already saved the project with <code>save_as</code>, you can just call the <code>save</code>:</p> <pre><code>project.save()\n</code></pre>"},{"location":"user-guide/analysis-workflow/project/#loading-a-project-from-cif","title":"Loading a Project from CIF","text":"<p>If you have an existing project, you can load it directly from a CIF file. This is useful for reusing previously defined projects or sharing them with others.</p> <pre><code>project.load('data/lbco_hrpt.cif')\n</code></pre>"},{"location":"user-guide/analysis-workflow/project/#project-structure","title":"Project Structure","text":"<p>The example below illustrates a typical project structure for a constant-wavelength powder neutron diffraction experiment:</p> <pre>\n\ud83d\udcc1 La0.5Ba0.5CoO3     - Project directory.\n\u251c\u2500\u2500 \ud83d\udcc4 project.cif    - Main project description file.\n\u251c\u2500\u2500 \ud83d\udcc1 sample_models  - Folder with sample models (crystallographic structures).\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 lbco.cif   - File with La0.5Ba0.5CoO3 structure parameters.\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 \ud83d\udcc1 experiments    - Folder with instrumental parameters and measured data.\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 hrpt.cif   - Instrumental parameters and measured data from HRPT@PSI.\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 \ud83d\udcc4 analysis.cif   - Settings for data analysis (calculator, minimizer, etc.).\n\u2514\u2500\u2500 \ud83d\udcc1 summary\n    \u2514\u2500\u2500 \ud83d\udcc4 report.cif - Summary report after structure refinement.\n</pre>"},{"location":"user-guide/analysis-workflow/project/#project-files","title":"Project Files","text":"<p>Below is a complete project example stored in the <code>La0.5Ba0.5CoO3</code> directory, showing the contents of all files in the project.</p> <p>Important</p> <p>If you save the project right after creating it, the project directory will only contain the <code>project.cif</code> file. The other folders and files will be created as you add sample models, experiments, and set up the analysis. The summary folder will be created after the analysis is completed.</p>"},{"location":"user-guide/analysis-workflow/project/#1-projectcif","title":"1. project.cif","text":"<p>This file provides an overview of the project, including file names of the sample models and experiments associated with the project.</p> <pre>\ndata_La0.5Ba0.5CoO3\n\n_project.title       \"La0.5Ba0.5CoO3 from neutron diffraction at HRPT@PSI\"\n_project.description \"neutrons, powder, constant wavelength, HRPT@PSI\"\n\nloop_\n_sample_model.cif_file_name\nlbco.cif\n\nloop_\n_experiment.cif_file_name\nhrpt.cif\n</pre>"},{"location":"user-guide/analysis-workflow/project/#2-sample_models-lbcocif","title":"2. sample_models / lbco.cif","text":"<p>This file contains crystallographic information associated with the sample model, including space group, unit cell parameters, and atomic positions.</p> <pre>\ndata_lbco\n\n_space_group.name_H-M_alt              \"P m -3 m\"\n_space_group.IT_coordinate_system_code 1\n\n_cell.length_a      3.8909(1)\n_cell.length_b      3.8909\n_cell.length_c      3.8909\n_cell.angle_alpha  90\n_cell.angle_beta   90\n_cell.angle_gamma  90\n\nloop_\n_atom_site.label\n_atom_site.type_symbol\n_atom_site.fract_x\n_atom_site.fract_y\n_atom_site.fract_z\n_atom_site.Wyckoff_letter\n_atom_site.occupancy\n_atom_site.adp_type\n_atom_site.B_iso_or_equiv\nLa La   0   0   0     a   0.5  Biso 0.4958\nBa Ba   0   0   0     a   0.5  Biso 0.4943\nCo Co   0.5 0.5 0.5   b   1    Biso 0.2567\nO  O    0   0.5 0.5   c   1    Biso 1.4041\n</pre>"},{"location":"user-guide/analysis-workflow/project/#3-experiments-hrptcif","title":"3. experiments / hrpt.cif","text":"<p>This file contains the experiment type, instrumental parameters, peak parameters, associated phases, background parameters and measured diffraction data.</p> <pre>\ndata_hrpt\n\n_expt_type.beam_mode        \"constant wavelength\"\n_expt_type.radiation_probe  neutron\n_expt_type.sample_form      powder\n_expt_type.scattering_type  bragg\n\n_instr.wavelength    1.494\n_instr.2theta_offset 0.6225(4)\n\n_peak.broad_gauss_u    0.0834\n_peak.broad_gauss_v   -0.1168\n_peak.broad_gauss_w    0.123\n_peak.broad_lorentz_x  0\n_peak.broad_lorentz_y  0.0797\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nlbco 9.0976(3)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n 10  174.3  2theta\n 20  159.8  2theta\n 30  167.9  2theta\n 50  166.1  2theta\n 70  172.3  2theta\n 90  171.1  2theta\n110  172.4  2theta\n130  182.5  2theta\n150  173.0  2theta\n165  171.1  2theta\n\nloop_\n_pd_meas.2theta_scan\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n 10.00  167  12.6\n 10.05  157  12.5\n 10.10  187  13.3\n 10.15  197  14.0\n 10.20  164  12.5\n 10.25  171  13.0\n...\n164.60  153  20.7\n164.65  173  30.1\n164.70  187  27.9\n164.75  175  38.2\n164.80  168  30.9\n164.85  109  41.2\n</pre>"},{"location":"user-guide/analysis-workflow/project/#4-analysiscif","title":"4. analysis.cif","text":"<p>This file contains settings used for data analysis, including the choice of calculation and fitting engines, as well as user defined constraints.</p> <pre>\n_analysis.calculator_engine  cryspy\n_analysis.fitting_engine     \"lmfit (leastsq)\"\n_analysis.fit_mode           single\n\nloop_\n_alias.label\n_alias.param_uid\nbiso_La  lbco.atom_site.La.B_iso_or_equiv\nbiso_Ba  lbco.atom_site.Ba.B_iso_or_equiv\nocc_La   lbco.atom_site.La.occupancy\nocc_Ba   lbco.atom_site.Ba.occupancy\n\nloop_\n_constraint.lhs_alias\n_constraint.rhs_expr\nbiso_Ba  biso_La\nocc_Ba   \"1 - occ_La\"\n</pre> <p></p> <p>Now that the Project has been defined, you can proceed to the next step: Sample Model.</p>"},{"location":"user-guide/analysis-workflow/summary/","title":"Summary","text":"<p>The Summary section represents the final step in the data processing workflow. It involves generating a summary report that consolidates the results of the diffraction data analysis, providing a comprehensive overview of the model refinement process and its outcomes.</p>"},{"location":"user-guide/analysis-workflow/summary/#contents-of-the-summary-report","title":"Contents of the Summary Report","text":"<p>The summary report includes key details such as:</p> <ul> <li>Final refined model parameters \u2013 Optimized crystallographic and instrumental   parameters.</li> <li>Goodness-of-fit indicators \u2013 Metrics such as R-factors, chi-square (\u03c7\u00b2), and   residuals.</li> <li>Graphical representation \u2013 Visualization of experimental vs. calculated   diffraction patterns.</li> </ul>"},{"location":"user-guide/analysis-workflow/summary/#viewing-the-summary-report","title":"Viewing the Summary Report","text":"<p>Users can print the summary report using:</p> <pre><code># Generate and print the summary report\nproject.summary.show_report()\n</code></pre>"},{"location":"user-guide/analysis-workflow/summary/#saving-a-summary","title":"Saving a Summary","text":"<p>Saving the project, as described in the Project section, will also save the summary report to the <code>summary.cif</code> inside the project directory.</p> <p>Now that the initial user guide is complete, you can explore the EasyDiffraction API for detailed information on the available classes and methods. Additionally, you can find practical examples and step-by-step guides in the Tutorials.</p>"},{"location":"user-guide/parameters/_diffrn_radiation/","title":"diffrn radiation","text":"<p>coreCIF</p>"},{"location":"user-guide/parameters/_diffrn_radiation/#_diffrn_radiation","title":"_diffrn_radiation","text":"<p>Data items in this category describe the radiation used in measuring the diffraction intensities. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/_diffrn_radiation/#_diffrn_radiationprobe","title":"_diffrn_radiation.probe","text":"<p>The nature of the radiation used (i.e. the name of the subatomic particle or the region of the electromagnetic spectrum).</p> <p>Supported values: <code>neutron</code> and <code>x-ray</code></p>"},{"location":"user-guide/parameters/_diffrn_radiation_wavelength/","title":"diffrn radiation wavelength","text":"<p>coreCIF</p>"},{"location":"user-guide/parameters/_diffrn_radiation_wavelength/#_diffrn_radiation_wavelength","title":"_diffrn_radiation_wavelength","text":"<p>Data items in this category describe the wavelength of radiation used in diffraction measurements. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/_diffrn_radiation_wavelength/#_diffrn_radiation_wavelengthwavelength","title":"_diffrn_radiation_wavelength.wavelength","text":"<p>Wavelength of the radiation used to measure the unit cell.</p>"},{"location":"user-guide/parameters/_exptl_crystal/","title":"exptl crystal","text":"<p>customCIF</p>"},{"location":"user-guide/parameters/_extinction/","title":"extinction","text":"<p>customCIF</p>"},{"location":"user-guide/parameters/_pd_calib/","title":"pd calib","text":"<p>customCIF</p>"},{"location":"user-guide/parameters/_pd_calib/#_pd_calib","title":"_pd_calib","text":"<p>This section defines the parameters used for the calibration of the instrument, similar to this IUCr section.</p>"},{"location":"user-guide/parameters/_pd_calib/#_pd_calib2theta_offset","title":"_pd_calib.2theta_offset","text":"<p>An offset angle (in degrees) used to calibrate 2\u03b8.</p>"},{"location":"user-guide/parameters/atom_site/","title":"Atom site","text":"<p>coreCIF</p>"},{"location":"user-guide/parameters/atom_site/#_atom_site","title":"_atom_site","text":"<p>Data items in this category record details about the atom sites in a crystal structure, such as the positional coordinates and atomic displacement parameters. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/atom_site/#_atom_sitelabel","title":"_atom_site.label","text":"<p>This is a unique identifier for a particular site in the asymmetric unit of the crystal unit cell.</p>"},{"location":"user-guide/parameters/atom_site/#_atom_sitetype_symbol","title":"_atom_site.type_symbol","text":"<p>A code to identify the atom specie(s) occupying this site.</p>"},{"location":"user-guide/parameters/atom_site/#_atom_sitefract","title":"_atom_site.fract","text":"<p>Atom-site coordinates as fractions of the _cell_length values.</p> <ul> <li>_atom_site.fract_x</li> <li>_atom_site.fract_y</li> <li>_atom_site.fract_z</li> </ul>"},{"location":"user-guide/parameters/atom_site/#_atom_siteoccupancy","title":"_atom_site.occupancy","text":"<p>The fraction of the atom type present at this site.</p>"},{"location":"user-guide/parameters/atom_site/#_atom_siteadp_type","title":"_atom_site.ADP_type","text":"<p>Code for type of atomic displacement parameters used for the site. Currently only <code>Biso</code> (isotropic B) is supported.</p>"},{"location":"user-guide/parameters/atom_site/#_atom_siteb_iso_or_equiv","title":"_atom_site.B_iso_or_equiv","text":"<p>Isotropic atomic displacement parameter, or equivalent isotropic atomic displacement parameter, in angstroms squared.</p>"},{"location":"user-guide/parameters/atom_site/#_atom_sitesite_symmetry_multiplicity","title":"_atom_site.site_symmetry_multiplicity","text":"<p><code>optional parameter</code></p> <p>The number of different sites that are generated by the application of the space-group symmetry to the coordinates given for this site. It is equal to the multiplicity given for this Wyckoff site in International Tables for Crystallography Vol. A (2002).</p>"},{"location":"user-guide/parameters/atom_site/#_atom_sitewyckoff_symbol","title":"_atom_site.Wyckoff_symbol","text":"<p><code>optional parameter</code></p> <p>The Wyckoff symbol (letter) as listed in the space-group tables of International Tables for Crystallography Vol. A.</p>"},{"location":"user-guide/parameters/background/","title":"Background","text":"<p>pdCIF</p>"},{"location":"user-guide/parameters/background/#_pd_background","title":"_pd_background","text":"<p>This category defines various background functions that could be used when calculating diffractograms. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/background/#_pd_backgroundline_segment_x","title":"_pd_background.line_segment_X","text":"<p>List of X-coordinates used to create many straight-line segments representing the background in a calculated diffractogram.</p> <p>Supported values: <code>2theta</code> and <code>time-of-flight</code></p>"},{"location":"user-guide/parameters/background/#_pd_backgroundline_segment_intensity","title":"_pd_background.line_segment_intensity","text":"<p>List of intensities used to create many straight-line segments representing the background in a calculated diffractogram.</p>"},{"location":"user-guide/parameters/background/#_pd_backgroundx_coordinate","title":"_pd_background.X_coordinate","text":"<p>The type of X-coordinate against which the pd_background values were calculated.</p>"},{"location":"user-guide/parameters/cell/","title":"Cell","text":"<p>coreCIF</p>"},{"location":"user-guide/parameters/cell/#_cell","title":"_cell","text":"<p>Data items in this category record details about the crystallographic cell parameters and their measurement. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/cell/#_cellangle","title":"_cell.angle","text":"<p>The angles between the bounding cell axes in degrees.</p> <ul> <li>_cell.angle_alpha</li> <li>_cell.angle_beta</li> <li>_cell.angle_gamma</li> </ul>"},{"location":"user-guide/parameters/cell/#_celllength","title":"_cell.length","text":"<p>The lengths of each cell axis in angstroms.</p> <ul> <li>_cell.length_a</li> <li>_cell.length_b</li> <li>_cell.length_c</li> </ul>"},{"location":"user-guide/parameters/expt_type/","title":"Expt type","text":"<p>coreCIF</p>"},{"location":"user-guide/parameters/expt_type/#_cell","title":"_cell","text":"<p>Data items in this category record details about the crystallographic cell parameters and their measurement. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/expt_type/#_cellangle","title":"_cell.angle","text":"<p>The angles between the bounding cell axes in degrees.</p> <ul> <li>_cell.angle_alpha</li> <li>_cell.angle_beta</li> <li>_cell.angle_gamma</li> </ul>"},{"location":"user-guide/parameters/expt_type/#_celllength","title":"_cell.length","text":"<p>The lengths of each cell axis in angstroms.</p> <ul> <li>_cell.length_a</li> <li>_cell.length_b</li> <li>_cell.length_c</li> </ul>"},{"location":"user-guide/parameters/instrument/","title":"Instrument","text":"<p>customCIF</p>"},{"location":"user-guide/parameters/instrument/#_pd_instr","title":"_pd_instr","text":"<p>This section contains information relevant to the instrument used for the diffraction measurement, similar to this IUCr section.</p>"},{"location":"user-guide/parameters/instrument/#_pd_instrresolution","title":"_pd_instr.resolution","text":"<p>In general, the profile of a Bragg reflection centred at the peak position can be approximated by mathematical convolution of contributions from the instrument, called the instrumental resolution function, and from the microstructure of the sample. Because many contributions to powder diffraction peaks have a nearly Gaussian or Lorentzian shape, the pseudo-Voigt function, is widely used to describe peak profiles in powder diffraction.</p> <p>Half-width parameters (normally characterising the instrumental resolution function) as implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_u</li> <li>_pd_instr.resolution_v</li> <li>_pd_instr.resolution_w</li> </ul> <p>Lorentzian isotropic microstrain parameter as implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_x</li> </ul> <p>Lorentzian isotropic particle size parameteras implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_y</li> </ul>"},{"location":"user-guide/parameters/instrument/#_pd_instrreflex_asymmetry","title":"_pd_instr.reflex_asymmetry","text":"<p>Peak profile asymmetry parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.reflex_asymmetry_p1</li> <li>_pd_instr.reflex_asymmetry_p2</li> <li>_pd_instr.reflex_asymmetry_p3</li> <li>_pd_instr.reflex_asymmetry_p4</li> </ul>"},{"location":"user-guide/parameters/instrument/#_pd_instr2theta_bank","title":"_pd_instr.2theta_bank","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p>"},{"location":"user-guide/parameters/instrument/#_pd_instrdtt","title":"_pd_instr.dtt","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.dtt1</li> <li>_pd_instr.dtt2</li> </ul>"},{"location":"user-guide/parameters/instrument/#_pd_instrzero","title":"_pd_instr.zero","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p>"},{"location":"user-guide/parameters/instrument/#_pd_instralpha","title":"_pd_instr.alpha","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.alpha0</li> <li>_pd_instr.alpha1</li> </ul>"},{"location":"user-guide/parameters/instrument/#_pd_instrbeta","title":"_pd_instr.beta","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.beta0</li> <li>_pd_instr.beta1</li> </ul>"},{"location":"user-guide/parameters/instrument/#_pd_instrsigma","title":"_pd_instr.sigma","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.sigma0</li> <li>_pd_instr.sigma1</li> <li>_pd_instr.sigma2</li> </ul>"},{"location":"user-guide/parameters/linked_phases/","title":"Linked phases","text":"<p>pdCIF</p>"},{"location":"user-guide/parameters/linked_phases/#_pd_phase_block","title":"_pd_phase_block","text":"<p>A table of phases relevant to the current data block. Each phase is identified by its data block identifier. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/linked_phases/#_pd_phase_blockid","title":"_pd_phase_block.id","text":"<p>A block ID code identifying a block containing phase information.</p>"},{"location":"user-guide/parameters/linked_phases/#_pd_phase_blockscale","title":"_pd_phase_block.scale","text":"<p>Phase scale.</p>"},{"location":"user-guide/parameters/pd_meas/","title":"Pd meas","text":"<p>pdCIF</p>"},{"location":"user-guide/parameters/pd_meas/#_pd_meas","title":"_pd_meas","text":"<p>This section contains the measured diffractogram, similar to this IUCr section.</p>"},{"location":"user-guide/parameters/pd_meas/#_pd_meas2theta_scan","title":"_pd_meas.2theta_scan","text":"<p>2\u03b8 diffraction angle (in degrees) for intensity points measured in a scanning method.</p>"},{"location":"user-guide/parameters/pd_meas/#_pd_meastime-of-flight","title":"_pd_meas.time-of-flight","text":"<p>Measured time (in microseconds) for time-of-flight neutron measurements.</p>"},{"location":"user-guide/parameters/pd_meas/#_pd_measintensity_total","title":"_pd_meas.intensity_total","text":"<p>Intensity recorded at each measurement point as a function of angle.</p>"},{"location":"user-guide/parameters/pd_meas/#_pd_measintensity_total_su","title":"_pd_meas.intensity_total_su","text":"<p>Standard uncertainty of _pd_meas.2theta_scan.</p>"},{"location":"user-guide/parameters/peak/","title":"Peak","text":"<p>coreCIF</p>"},{"location":"user-guide/parameters/peak/#_cell","title":"_cell","text":"<p>Data items in this category record details about the crystallographic cell parameters and their measurement. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/peak/#_cellangle","title":"_cell.angle","text":"<p>The angles between the bounding cell axes in degrees.</p> <ul> <li>_cell.angle_alpha</li> <li>_cell.angle_beta</li> <li>_cell.angle_gamma</li> </ul>"},{"location":"user-guide/parameters/peak/#_celllength","title":"_cell.length","text":"<p>The lengths of each cell axis in angstroms.</p> <ul> <li>_cell.length_a</li> <li>_cell.length_b</li> <li>_cell.length_c</li> </ul>"},{"location":"user-guide/parameters/space_group/","title":"Space group","text":"<p>coreCIF</p>"},{"location":"user-guide/parameters/space_group/#_space_group","title":"_space_group","text":"<p>Contains all the data items that refer to the space group as a whole. Please see the IUCr page for further details.</p>"},{"location":"user-guide/parameters/space_group/#_space_groupname_h-m_alt","title":"_space_group.name_H-M_alt","text":"<p>The international Hermann-Mauguin space-group symbol as defined in International Tables for Crystallography Volume A. It allows any Hermann-Mauguin symbol to be given.</p>"},{"location":"user-guide/parameters/space_group/#_space_groupit_coordinate_system_code","title":"_space_group.IT_coordinate_system_code","text":"<p>A qualifier taken from the enumeration list identifying which setting in International Tables for Crystallography Volume A (2002) (IT) is used.</p>"}]}