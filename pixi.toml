[workspace]
# Channels used to fetch the packages from
channels = ["conda-forge"]
platforms = [
  "win-64",
  "linux-64",
  "osx-64",
  "osx-arm64",
  "osx-arm64",
] # Platforms supported for lock file (pixi.lock)

##########
# FEATURES
##########

# Default feature configuration

[dependencies] # short for [feature.default.dependencies]
libcblas = "*"    # CBLAS library for linear algebra. Needed for pdffit2 on Windows
pip = "*"         # Needed to install from PyPI
jupyterlab = "*"  # JupyterLab for notebooks
pixi-kernel = "*" # IPython kernel for Jupyter

# Extra features for different Python versions

# Python 3.11
[feature.py311.dependencies]
python = "3.11.*"

# Python 3.12
[feature.py312.dependencies]
python = "3.12.*"

# Python 3.13
[feature.py313.dependencies]
python = "3.13.*"

# Development (editable)
# This feature is used for local development with editable installation of
# easydiffraction. Effectively, the source code defined in the pyproject.toml
# will be used directly without installing the package. The changes are
# reflected immediately without needing to reinstall the package.
# This feature should be deleted in CI, because otherwise the pixi lock file
# created locally will be considered as outdated in CI.
[feature.dev-editable.pypi-dependencies]
easydiffraction = { editable = true, path = ".", extras = [
  "dev",
  "visualization",
] }

# Development (non-editable)
# This feature is used for development in CI, where the easydiffraction
# is installed from the local source code defined in the pyproject.toml, but
# not in editable mode. This ensures that the lock file update locally will
# work in CI.
[feature.dev.pypi-dependencies]
easydiffraction = { path = ".", extras = ["dev", "visualization"] }

# Development (wheel)
# This feature is used for development in CI, where the easydiffraction package
# is installed from a built wheel file. The path to the wheel file will be
# added dynamically in CI.
[feature.dev-wheel.pypi-dependencies]

# Production
# This feature is used for production, where the package is installed from
# PyPI.
[feature.prod.pypi-dependencies]
easydiffraction = { version = "*", extras = ["dev", "visualization"] }

# Documentation
# This feature is used to build the documentation, where the package is
# installed from PyPI with the additional dependencies needed for building
# the docs.
[feature.docs.pypi-dependencies]
easydiffraction = { version = "*", extras = ["dev", "visualization", "docs"] }

# Prettier
# This feature is used to install Node.js and Prettier for formatting
# non-Python files.
[feature.prettier.dependencies]
nodejs = "*" # Needed for prettier

##############
# ENVIRONMENTS
##############

[environments]

# The `default` environment is always included in the lock file, so there is no
# need to specify it explicitly in the environments section.

# The `default` environment is used for development and testing, so it includes
# the latest Python version (3.13) and the `dev` feature.

# The `py311`, `py312`, and `py313` environments are used for testing the package
# on different Python versions. Each of them has a `dev` and `prod` variant
# to test the package in development and production modes.

# The solve groups are used to group the features for solving the dependencies
# for each Python version. This ensures, for example, py313-dev and py313-prod
# share the same versions for overlapping deps, while Python 3.12/3.11 get
# their own solves.

py311-dev = { features = ["py311", "dev", "prettier"], solve-group = "py311" }
py312-dev = { features = ["py312", "dev", "prettier"], solve-group = "py312" }
py313-dev = { features = ["py313", "dev", "prettier"], solve-group = "py313" }

py311-dev-wheel = { features = ["py311", "dev-wheel"] }
py312-dev-wheel = { features = ["py312", "dev-wheel"] }
py313-dev-wheel = { features = ["py313", "dev-wheel"] }

py313-docs = { features = ["py313", "docs"], solve-group = "py313" }

py313-prod = { features = ["py313", "prod"], solve-group = "py313" }

default = ["py313", "dev-editable"]

#######
# TASKS
#######

[tasks]

# Setup tasks
fix-find-links = "python tools/fix_find_links.py"

# Install tasks
install-prettier = "npm install --no-save --no-audit --no-fund prettier prettier-plugin-toml"

# Remove tasks
remove-ed-dev = "pixi remove --pypi --feature dev easydiffraction"

# Update dependencies and lock file
update-deps = "pixi update"

# Testing tasks
unit-tests-dev = "python -m pytest tests/unit_tests/ --color=yes -v"
func-tests-dev = "python -m pytest tests/functional_tests/ --color=yes -n auto -v"
unit-tests = "python -m pytest --color=yes --pyargs easydiffraction.tests.unit_tests"
func-tests = "python -m pytest --color=yes -n auto --pyargs easydiffraction.tests.functional_tests"

# Check code quality tasks
check-pyproject = "python -m validate_pyproject pyproject.toml"
check-lint-py = "python -m ruff check ."
check-format-py = "python -m ruff format . --check"
check-format-non-py = "npx prettier . --list-different --config=prettierrc.toml"

# Fix code quality tasks
lint-py = "python -m ruff check . --fix"
format-py = "python -m ruff format ."
format-non-py = "npx prettier . --list-different --write --config=prettierrc.toml"

# Development tasks
update-spdx = "python tools/update_spdx.py"

# Building tasks
build = "python -m build --wheel --outdir dist"

# Downloading tasks
fetch-tutorials = "python -c \"import urllib.request, zipfile, os; f='tutorials.zip'; urllib.request.urlretrieve('https://github.com/easyscience/diffraction-lib/releases/latest/download/tutorials.zip', f); zipfile.ZipFile(f).extractall(); os.remove(f)\""

# Composed tasks
test = { depends-on = ["unit-tests", "func-tests"] }
code-quality = { depends-on = [
  "check-pyproject",
  "lint-py",
  "format-py",
  "format-non-py",
] }
pre-commit = { depends-on = ["code-quality", "test"] }

convert-notebooks = 'jupytext tutorials/*.py --from py:percent --to ipynb'
stripout-notebooks = 'nbstripout tutorials/*.ipynb'

check-format-notebooks = 'nbqa ruff tutorials/'
fix-format-notebooks = 'nbqa ruff tutorials/ --fix'

run-notebooks = 'python -m pytest --nbmake tutorials/ --nbmake-timeout=600 --overwrite --color=yes -n auto -v'
test-notebooks = 'python -m pytest --nbmake tutorials/ --nbmake-timeout=600 --color=yes -n auto -v'

test-scripts = 'python -m pytest tools/test_scripts.py --color=yes -n auto -v'

easydiffraction = "python -m easydiffraction"
