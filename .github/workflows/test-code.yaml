# This is the main workflow for testing the code before and after
# packaging it.
# The workflow is divided into three jobs:
# 1. code-quality:
#    - Check the validity of pyproject.toml
#    - Check code linting
#    - Check code formatting
#    - Check formatting of Markdown, YAML, TOML, etc. files
# 2. run-tests:
#    - Test the code base against the latest code in the repository
#    - Create the Python package
#    - Upload the Python package for the next job
# 3. check-package:
#    - Download the Python package (including extra files) from the previous job
#    - Install the downloaded Python package
#    - Test the code base against the installed package

name: Test code and package

on:
  # Trigger the workflow on push
  push:
    # Every branch
    branches:
      - '**'
    # But do not run this workflow on creating a new tag starting with
    # 'v', e.g. 'v1.0.3' (see publish-pypi.yml)
    tags-ignore:
      - 'v*'
  # Trigger the workflow on pull request
  pull_request:
    branches:
      - '**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent workflow, skipping runs queued between the run
# in-progress and latest queued. And cancel in-progress runs.
concurrency:
  group:
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Set the environment vars to be used in all jobs defined in this workflow
  # Set the CI_BRANCH environment var to be the branch name
  # Set the NOTEBOOKS_DIR environment var to be the dir of Jupyter notebooks
  CI_BRANCH: ${{ github.head_ref || github.ref_name }}
  NOTEBOOKS_DIR: tutorials
  PIXI_DEV_ENVS: 'py311-dev py312-dev py313-dev'
  PIXI_PROD_ENVS: 'py311-prod py312-prod py313-prod'

jobs:
  # Job 1: Check code quality and consistency
  code-quality:
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          run-install: false # Do not install the current project at this step
          cache: false
          post-cleanup: false

      - name: Create pixi environments and install dependencies
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi install -e $env --locked
          done
          pixi run install-prettier

      # Check the validity of pyproject.toml
      - name: Check validity of pyproject.toml
        id: check_pyproject
        continue-on-error: true
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run -e $env check-pyproject
          done

      # Check code linting with Ruff in the project root
      - name: Check code linting
        id: check_code_linting
        continue-on-error: true
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run -e $env check-lint-py
          done

      - name: Suggestion to fix code linting issues (*.py files)
        if: steps.check_code_linting.outcome == 'failure'
        shell: bash
        run: echo "In project root run 'pixi run lint-py' and commit changes"

      # Check code formatting with Ruff in the project root
      - name: Check code formatting
        id: check_code_formatting
        continue-on-error: true
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run -e $env check-format-py
          done

      - name: Suggestion to fix code formatting issues (*.py files)
        if: steps.check_code_formatting.outcome == 'failure'
        shell: bash
        run: echo "In project root run 'pixi run format-py' and commit changes"

      # Check formatting of Markdown, YAML, TOML, etc. files with Prettier in
      # the project root
      - name: Check formatting of Markdown, YAML, TOML, etc. files
        id: check_others_formatting
        continue-on-error: true
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run -e $env check-format-non-py
          done

      - name: Suggestion to fix non-code formatting issues (*.md, *.yml, etc.)
        if: steps.check_others_formatting.outcome == 'failure'
        shell: bash
        run:
          echo "In project root run 'pixi run format-non-py' and commit changes"

      - name: Force fail if any of the previous steps failed
        if: |
          steps.check_pyproject.outcome == 'failure' ||
          steps.check_code_linting.outcome == 'failure' ||
          steps.check_code_formatting.outcome == 'failure' ||
          steps.check_others_formatting.outcome == 'failure'
        run: exit 1

  # Job 2: Test code and upload coverage to Codecov.
  run-tests:
    needs: code-quality # previous job needs to be finished first

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-13, macos-14]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0' # full history with tags to get the version number by versioningit

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          run-install: false # Do not install the current project at this step
          cache: false
          post-cleanup: false

      - name: Create pixi environments and install dependencies
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi install -e $env --locked
          done
          pixi run install-prettier

      - name: Run unit tests
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run -e $env unit-tests
          done

      - name: Run functional tests
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run -e $env func-tests
          done

      # Ensures a consistent high version like 999.0.0 when not on a tagged commit
      # This is needed for testing the package in the next job, as its version
      # must be higher than the PyPI version for pip to prefer the local version.
      - name: Inject fallback version tag if not on a real tag
        shell: bash
        run: |
          if ! git describe --tags --match "v*" --exact-match > /dev/null 2>&1; then
            echo "Not on release tag â€” applying fallback 'v999.0.0'"
            git tag v999.0.0
          else
            echo "On a valid tag"
          fi

      - name: Create Python package for the next job
        shell: bash
        run: |
          for env in ${{ env.PIXI_DEV_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run build
            mkdir -p dist/$env
            mv dist/*.whl dist/$env/
          done

      - name: Upload Python package built
        uses: actions/upload-artifact@v4
        with:
          name: edl_${{ matrix.os }}_${{ runner.arch }}
          path: |
            dist/
            tests/
            pixi.toml
          if-no-files-found: 'error'
          compression-level: 0

  # Job 3: Test the package
  test-package:
    needs: run-tests # the previous job needs to be finished first

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-13, macos-14]

    runs-on: ${{ matrix.os }}

    steps:
      - name:
          Download zipped Python package (incl. extra files) from previous job
        uses: actions/download-artifact@v4
        with: # name or path are taken from the upload step of the previous job
          name: edl_${{ matrix.os }}_${{ runner.arch }}
          path: . # directory to extract downloaded zipped artifacts

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          run-install: false # Do not install the current project at this step
          cache: false
          post-cleanup: false

      # 1. Remove easydiffraction from dev feature
      # This is needed for pixi to work correctly, as otherwise it will try to
      # solve easydiffraction as a dependency in the dev feature, which will
      # fail as we do not have the pyproject.toml file in the downloaded
      # artifact.
      # 2. Replaces "." with "dist" in pixi.toml to find the built package
      # This is needed as "dist" directory is only created in the previous job
      # and then downloaded in this job.
      - name: Remove easydiffraction from dev feature
        shell: bash
        run: pixi remove --pypi --feature dev easydiffraction

      - name: Create pixi environments and install dependencies
        shell: bash
        run: |
          for env in ${{ env.PIXI_PROD_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run fix-find-links $env
            pixi install -e $env
            echo "ðŸ“¦ Installed easydiffraction:"
            pixi run -e $env python -m pip show easydiffraction | grep ^Version:
          done

      - name: Run unit tests (using built package from previous job)
        shell: bash
        run: |
          for env in ${{ env.PIXI_PROD_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run -e $env unit-tests
          done

      - name: Run functional tests (using built package from previous job)
        shell: bash
        run: |
          for env in ${{ env.PIXI_PROD_ENVS }}; do
            echo "ðŸ§ª Current env: $env"
            pixi run -e $env func-tests
          done
