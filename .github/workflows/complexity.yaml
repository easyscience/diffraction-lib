name: Code Complexity

on:
  # Trigger the workflow on push
  push:
    # Selected branches
    branches: ['**']
  # Trigger the workflow on pull request
  pull_request:
    branches: [master, develop]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent workflow, skipping runs queued between the run
# in-progress and latest queued. And cancel in-progress runs.
concurrency:
  group:
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Check code quality and consistency
  code-complexity:
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          environments: >-
            py313-dev
          activate-environment: py313-dev
          run-install: true
          frozen: true
          cache: false
          post-cleanup: false

      - name: Cyclomatic Complexity (radon cc)
        run: pixi run complexity-check-json > cc.json

      - name: Maintainability Index (radon mi)
        run: pixi run maintainability-check-json > mi.json

      - name: Summarize Radon results
        run: |
          python - <<'PY'
          import json, pathlib, statistics, os
      
          cc = json.loads(pathlib.Path("cc.json").read_text())
          mi = json.loads(pathlib.Path("mi.json").read_text())
      
          # collect all cc values
          cc_values = [f["complexity"] for funcs in cc.values() for f in funcs]
          avg_cc = statistics.mean(cc_values) if cc_values else None
      
          # collect all mi values (use the "mi" field, not the whole dict)
          mi_values = [entry["mi"] for entry in mi.values()]
          avg_mi = statistics.mean(mi_values) if mi_values else None
      
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as fh:
              fh.write("## Radon Complexity Report\n\n")
              fh.write("### Cyclomatic Complexity\n")
              fh.write(f"Average CC: {avg_cc:.2f}\n\n" if avg_cc else "No functions found\n")
              fh.write("### Maintainability Index\n")
              fh.write(f"Average MI: {avg_mi:.2f}\n" if avg_mi else "No files found\n")
          PY