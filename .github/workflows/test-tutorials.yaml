name: Test tutorials

on:
  # Trigger the workflow on push
  push:
    # Every branch
    branches:
      - '**'
    # But do not run this workflow on creating a new tag starting with
    # 'v', e.g. 'v1.0.3' (see publish-pypi.yml)
    tags-ignore:
      - 'v*'
  # Trigger the workflow on pull request
  pull_request:
    branches:
      - '**'
  # Trigger the workflow on a schedule (every day at midnight)
  schedule:
    - cron: '0 0 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent workflow, skipping runs queued between the run
# in-progress and latest queued. And cancel in-progress runs.
concurrency:
  group:
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Set the environment variables to be used in all jobs defined in this workflow
  # Set the CI_BRANCH environment variable to be the branch name
  # Set the NOTEBOOKS_DIR environment var to be the dir of Jupyter notebooks
  # Set PYTHONIOENCODING to utf-8 to avoid encoding issues on Windows
  CI_BRANCH: ${{ github.head_ref || github.ref_name }}
  NOTEBOOKS_DIR: tutorials
  PYTHONIOENCODING: utf-8

jobs:
  # Job 1: Check code quality and consistency
  code-quality:
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          run-install: true
          cache: false
          post-cleanup: false

      - name: Convert tutorial scripts to notebooks
        shell: bash
        run: |
          pixi run convert-notebooks
          pixi run stripout-notebooks

      - name: Check notebooks formatting
        id: check_formatting
        continue-on-error: true
        shell: bash
        run: pixi run check-format-notebooks

      - name: Suggestion to fix notebook formatting issues (*.ipynb)
        if: steps.check_formatting.outcome == 'failure'
        shell: bash
        run: echo "Run 'pixi run fix-format-notebooks' and commit changes."

      - name: Force fail if the previous step failed
        if: steps.check_formatting.outcome == 'failure'
        run: exit 1

  # Job 2: Test tutorials as Python scripts and Jupyter Notebooks
  test-tutorials:
    needs: code-quality # previous job needs to be finished first

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-13, macos-14]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          run-install: true
          cache: false
          post-cleanup: false

      - name: Test tutorials as python scripts
        shell: bash
        run: pixi run test-scripts

      - name: Convert tutorial scripts to notebooks
        shell: bash
        run: |
          pixi run convert-notebooks
          pixi run stripout-notebooks

      - name: Test tutorials as notebooks
        shell: bash
        run: pixi run test-notebooks
